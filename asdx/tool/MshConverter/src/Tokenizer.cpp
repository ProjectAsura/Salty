//-------------------------------------------------------------------------------
// File : tokenizer.cpp
// Desc : Asura Tokenizer Module.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------
#include <cstring>
#include <cassert>
#include "tokenizer.h"


/////////////////////////////////////////////////////////////////////////////////
// Tokenizer class
/////////////////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------------------
//      コンストラクタです.
//-------------------------------------------------------------------------------
Tokenizer::Tokenizer( unsigned int bufferSize )
: m_pBuffer( NULL )
{
    m_Separator.clear();
    m_Splitter.clear();

    m_pToken = new char [ bufferSize ];
    assert( m_pToken != NULL );
}

//-------------------------------------------------------------------------------
//      デストラクタです.
//-------------------------------------------------------------------------------
Tokenizer::~Tokenizer()
{ Release(); }

//-------------------------------------------------------------------------------
//      区切り文字を設定します.
//-------------------------------------------------------------------------------
void Tokenizer::SetSeparator( const char* pSeparator )
{ m_Separator = std::string( pSeparator ); }

//-------------------------------------------------------------------------------
//      切り出し文字を設定します.
//-------------------------------------------------------------------------------
void Tokenizer::SetSplitter( const char* pSplitter )
{ m_Splitter = std::string( pSplitter ); }

//-------------------------------------------------------------------------------
//      バッファポインタを設定します.
//-------------------------------------------------------------------------------
void Tokenizer::SetBuffer( char* pBuffer )
{ m_pBuffer = pBuffer; }

//-------------------------------------------------------------------------------
//      メモリ解放処理を行います.
//-------------------------------------------------------------------------------
void Tokenizer::Release()
{
    m_Separator.clear();
    m_Splitter.clear();
    if ( m_pToken != NULL )
    {
        delete [] m_pToken;
        m_pToken = NULL;
    }

    m_pBuffer = NULL;
}

//-------------------------------------------------------------------------------
//      トークンを取得します.
//-------------------------------------------------------------------------------
void Tokenizer::GetToken( bool isAdvance )
{
    char* p = m_pBuffer;
    char* q = m_pToken;

    while( ( (*p) != '\0' ) 
        && ( strchr( m_Separator.c_str(), (*p) ) ) )
    { p++; }

    if ( strchr( m_Splitter.c_str(), (*p) ) )
    { (*q++) = (*p++); }
    else
    {
        std::string split = m_Separator + m_Splitter;
        while( ( (*p) != '\0' )
            && ( !strchr( split.c_str(), (*p) ) ) )
        { (*q++) = (*p++); }
    }

    if ( isAdvance )
    { m_pBuffer = p; }

    (*q) = '\0';
}

//-------------------------------------------------------------------------------
//      次のトークンを取得します.
//-------------------------------------------------------------------------------
void Tokenizer::Next()
{ GetToken( true ); }

//-------------------------------------------------------------------------------
//      トークンをチェックします.
//-------------------------------------------------------------------------------
bool Tokenizer::Check( const char* pToken )
{ return ( strcmp( m_pToken, pToken ) == 0 ); }

//-------------------------------------------------------------------------------
//      終了判定を行います.
//-------------------------------------------------------------------------------
bool Tokenizer::IsEnd()
{ return ( ( (*m_pBuffer) == '\0' ) || ( m_pBuffer == NULL ) ); }

//-------------------------------------------------------------------------------
//      トークンをchar*型として返却します.
//-------------------------------------------------------------------------------
char* Tokenizer::GetAsChar()
{ return m_pToken; }

//-------------------------------------------------------------------------------
//      トークンをf64型として返却します.
//-------------------------------------------------------------------------------
double   Tokenizer::GetAsF64()
{ return atof( m_pToken ); }

//-------------------------------------------------------------------------------
//      トークンをf32型として返却します.
//-------------------------------------------------------------------------------
float   Tokenizer::GetAsF32()
{ return static_cast<float>( atof( m_pToken ) ); }

//-------------------------------------------------------------------------------
//      トークンをs32型として返却します.
//-------------------------------------------------------------------------------
int   Tokenizer::GetAsS32()
{ return atoi( m_pToken ); }

//-------------------------------------------------------------------------------
//      トークンをu32型として返却します.
//-------------------------------------------------------------------------------
unsigned int   Tokenizer::GetAsU32()
{ return static_cast<unsigned int>( atoi( m_pToken ) ); }

//-------------------------------------------------------------------------------
//      トークンをchar*型として返却します.
//-------------------------------------------------------------------------------
char* Tokenizer::GetTokenAsChar( bool isAdvance )
{
    GetToken( isAdvance );
    return GetAsChar();
}

//-------------------------------------------------------------------------------
//      トークンをf64型として返却します.
//-------------------------------------------------------------------------------
double  Tokenizer::GetTokenAsF64( bool isAdvance )
{
    GetToken( isAdvance );
    return GetAsF64();
}

//-------------------------------------------------------------------------------
//      トークンをf32型として返却します.
//-------------------------------------------------------------------------------
float  Tokenizer::GetTokenAsF32( bool isAdvance )
{
    GetToken( isAdvance );
    return GetAsF32();
}

//-------------------------------------------------------------------------------
//      トークンをs32型として返却します.
//-------------------------------------------------------------------------------
int  Tokenizer::GetTokenAsS32( bool isAdvance )
{
    GetToken( isAdvance );
    return GetAsS32();
}

//-------------------------------------------------------------------------------
//      トークンをu32型として返却します.
//-------------------------------------------------------------------------------
unsigned int  Tokenizer::GetTokenAsU32( bool isAdvance )
{
    GetToken( isAdvance );
    return GetAsU32();
}

//-------------------------------------------------------------------------------
//      トークンをchar*型として返却し，バッファポインタを進めます.
//-------------------------------------------------------------------------------
char* Tokenizer::GetNextAsChar()
{ return GetTokenAsChar( true ); }

//-------------------------------------------------------------------------------
//      トークンをf64型として返却し，バッファポインタを進めます.
//-------------------------------------------------------------------------------
double   Tokenizer::GetNextAsF64()
{ return GetTokenAsF64( true ); }

//-------------------------------------------------------------------------------
//      トークンをf32型として返却し，バッファポインタを進めます.
//-------------------------------------------------------------------------------
float   Tokenizer::GetNextAsF32()
{ return GetTokenAsF32( true ); }

//-------------------------------------------------------------------------------
//      トークンをs32型として返却し，バッファポインタを進めます.
//-------------------------------------------------------------------------------
int   Tokenizer::GetNextAsS32()
{ return GetTokenAsS32( true ); }

//-------------------------------------------------------------------------------
//      トークンをu32型として返却し，バッファポインタを進めます.
//-------------------------------------------------------------------------------
unsigned int   Tokenizer::GetNextAsU32()
{ return GetTokenAsU32( true ); }


