//-----------------------------------------------------------------------------------
// File : s3d_shape.h
// Desc : Shape Module.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------------

#ifndef __S3D_SHAPE_H__
#define __S3D_SHAPE_H__

//-----------------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------------
#include <s3d_typedef.h>
#include <s3d_math.h>


namespace s3d {

//-----------------------------------------------------------------------------------
// Forward Declarations.
//-----------------------------------------------------------------------------------
struct IShape;


//-----------------------------------------------------------------------------------
// Constant Values
//-----------------------------------------------------------------------------------
const f64 REFRACTITY_WATER   = 1.33;  // 水の屈折率 (1.3)
const f64 REFRACTITY_CRYSTAL = 1.54;  // 水晶の屈折率 (1.54).
const f64 REFRACTITY_DIAMOND = 2.42;  // ダイアモンドの屈折率 (2.42)


/////////////////////////////////////////////////////////////////////////////////////
// MATERIAL_TYPE enum
/////////////////////////////////////////////////////////////////////////////////////
enum MATERIAL_TYPE
{
    MATERIAL_TYPE_MATTE,    // つやけし (要はLambert).
    MATERIAL_TYPE_MIRROR,   // 鏡.
    MATERIAL_TYPE_CRYSTAL,  // 水晶.
};


/////////////////////////////////////////////////////////////////////////////////////
// HitRecord structure
/////////////////////////////////////////////////////////////////////////////////////
struct HitRecord
{
    f64         distance;       //!< 衝突点までの距離.
    Vector3     position;       //!< 衝突点の位置座標.
    Vector3     normal;         //!< 法線ベクトル.
    IShape*     pShape;         //!< オブジェクトへのポインタ.

    //-------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------------
    HitRecord()
    : distance   ( D_MAX )
    , position   ( 0.0, 0.0, 0.0 )
    , normal     ( 0.0, 0.0, 0.0 )
    , pShape     ( nullptr )
    { /* DO_NOTHING */ }
};


/////////////////////////////////////////////////////////////////////////////////////
// IShape interface
/////////////////////////////////////////////////////////////////////////////////////
struct IShape
{
    //-------------------------------------------------------------------------------
    //! @brief      交差判定します.
    //-------------------------------------------------------------------------------
    virtual bool            IsHit           ( const Ray&, HitRecord& record ) = 0;

    //-------------------------------------------------------------------------------
    //! @brief      マテリアルタイプを取得します.
    //-------------------------------------------------------------------------------
    virtual MATERIAL_TYPE   GetMaterialType () = 0;

    //-------------------------------------------------------------------------------
    //! @brief      自己発光カラーを取得します.
    //-------------------------------------------------------------------------------
    virtual Color           GetEmissive     () = 0;

    //-------------------------------------------------------------------------------
    //! @brief      マテリアルカラーを取得します.
    //-------------------------------------------------------------------------------
    virtual Color           GetColor        () = 0;
};


//////////////////////////////////////////////////////////////////////////////////////
// Sphere structure
//////////////////////////////////////////////////////////////////////////////////////
struct Sphere : public IShape
{
    f64             radius;         //!< 半径です.
    Vector3         position;       //!< 中心位置です.
    Color           emissive;       //!< 自己発光カラーです.
    Color           color;          //!< カラーです.
    MATERIAL_TYPE   material;       //!< マテリアルタイプです.

    //--------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //--------------------------------------------------------------------------------
    Sphere
    (
        const f64,
        const Vector3&,
        const Color&,
        const Color&,
        const MATERIAL_TYPE
    );

    //-------------------------------------------------------------------------------
    //! @brief      交差判定します.
    //-------------------------------------------------------------------------------
    bool IsHit(const Ray&, HitRecord& );

    //-------------------------------------------------------------------------------
    //! @brief      マテリアルタイプを取得します.
    //-------------------------------------------------------------------------------
    MATERIAL_TYPE GetMaterialType();

    //-------------------------------------------------------------------------------
    //! @brief      自己発光カラーを取得します.
    //-------------------------------------------------------------------------------
    Color GetEmissive();

    //-------------------------------------------------------------------------------
    //! @brief      マテリアルカラーを取得します.
    //-------------------------------------------------------------------------------
    Color GetColor();
};


/////////////////////////////////////////////////////////////////////////////////////
// Triangle structure
/////////////////////////////////////////////////////////////////////////////////////
struct Triangle : public IShape
{
    Vector3         p0;         //!< 頂点座標0
    Vector3         p1;         //!< 頂点座標1
    Vector3         p2;         //!< 頂点座標2
    Vector3         normal;     //!< 法線ベクトル.
    Color           emissive;   //!< 自己発光カラー.
    Color           color;      //!< カラー.
    MATERIAL_TYPE   material;   //!< マテリアルタイプ.

    //------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //------------------------------------------------------------------------------
    Triangle
    (
        const Vector3&,
        const Vector3&,
        const Vector3&,
        const Color&,
        const Color&,
        const MATERIAL_TYPE
    );

    //------------------------------------------------------------------------------
    //! @brief      交差判定を行います.
    //------------------------------------------------------------------------------
    bool IsHit ( const Ray&, HitRecord& );

    //------------------------------------------------------------------------------
    //! @brief      マテリアルタイプを取得します.
    //------------------------------------------------------------------------------
    MATERIAL_TYPE GetMaterialType();

    //------------------------------------------------------------------------------
    //! @brief      自己発光カラーを取得します.
    //------------------------------------------------------------------------------
    Color GetEmissive();

    //------------------------------------------------------------------------------
    //! @brief      マテリアルカラーを取得します.
    //------------------------------------------------------------------------------
    Color GetColor();
};


////////////////////////////////////////////////////////////////////////////////////
// Quad structure
////////////////////////////////////////////////////////////////////////////////////
struct Quad : public IShape
{
    Vector3         p0;         //!< 頂点座標0
    Vector3         p1;         //!< 頂点座標1
    Vector3         p2;         //!< 頂点座標2
    Vector3         p3;         //!< 頂点座標3
    Vector3         normal;     //!< 法線ベクトル.
    Color           emissive;   //!< 自己発光カラー.
    Color           color;      //!< カラー.
    MATERIAL_TYPE   material;   //!< マテリアルタイプ.

    //------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //------------------------------------------------------------------------------
    Quad
    (
        const Vector3&,
        const Vector3&,
        const Vector3&,
        const Vector3&,
        const Color&,
        const Color&,
        const MATERIAL_TYPE
    );

    //------------------------------------------------------------------------------
    //! @brief      交差判定を行います.
    //------------------------------------------------------------------------------
    bool IsHit ( const Ray&, HitRecord& );

    //------------------------------------------------------------------------------
    //! @brief      マテリアルタイプを取得します.
    //------------------------------------------------------------------------------
    MATERIAL_TYPE GetMaterialType();

    //------------------------------------------------------------------------------
    //! @brief      自己発光カラーを取得します.
    //------------------------------------------------------------------------------
    Color GetEmissive();

    //------------------------------------------------------------------------------
    //! @brief      マテリアルカラーを取得します.
    //------------------------------------------------------------------------------
    Color GetColor();

    //------------------------------------------------------------------------------
    //! @brief      三角形の交差判定を行います.
    //------------------------------------------------------------------------------
    bool IsHitTriangle( const Ray&, const Vector3&, const Vector3&, const Vector3&, HitRecord& );
};

} // namespace s3d

#endif // __S3D_SHAPE_H__

