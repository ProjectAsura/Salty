//----------------------------------------------------------------------------
// File : asdxMath.h
// Desc : Math Module.
// Copyright(c) Project Asura. All right reserved.
//----------------------------------------------------------------------------

#ifndef __ASDX_MATH_H__
#define __ASDX_MATH_H__

//----------------------------------------------------------------------------
// Includes
//----------------------------------------------------------------------------
#include <asdxTypedef.h>
#include <cassert>
#include <cmath>
#include <cfloat>
#include <cstring>


namespace asdx {

//----------------------------------------------------------------------------
// Forward Declarations
//----------------------------------------------------------------------------
class Vector2;
class Vector3;
class Vector4;
class Matrix;
class Quaternion;


//----------------------------------------------------------------------------
// Constant Values
//----------------------------------------------------------------------------
static const f32 F_PI          = 3.1415926535897932384626433832795f;      //!< πです.
static const f32 F_2PI         = 6.283185307179586476925286766559f;       //!< 2πです.
static const f32 F_ONE_OVER_PI = 0.31830988618379067153776752674503f;     //!< 1/πです.
static const f32 F_PI_OVER_2   = 1.5707963267948966192313216916398f;      //!< π/2です.
static const f32 F_PI_OVER_3   = 1.0471975511965977461542144610932f;      //!< π/3です.
static const f32 F_PI_OVER_4   = 0.78539816339744830961566084581988f;     //!< π/4です.
static const f32 F_PI_OVER_6   = 0.52359877559829887307710723054658f;     //!< π/6です.
static const u32 U_PI          = 32768;                                   //!< πです(インデックス角).
static const u32 U_2PI         = 65536;                                   //!< 2πです(インデックス角).


#ifndef ASDX_DEG_TO_RAD
#define ASDX_DEG_TO_RAD( deg )     ( (deg) * ( F_PI / 180.0f ) )                   //!< 度をラジアンに変換します.
#endif//ASDX_DEG_TO_RAD

#ifndef ASDX_DEG_TO_IDX
#define ASDX_DEG_TO_IDX( deg )     static_cast<u16>( (deg) * ( U_PI / 180.0f ) )   //!< 度をインデックス角に変換します.
#endif//ASDX_DEG_TO_IDX

#ifndef ASDX_RAD_TO_DEG
#define ASDX_RAD_TO_DEG( rad )     ( (rad) * ( 180.0f / F_PI ) )                   //!< ラジアンを度に変換します.
#endif//ASDX_RAD_TO_DEG

#ifndef ASDX_RAD_TO_IDX
#define ASDX_RAD_TO_IDX( rad )     static_cast<u16>( (rad) * ( U_PI / F_PI ) )     //!< ラジアンをインデックス角に変換します.
#endif//ASRUA_RAD_TO_IDX

#ifndef ASDX_IDX_TO_DEG
#define ASDX_IDX_TO_DEG( idx )     static_cast<f32>( (idx) * ( 180.0f / U_PI ) )   //!< インデックス角を度に変換します.
#endif//ASDX_IDX_TO_DEG

#ifndef ASDX_IDX_TO_RAD
#define ASDX_IDX_TO_RAD( idx )     static_cast<f32>( (idx) * ( F_PI / U_PI ) )     //!< インデックス角をラジアンに変換します.
#endif//ASDX_IDX_TO_RAD


//////////////////////////////////////////////////////////////////////////////
// Functions
//////////////////////////////////////////////////////////////////////////////

//------------------------------------------------------------------------------
//! @brief      2つの値のうち，大きい方を返却します.
//!
//! @param [in]     a       判定する値.
//! @param [in]     b       判定する値.
//! @return     2つの値のうち，大きい方を返却します.
//------------------------------------------------------------------------------
ASDX_TEMPLATE_INLINE( Type )
Type    Max( Type a, Type b )
{ return ( a > b ) ? a : b; }

//------------------------------------------------------------------------------
//! @brief      2つの値のうち，小さい方の値を返却します.
//!
//! @param [in]     a       判定する値.
//! @param [in]     b       判定する値.
//! @return     2つの値のうち，小さい方の値を返却します.
//------------------------------------------------------------------------------
ASDX_TEMPLATE_INLINE( Type )
Type    Min( Type a, Type b )
{ return ( a < b ) ? a : b; }

//------------------------------------------------------------------------------
//! @brief      値を指定された範囲内に収めます.
//!
//! @param [in]     value   クランプする値.
//! @param [in]     a       最小値.
//! @param [in]     b       最大値.
//! @return     値をaからbの範囲内に収めた結果を返却します.
//------------------------------------------------------------------------------
ASDX_TEMPLATE_INLINE( Type )
Type    Clamp( Type value, Type a, Type b )
{ return ( value > b ) ? b : ( value < a ) ? a : value; }

//------------------------------------------------------------------------------
//! @brief      値を0～1に収めます.
//!
//! @param [in]     value   クランプする値.
//! @return     値を0から1の範囲内に収めた結果を返却します.
//------------------------------------------------------------------------------
ASDX_INLINE
f32     Saturate( f32 value )
{ return ( value > 1.0f ) ? 1.0f : ( value < 0.0f ) ? 0.0f : value; }

//------------------------------------------------------------------------------
//! @brief      値を0～1に収めます.
//!
//! @param [in]     value   クランプする値.
//! @return     値を0から1の範囲内に収めた結果を返却します.
//------------------------------------------------------------------------------
ASDX_INLINE
f64     Saturate( f64 value )
{ return ( value > 1.0 ) ? 1.0 : ( value < 0.0 ) ? 0.0 : value; }

//------------------------------------------------------------------------------
//! @brief      指定された値の符号を返却します.
//!
//! @param [in]     value   符号を取得する値.
//! @return     符号が正である場合には1を，負である場合には-1を返却します.
//------------------------------------------------------------------------------
ASDX_TEMPLATE_INLINE( Type )
Type    Sign( Type value )
{ return ( value < 0 ) ? static_cast< Type >( -1 ) : static_cast< Type >( 1 ); }

//----------------------------------------------------------------------------
//! @brief      度をラジアンに変換します.
//!
//! @param [in]     degree      角度(度)
//! @return     度をラジアンに変換した結果を返却します.
//----------------------------------------------------------------------------
f32     DegToRad( f32 degree );

//-----------------------------------------------------------------------------
//! @brief      ラジアンを度に変換します.
//!
//! @param [in]     radian      角度(ラジアン)
//! @return     ラジアンを度に変換した結果を返却します.
//-----------------------------------------------------------------------------
f32     RadToDeg( f32 radian );

//-----------------------------------------------------------------------------
//! @brief      ラジアンを1円周を65536とする角度に変換します.
//!
//! @param [in]     radian      角度(ラジアン)
//! @return     ラジアンを1円周を65536とする角度に変換した結果を返却します.
//-----------------------------------------------------------------------------
u16     RadToIdx( f32 radian );

//-----------------------------------------------------------------------------
//! @brief      度を1円周を65536とする角度に変換します.
//!
//! @param [in]     degree      角度
//! @return     度を1円周を65536とする角度に変換した結果を返却します.
//-----------------------------------------------------------------------------
u16     DegToIdx( f32 degree );

//-----------------------------------------------------------------------------
//! @brief      値がゼロであるかどうか判定します.
//!
//! @param [in]     value       判定する値.
//! @return     値がゼロであるとみなせる場合にtrueを返却します.
//-----------------------------------------------------------------------------
bool    IsZero  ( f32 value );

//-----------------------------------------------------------------------------
//! @brief      値がゼロであるかどうか判定します.
//!
//! @param [in]     value       判定する値.
//! @return     値がゼロであるとみなせる場合にtrueを返却します.
//-----------------------------------------------------------------------------
bool    IsZero  ( f64 value );

//-----------------------------------------------------------------------------
//! @brief      値が等価であるか判定します.
//!
//! @param [in]     a           判定する値.
//! @param [in]     b           判定する値.
//! @return     値が等価であるとみなせる場合にtrueを返却します.
//-----------------------------------------------------------------------------
bool    IsEqual ( f32 a, f32 b );

//-----------------------------------------------------------------------------
//! @brief      値が等価であるか判定します.
//!
//! @param [in]     a           判定する値.
//! @param [in]     b           判定する値.
//! @return     値が等価であるとみなせる場合にtrueを返却します.
//------------------------------------------------------------------------------
bool    IsEqual ( f64 a, f64 b );

//------------------------------------------------------------------------------
//! @brief      非数であるか判定します.
//!
//! @param [in]     value       判定する値.
//! @return     非数であった場合にtrueを返却します.
//------------------------------------------------------------------------------
bool    IsNan   ( f32 value );

//------------------------------------------------------------------------------
//! @brief      無限大であるか判定します.
//!
//! @param [in]     value       判定する値.
//! @return     無限大であった場合にtrueを返却します.
//------------------------------------------------------------------------------
bool    IsInf   ( f32 value );

//------------------------------------------------------------------------------
//! @brief      階乗を計算します.
//!
//! @param [in]     number      階乗を計算する値.
//! @return     (number)!を計算した値を返却します.
//------------------------------------------------------------------------------
u32     Fact    ( u32 number );

//-------------------------------------------------------------------------------
//! @brief      2重階乗を計算します.
//!
//! @param [in]     number      2重階乗を計算する値.
//! @return     (number)!!を計算した値を返却します.
//-------------------------------------------------------------------------------
u32     DblFact ( u32 number );

//-------------------------------------------------------------------------------
//! @brief      順列を計算します.
//!
//! @param [in]     n       総数.
//! @param [in]     r       選択数.
//! @return     n個のものからr個とった順列を返却します.
//-------------------------------------------------------------------------------
u32     Perm( u32 n, u32 r );

//-------------------------------------------------------------------------------
//! @brief      組合せを計算します.
//!
//! @param [in]     n       総数.
//! @param [in]     r       選択数.
//! @return     n個のものからr個とった組合せを返却します.
//-------------------------------------------------------------------------------
u32     Comb( u32 n, u32 r );

//-------------------------------------------------------------------------------
//! @brief      フレネル項を計算します.
//!
//! @param [in]     n1          入射側の屈折率です.
//! @param [in]     n2          出射側の屈折率です.
//! @param [in]     cosTheta    cosθの値です
//! @return     Schilickによる近似式を計算した結果を返却します.
//-------------------------------------------------------------------------------
f32     Fresnel( f32 n1, f32 n2, f32 cosTheta );

//-------------------------------------------------------------------------------
//! @brief      フレネル項を計算します.
//!
//! @param [in]     n1          入射側の屈折率です.
//! @param [in]     n2          出射側の屈折率です.
//! @param [in]     cosTheta    cosθの値です
//! @return     Schilickによる近似式を計算した結果を返却します.
//-------------------------------------------------------------------------------
f64     Fresnel( f64 n1, f64 n2, f64 cosTheta );


//-------------------------------------------------------------------------------
//! @brief      f32型の値をビット列を変更することなくu32型に変更します.
//!
//! @param [in]     value       u32型にする値.
//! @return     valueと等しいビット列表現を持つu32型の値を返却します.
//-------------------------------------------------------------------------------
u32     F32AsU32( f32 value );

//-------------------------------------------------------------------------------
//! @brief      u32型の値をビット列を変更することなくf32型に変更します.
//!
//! @param [in]     value       f32型にする値.
//! @return     valueと等しいビット列表現を持つf32型の値を返却します.
//-------------------------------------------------------------------------------
f32     U32AsF32( u32 value );

//-------------------------------------------------------------------------------
//! @brief      f32型からu16型に変換します.
//!
//! @param [in]     value       u16型に変換する値.
//! @return     valueと同じ値を持ったu16型の値を返却します.
//-------------------------------------------------------------------------------
u16     F32ToU16( f32 value );

//-------------------------------------------------------------------------------
//! @brief      u16型からf32型に変換します.
//!
//! @param [in]     value       f32型に変換する値.
//! @return     valueと同じ値を持ったf32型の値を返却します.
//-------------------------------------------------------------------------------
f32     U16ToF32( u16 value );

//-------------------------------------------------------------------------------
//! @brief      f32型からs16型に変換します.
//!
//! @param [in]     value       s16型に変換する値.
//! @return     valueと同じ値を持ったs16型の値を返却します.
//-------------------------------------------------------------------------------
s16     F32ToS16( f32 value );

//-------------------------------------------------------------------------------
//! @brief      s16型からf32型に変換します.
//!
//! @param [in]     value       f32型に変換する値.
//! @return     valueと同じ値を持ったf32型の値を返却します.
//-------------------------------------------------------------------------------
f32     S16ToF32( s16 value );

//------------------------------------------------------------------------------
//! @brief      f32型からf16型に変換します.
//!
//! @param [in]     value       f16型に変換する値.
//! @return     半精度浮動小数表現に変換した結果を返却します.
//------------------------------------------------------------------------------
f16     F32ToF16( f32 value );

//------------------------------------------------------------------------------
//! @brief      f16型からf32型に変換します.
//!
//! @param [in]     value       f32型に変換する値.
//! @return     単精度浮動小数表現に変換した結果を返却します.
//------------------------------------------------------------------------------
f32     F16ToF32( f16 value );

//------------------------------------------------------------------------------
//! @brief      正弦の値を求めます.
//!
//! @param [in]     x           角度(ラジアン).
//! @return     正弦の値を返却します.
//------------------------------------------------------------------------------
f32     SinRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      正弦の値を求めます.
//!
//! @param [in]     x           角度(度).
//! @return     正弦の値を返却します.
//------------------------------------------------------------------------------
f32     SinDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      正弦の値を求めます.
//!
//! @param [in]     x           角度(インデックス角).
//! @return     正弦の値を返却します.
//------------------------------------------------------------------------------
f32     SinIdx( const u16 x );

//------------------------------------------------------------------------------
//! @brief      余弦の値を求めます.
//!
//! @param [in]     x           角度(ラジアン).
//! @return     余弦の値を返却します.
//------------------------------------------------------------------------------
f32     CosRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      余弦の値を求めます.
//!
//! @param [in]     x           角度(度).
//! @return     余弦の値を返却します.
//------------------------------------------------------------------------------
f32     CosDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      余弦の値を求めます.
//!
//! @param [in]     x           角度(インデックス角).
//! @return     余弦の値を返却します.
//------------------------------------------------------------------------------
f32     CosIdx( const u16 x );

//------------------------------------------------------------------------------
//! @brief      正接の値を求めます.
//!
//! @param [in]     x           角度(ラジアン).
//! @return     正接の値を返却します.
//------------------------------------------------------------------------------
f32     TanRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      正接の値を求めます.
//!
//! @param [in]     x           角度(度).
//! @return     正接の値を返却します.
//------------------------------------------------------------------------------
f32     TanDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      正接の値を求めます.
//!
//! @param [in]     x           角度(インデックス角).
//! @return     正接の値を返却します.
//------------------------------------------------------------------------------
f32     TanIdx( const u16 x );

//------------------------------------------------------------------------------
//! @brief      正弦と余弦の値を求めます.
//!
//! @param [out]     pSin       正弦の値の格納先.
//! @param [out]     pCos       余弦の値の格納先.
//! @param [in]      rad        角度(ラジアン).
//------------------------------------------------------------------------------
void    SinCosRad( f32* pSin, f32* pCos, const f32 rad );

//------------------------------------------------------------------------------
//! @brief      正弦と余弦の値を求めます.
//!
//! @param [out]    pSin        正弦の値の格納先.
//! @param [out]    pCos        余弦の値の格納先.
//! @param [in]     deg         角度(度).
//------------------------------------------------------------------------------
void    SinCosDeg( f32* pSin, f32* pCos, const f32 deg );

//------------------------------------------------------------------------------
//! @brief      正弦と余弦の値を求めます.
//!
//! @param [out]    pSin        正弦の値の格納先.
//! @param [out]    pCos        余弦の値の格納先.
//! @param [in]     idx         角度(インデックス角).
//------------------------------------------------------------------------------
void    SinCosIdx( f32* pSin, f32* pCos, const u16 idx );

//------------------------------------------------------------------------------
//! @brief      余割の値を求めます.
//!
//! @param [in]     x           角度(ラジアン).
//! @return     余割の値を返却します.
//------------------------------------------------------------------------------
f32     CscRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      余割の値を求めます.
//!
//! @param [in]     x           角度(度).
//! @return     余割の値を返却します.
//------------------------------------------------------------------------------
f32     CscDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      余割の値を求めます.
//!
//! @param [in]     x           角度(インデックス角).
//! @return     余割の値を返却します.
//------------------------------------------------------------------------------
f32     CscIdx( const u16 x );

//------------------------------------------------------------------------------
//! @brief      正割の値を求めます.
//!
//! @param [in]     x           角度(ラジアン).
//! @return     正割の値を返却します.
//------------------------------------------------------------------------------
f32     SecRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      正割の値を求めます.
//!
//! @param [in]     x           角度(度).
//! @return     正割の値を返却します.
//------------------------------------------------------------------------------
f32     SecDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      正割の値を求めます.
//!
//! @param [in]     x           角度(インデックス角).
//! @return     正割の値を返却します.
//------------------------------------------------------------------------------
f32     SecIdx( const u16 x );

//------------------------------------------------------------------------------
//! @brief      余接の値を求めます.
//!
//! @param [in]     x           角度(ラジアン).
//! @return     余接の値を返却します.
//------------------------------------------------------------------------------
f32     CotRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      余接の値を求めます.
//!
//! @param [in]     x           角度(度).
//! @return     余接の値を返却します.
//------------------------------------------------------------------------------
f32     CotDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      余接の値を求めます.
//!
//! @param [in]     x           角度(インデックス角).
//! @return     余接の値を返却します.
//------------------------------------------------------------------------------
f32     CotIdx( const u16 x );

//------------------------------------------------------------------------------
//! @brief      双曲線正弦の値を求めます.
//!
//! @param [in]     x           角度(ラジアン).
//! @return     双曲線正弦の値を返却します.
//------------------------------------------------------------------------------
f32     SinhRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      双曲線正弦の値を求めます.
//!
//! @param [in]     x           角度(度).
//! @return     双曲線正弦の値を返却します.
//------------------------------------------------------------------------------
f32     SinhDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      双曲線正弦の値を求めます.
//!
//! @param [in]     x           角度(インデックス角).
//! @return     双曲線正弦の値を返却します.
//------------------------------------------------------------------------------
f32     SinhIdx( const u16 x );

//------------------------------------------------------------------------------
//! @brief      双曲線余弦の値を求めます.
//!
//! @param [in]     x           角度(ラジアン).
//! @return     双曲線余弦の値を返却します.
//------------------------------------------------------------------------------
f32     CoshRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      双曲線余弦の値を求めます.
//!
//! @param [in]     x           角度(度).
//! @return     双曲線余弦の値を返却します.
//------------------------------------------------------------------------------
f32     CoshDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      双曲線余弦の値を求めます.
//!
//! @param [in]     x           角度(インデックス角).
//! @return     双曲線余弦の値を返却します.
//------------------------------------------------------------------------------
f32     CoshIdx( const u16 x );

//------------------------------------------------------------------------------
//! @brief      双曲線正接の値を求めます.
//!
//! @param [in]     x           角度(ラジアン).
//! @return     双曲線正接の値を返却します.
//------------------------------------------------------------------------------
f32     TanhRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      双曲線正接の値を求めます.
//!
//! @param [in]     x           角度(度).
//! @return     双曲線正接の値を返却します.
//------------------------------------------------------------------------------
f32     TanhDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      双曲線正接の値を求めます.
//!
//! @param [in]     x           角度(インデックス角).
//! @return     双曲線正接の値を返却します.
//------------------------------------------------------------------------------
f32     TanhIdx( const u16 x );

//------------------------------------------------------------------------------
//! @brief      双曲線余割の値を求めます.
//!
//! @param [in]     x           角度(ラジアン).
//! @return     双曲線余割の値を返却します.
//------------------------------------------------------------------------------
f32     CschRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      双曲線余割の値を求めます.
//!
//! @param [in]     x           角度(度).
//! @return     双曲線余割の値を返却します.
//------------------------------------------------------------------------------
f32     CschDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      双曲線余割の値を求めます.
//!
//! @param [in]     x           角度(インデックス角).
//! @return     双曲線余割の値を返却します.
//------------------------------------------------------------------------------
f32     CschIdx( const u16 x );

//------------------------------------------------------------------------------
//! @brief      双曲線正割の値を求めます.
//!
//! @param [in]     x           角度(ラジアン).
//! @return     双曲線正割の値を返却します.
//------------------------------------------------------------------------------
f32     SechRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      双曲線正割の値を求めます.
//!
//! @param [in]     x           角度(度).
//! @return     双曲線正割の値を返却します.
//------------------------------------------------------------------------------
f32     SechDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      双曲線正割の値を求めます.
//!
//! @param [in]     x           角度(インデックス角).
//! @return     双曲線正割の値を返却します.
//------------------------------------------------------------------------------
f32     SechIdx( const u16 x );

//------------------------------------------------------------------------------
//! @brief      双曲線余接の値を求めます.
//!
//! @param [in]     x           角度(ラジアン).
//! @return     双曲線余接の値を返却します.
//------------------------------------------------------------------------------
f32     CothRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      双曲線余接の値を求めます.
//!
//! @param [in]     x           角度(度).
//! @return     双曲線余接の値を返却します.
//------------------------------------------------------------------------------
f32     CothDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      双曲線余接の値を求めます.
//!
//! @param [in]     x           角度(インデックス角).
//! @return     双曲線余接の値を返却します.
//------------------------------------------------------------------------------
f32     CothIdx( const u16 x );

//------------------------------------------------------------------------------
//! @brief      逆正弦の値を求めます.
//!
//! @param [in]     x           逆正弦を求める値.
//! @return     逆正弦の値をラジアンで返却します.
//------------------------------------------------------------------------------
f32     ASinRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆正弦の値を求めます.
//!
//! @param [in]     x           逆正弦を求める値.
//! @return     逆正弦の値を度で返却します.
//------------------------------------------------------------------------------
f32     ASinDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆正弦の値を求めます.
//!
//! @param [in]     x           逆正弦を求める値.
//! @return     逆正弦の値をインデックス角で返却します.
//------------------------------------------------------------------------------
u16     ASinIdx( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆余弦の値を求めます.
//!
//! @param [in]     x           逆余弦を求める値.
//! @return     逆余弦の値をラジアンで返却します.
//------------------------------------------------------------------------------
f32     ACosRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆余弦の値を求めます.
//!
//! @param [in]     x           逆余弦を求める値.
//! @return     逆余弦の値を度で返却します.
//------------------------------------------------------------------------------
f32     ACosDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆余弦の値を求めます.
//!
//! @param [in]     x           逆余弦を求める値.
//! @return     逆余弦の値をインデックス角で返却します.
//------------------------------------------------------------------------------
u16     ACosIdx( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆正接の値を求めます.
//!
//! @param [in]     x           逆正接を求める値.
//! @return     逆正接の値をラジアンで返却します.
//------------------------------------------------------------------------------
f32     ATanRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆正接の値を求めます.
//!
//! @param [in]     x           逆正接を求める値.
//! @return     逆正接の値を度で返却します.
//------------------------------------------------------------------------------
f32     ATanDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆正接の値を求めます.
//!
//! @param [in]     x           逆正接を求める値.
//! @return     逆正接の値をインデックス角で返却します.
//------------------------------------------------------------------------------
u16     ATanIdx( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆正接の値を求めます.
//!
//! @param [in]     y           正接の値の分子.
//! @param [in]     x           正接の値の分母.
//! @return     y/xの逆正接の値をラジアンで返却します.
//------------------------------------------------------------------------------
f32     ATan2Rad( const f32 y, const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆正接の値を求めます.
//!
//! @param [in]     y           正接の値の分子.
//! @param [in]     x           正接の値の分母.
//! @return     y/xの逆正接の値を度で返却します.
//------------------------------------------------------------------------------
f32     ATan2Deg( const f32 y, const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆正接の値を求めます.
//!
//! @param [in]     y           正接の値の分子.
//! @param [in]     x           正接の値の分母.
//! @return     y/xの逆正接の値をインデックス角で返却します.
//------------------------------------------------------------------------------
u16     ATan2Idx( const f32 y, const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆余割の値を求めます.
//!
//! @param [in]     x           逆余割を求める値.
//! @return     逆余割の値をラジアンで返却します.
//------------------------------------------------------------------------------
f32     ACscRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆余割の値を求めます.
//!
//! @param [in]     x           逆余割を求める値.
//! @return     逆余割の値を度で返却します.
//------------------------------------------------------------------------------
f32     ACscDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆余割の値を求めます.
//!
//! @param [in]     x           逆余割を求める値.
//! @return     逆余割の値をインデックス角で返却します.
//------------------------------------------------------------------------------
u16     ACscIdx( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆正割の値を求めます.
//!
//! @param [in]     x           逆正割を求める値.
//! @return     逆正割の値をラジアンで返却します.
//------------------------------------------------------------------------------
f32     ASecRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆正割の値を求めます.
//!
//! @param [in]     x           逆正割を求める値.
//! @return     逆正割の値を度で返却します.
//------------------------------------------------------------------------------
f32     ASecDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆正割の値を求めます.
//!
//! @param [in]     x           逆正割を求める値.
//! @return     逆正割の値をインデックス角で返却します.
//------------------------------------------------------------------------------
u16     ASecIdx( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆余接の値を求めます.
//!
//! @param [in]     x           逆余接を求める値.
//! @return     逆余接の値をラジアンで返却します.
//------------------------------------------------------------------------------
f32     ACotRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆余接の値を求めます.
//!
//! @param [in]     x           逆余接を求める値.
//! @return     逆余接の値を度で返却します.
//------------------------------------------------------------------------------
f32     ACotDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆余接の値を求めます.
//!
//! @param [in]     x           逆余接を求める値.
//! @return     逆余接の値をインデックス角で返却します.
//------------------------------------------------------------------------------
u16     ACotIdx( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆双曲線正弦の値を求めます.
//!
//! @param [in]     x           逆双曲線正弦を求める値.
//! @return     逆双曲線正弦の値をラジアンで返却します.
//------------------------------------------------------------------------------
f32     ASinhRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆双曲線正弦の値を求めます.
//!
//! @param [in]     x           逆双曲線正弦を求める値.
//! @return     逆双曲線正弦の値を度で返却します.
//------------------------------------------------------------------------------
f32     ASinhDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆双曲線正弦の値を求めます.
//!
//! @param [in]     x           逆双曲線正弦を求める値.
//! @return     逆双曲線正弦の値をインデックス角で返却します.
//------------------------------------------------------------------------------
u16     ASinhIdx( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆双曲線余弦の値を求めます.
//!
//! @param [in]     x           逆双曲線余弦を求める値.
//! @return     逆双曲線余弦の値をラジアンで返却します.
//------------------------------------------------------------------------------
f32     ACoshRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆双曲線余弦の値を求めます.
//!
//! @param [in]     x           逆双曲線余弦を求める値.
//! @return     逆双曲線余弦の値を度で返却します.
//------------------------------------------------------------------------------
f32     ACoshDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆双曲線余弦の値を求めます.
//!
//! @param [in]     x           逆双曲線余弦を求める値.
//! @return     逆双曲線余弦の値をインデックス角で返却します.
//------------------------------------------------------------------------------
u16     ACoshIdx( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆双曲線正接の値を求めます.
//!
//! @param [in]     x           逆双曲線正接を求める値.
//! @return     逆双曲線生成の値をラジアンで返却します.
//------------------------------------------------------------------------------
f32     ATanhRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆双曲線正接の値を求めます.
//!
//! @param [in]     x           逆双曲線正接を求める値.
//! @return     逆双曲線正接の値を度で返却します.
//------------------------------------------------------------------------------
f32     ATanhDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆双曲線正接の値を求めます.
//!
//! @param [in]     x           逆双曲線正接を求める値.
//! @return     逆双曲線正接の値をインデックス角で返却します.
//------------------------------------------------------------------------------
u16     ATanhIdx( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆双曲線余割の値を求めます.
//!
//! @param [in]     x           逆双曲線余割を求める値.
//! @return     逆双曲線余割の値をラジアンで返却します.
//------------------------------------------------------------------------------
f32     ACschRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆双曲線余割の値を求めます.
//!
//! @param [in]     x           逆双曲線余割を求める値.
//! @return     逆双曲線余割の値を度で返却します.
//------------------------------------------------------------------------------
f32     ACschDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆双曲線余割の値を求めます.
//!
//! @param [in]     x           逆双曲線余割を求める値.
//! @return     逆双曲線余割の値をインデックス角で返却します.
//------------------------------------------------------------------------------
u16     ACschIdx( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆双曲線正割の値を求めます.
//!
//! @param [in]     x           逆双曲線正割を求める値.
//! @return     逆双曲線正割の値をラジアンで返却します.
//------------------------------------------------------------------------------
f32     ASechRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆双曲線正割の値を求めます.
//!
//! @param [in]     x           逆双曲線正割を求める値.
//! @return     逆双曲線正割の値を度で返却します.
//------------------------------------------------------------------------------
f32     ASechDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆双曲線正割の値を求めます.
//!
//! @param [in]     x           逆双曲線正割を求める値.
//! @return     逆双曲線正割の値をインデックス角で返却します.
//------------------------------------------------------------------------------
u16     ASechIdx( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆双曲線余接の値を求めます.
//!
//! @param [in]     x           逆双曲線余接を求める値.
//! @return     逆双曲線余接の値をラジアンで返却します.
//------------------------------------------------------------------------------
f32     ACothRad( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆双曲線余接の値を求めます.
//!
//! @param [in]     x           逆双曲線余接を求める値.
//! @return     逆双曲線余接の値を度で返却します.
//------------------------------------------------------------------------------
f32     ACothDeg( const f32 x );

//------------------------------------------------------------------------------
//! @brief      逆双曲線余接の値を求めます.
//!
//! @param [in]     x           逆双曲線余接を求める値.
//! @return     逆双曲線世説の値をインデックス角で返却します.
//------------------------------------------------------------------------------
u16     ACothIdx( const f32 x );


/////////////////////////////////////////////////////////////////////////////////
// _Vector2 structure
/////////////////////////////////////////////////////////////////////////////////
struct _Vector2
{
    f32 x;  //!< X成分.
    f32 y;  //!< Y成分.
};


/////////////////////////////////////////////////////////////////////////////////
// _Vector3 structure
/////////////////////////////////////////////////////////////////////////////////
struct _Vector3
{
    f32 x;  //!< X成分.
    f32 y;  //!< Y成分.
    f32 z;  //!< Z成分.
};


/////////////////////////////////////////////////////////////////////////////////
// _Vector4 structure
/////////////////////////////////////////////////////////////////////////////////
struct _Vector4
{
    f32 x;  //!< X成分.
    f32 y;  //!< Y成分.
    f32 z;  //!< Z成分.
    f32 w;  //!< W成分.
};


/////////////////////////////////////////////////////////////////////////////////
// _Matrix structure
/////////////////////////////////////////////////////////////////////////////////
struct _Matrix
{
    union 
    {
        struct
        {
            f32 _11;        //!< 1行1列目の要素です.
            f32 _12;        //!< 1行2列目の要素です.
            f32 _13;        //!< 1行3列目の要素です.
            f32 _14;        //!< 1行4列目の要素です.

            f32 _21;        //!< 2行1列目の要素です.
            f32 _22;        //!< 2行2列目の要素です.
            f32 _23;        //!< 2行3列目の要素です.
            f32 _24;        //!< 2行4列目の要素です.

            f32 _31;        //!< 3行1列目の要素です.
            f32 _32;        //!< 3行2列目の要素です.
            f32 _33;        //!< 3行3列目の要素です.
            f32 _34;        //!< 3行4列目の要素です.

            f32 _41;        //!< 4行1列目の要素です.
            f32 _42;        //!< 4行2列目の要素です.
            f32 _43;        //!< 4行3列目の要素です.
            f32 _44;        //!< 4行4列目の要素です.
        };
        _Vector4    v[ 4 ];         //!< 4次元ベクトルで表した行列の要素.
        f32         m[ 4 ][ 4 ];    //!< 2次元配列で表した行列の要素.
        f32         a[ 16 ];        //!< 1次元配列で表した行列の要素.
    };
};


////////////////////////////////////////////////////////////////////////////////
// Vector2 class
////////////////////////////////////////////////////////////////////////////////
class Vector2 : public _Vector2
{
    //==========================================================================
    // list of friend classes and methods.
    //==========================================================================

    //--------------------------------------------------------------------------
    //! @brief      乗算演算子です.
    //!
    //! @param [in]     scalar      乗算するスカラー値.
    //! @param [in]     value       乗算されるベクトル.
    //! @return     乗算結果を返却します.
    //--------------------------------------------------------------------------
    friend Vector2 operator * ( const f32 sclar, const Vector2& value );

private:
    //==========================================================================
    // private variables
    //==========================================================================
    /* NOTHING */

    //==========================================================================
    // private methods
    //==========================================================================
    /* NOTHING */

protected:
    //==========================================================================
    // protected variables
    //==========================================================================
    /* DO_NOTHING */

    //==========================================================================
    // protected methods
    //==========================================================================
    /* NOTHING */

public:
    //==========================================================================
    // public variables
    //==========================================================================
    /* NOTHING */

    //==========================================================================
    // public methods
    //==========================================================================

    //--------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //--------------------------------------------------------------------------
    Vector2     ();

    //--------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //!
    //! @param [in]     pValeus     要素数2の配列.
    //--------------------------------------------------------------------------
    Vector2     ( const f32* pValue );

    //--------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //!
    //! @param [in]     nx           X成分.
    //! @param [in]     ny           Y成分.
    //--------------------------------------------------------------------------
    Vector2     ( const f32 nx, const f32 ny );

    //--------------------------------------------------------------------------
    //! @brief      コピーコンストラクタです.
    //!
    //! @param [in]     value       コピー元の値.
    //--------------------------------------------------------------------------
    Vector2     ( const Vector2& value );

    //--------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //--------------------------------------------------------------------------
    virtual ~Vector2();

    //--------------------------------------------------------------------------
    //! @brief      f32*型への演算子です.
    //!
    //! @return     最初の要素へのポインタを返却します.
    //--------------------------------------------------------------------------
    operator        f32* ();

    //--------------------------------------------------------------------------
    //! @brief      const f32*型への演算子です.
    //!
    //! @return     最初の要素へのポインタを返却します.
    //--------------------------------------------------------------------------
    operator const  f32* () const;

    //--------------------------------------------------------------------------
    //! @brief      加算代入演算子です.
    //!
    //! @param [in]     value       加算する値.
    //! @return     加算結果を返却します.
    //--------------------------------------------------------------------------
    Vector2&    operator +=     ( const Vector2& value );

    //--------------------------------------------------------------------------
    //! @brief      減算代入演算子です.
    //!
    //! @param [in]     value       減算する値.
    //! @return     減算結果を返却します.
    //--------------------------------------------------------------------------
    Vector2&    operator -=     ( const Vector2& value );

    //--------------------------------------------------------------------------
    //! @brief      乗算代入演算子です.
    //!
    //! @param [in]     scalar      乗算するスカラー値.
    //! @return     乗算結果を返却します.
    //--------------------------------------------------------------------------
    Vector2&    operator *=     ( const f32 sclar );

    Vector2&    operator *=     ( const Vector2& value );

    //--------------------------------------------------------------------------
    //! @brief      除算代入演算子です.
    //!
    //! @param [in]     scalar      除算するスカラー値.
    //! @return     除算結果を返却します.
    //--------------------------------------------------------------------------
    Vector2&    operator /=     ( const f32 sclar );

    //--------------------------------------------------------------------------
    //! @brief      正符号演算子です.
    //!
    //! @return     自分自身の値を返却します.
    //--------------------------------------------------------------------------
    Vector2     operator +      () const;

    //--------------------------------------------------------------------------
    //! @brief      負符号演算子です.
    //!
    //! @return     負符号を付けた値を返却します.
    //--------------------------------------------------------------------------
    Vector2     operator -      () const;

    //--------------------------------------------------------------------------
    //! @brief      加算演算子です.
    //!
    //! @param [in]     value       加算する値.
    //! @return     加算結果を返却します.
    //--------------------------------------------------------------------------
    Vector2     operator +      ( const Vector2& value )  const;

    //--------------------------------------------------------------------------
    //! @brief      減算演算子です.
    //!
    //! @param [in]     value       減算する値.
    //! @return     減算結果を返却します.
    //--------------------------------------------------------------------------
    Vector2     operator -      ( const Vector2& value )  const;

    //--------------------------------------------------------------------------
    //! @brief      乗算演算子です.
    //!
    //! @param [in]     scalar      乗算するスカラー値.
    //! @return     乗算結果を返却します.
    //--------------------------------------------------------------------------
    Vector2     operator *      ( const f32 scalar )       const;

    Vector2     operator *      ( const Vector2& value )   const;

    //--------------------------------------------------------------------------
    //! @brief      除算演算子です.
    //!
    //! @param [in]     scalar      除算するスカラー値.
    //! @return     除算結果を返却します.
    //--------------------------------------------------------------------------
    Vector2     operator /      ( const f32 scalar )       const;

    //--------------------------------------------------------------------------
    //! @brief      等価比較演算子です.
    //!
    //! @param [in]     value       比較する値.
    //! @return     値が等価であればtrue, そうでなければfalseを返却します.
    //--------------------------------------------------------------------------
    bool        operator ==     ( const Vector2& value )  const;

    //--------------------------------------------------------------------------
    //! @brief      非等価比較演算子です.
    //!
    //! @param [in]     value       比較する値.
    //! @return     値が非等価であればtrue, そうでなければfalseを返却します.
    //--------------------------------------------------------------------------
    bool        operator !=     ( const Vector2& value )  const;

    //--------------------------------------------------------------------------
    //! @brief      代入演算子です.
    //!
    //! @param [in]     value       代入する値.
    //! @return     代入結果を返却します.
    //--------------------------------------------------------------------------
    Vector2&    operator =      ( const Vector2& value );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの長さを求めます.
    //!
    //! @return     ベクトルの長さを返却します.
    //--------------------------------------------------------------------------
    f32         Length          () const;

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの長さの2乗値を求めます.
    //!
    //! @return     ベクトルの長さの2乗値を返却します.
    //--------------------------------------------------------------------------
    f32         LengthSq        () const;

    //--------------------------------------------------------------------------
    //! @brief      単位ベクトルを求めます.
    //!
    //! @return     単位ベクトルを返却します.
    //--------------------------------------------------------------------------
    Vector2     UnitVector      () const;

    //--------------------------------------------------------------------------
    //! @brief      ベクトルを正規化します.
    //!
    //! @return     正規化したベクトルを返却します.
    //--------------------------------------------------------------------------
    Vector2&    Normalize       ();

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの正規化を試みます.
    //!
    //! @param [in]     value       長さが0の場合に設定する値.
    //! @return     ベクトルの長さが0の場合はvalueを，そうでないときは正規化したベクトルを返却します.
    //--------------------------------------------------------------------------
    Vector2&    SafeNormalize   ( const Vector2& value );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの内積を求めます.
    //!
    //! @param [in]     value       入力ベクトル.
    //! @return     ベクトルの内積を返却します.
    //--------------------------------------------------------------------------
    f32         Dot             ( const Vector2& value ) const;

    //--------------------------------------------------------------------------
    //! @brief      各成分の値を設定します.
    //!
    //! @param [in]     nx          設定するX成分の値.
    //! @param [in]     ny          設定するY成分の値.
    //--------------------------------------------------------------------------
    void        Set             ( const f32 nx, const f32 ny );

    //--------------------------------------------------------------------------
    //! @brief      各成分の絶対値を求めます.
    //!
    //! @param [in]     value       絶対値を求める値.
    //! @return     各成分の絶対値を求め，その結果を返却します.
    //--------------------------------------------------------------------------
    static Vector2  Abs( const Vector2& value );

    //--------------------------------------------------------------------------
    //! @brief      各成分の絶対値を求めます.
    //!
    //! @param [in]     value       絶対値を求めます.
    //! @param [out]    result      計算結果の格納先.
    //--------------------------------------------------------------------------
    static void     Abs( const Vector2& value, Vector2& result );

    //--------------------------------------------------------------------------
    //! @brief      各成分の最小値を求めます.
    //!
    //! @param [in]     a           比較する値.
    //! @param [in]     b           比較する値.
    //! @return     各成分の最小値を求め，その結果を返却します.
    //--------------------------------------------------------------------------
    static Vector2  Min( const Vector2& a, const Vector2& b );

    //--------------------------------------------------------------------------
    //! @brief      各成分の最小値を求めます.
    //!
    //! @param [in]     a           比較する値.
    //! @param [in]     b           比較する値.
    //! @param [out]    result      各成分の最小値を求めた結果.
    //--------------------------------------------------------------------------
    static void     Min( const Vector2& a, const Vector2& b, Vector2& result );

    //--------------------------------------------------------------------------
    //! @brief      各成分の最大値を求めます.
    //!
    //! @param [in]     a           比較する値.
    //! @param [in]     b           比較する値.
    //! @return     各成分の最大値を求め，その結果を返却します.
    //--------------------------------------------------------------------------
    static Vector2  Max( const Vector2& a, const Vector2& b );

    //--------------------------------------------------------------------------
    //! @brief      各成分の最大値を求めます.
    //!
    //! @param [in]     a           比較する値.
    //! @param [in]     b           比較する値.
    //! @param [out]    result      各成分の最大値を求めた結果.
    //--------------------------------------------------------------------------
    static void     Max( const Vector2& a, const Vector2& b, Vector2& result );

    //--------------------------------------------------------------------------
    //! @brief      値を指定された範囲内に制限します.
    //!
    //! @param [in]     value       クランプする値.
    //! @param [in]     a           最小値.
    //! @param [in]     b           最大値.
    //! @return     クランプされた値を返却します.
    //--------------------------------------------------------------------------
    static Vector2  Clamp( const Vector2& value, const Vector2& a, const Vector2& b );

    //--------------------------------------------------------------------------
    //! @brief      値を指定された範囲内に制限します.
    //!
    //! @param [in]     value       クランプする値.
    //! @param [in]     a           最小値.
    //! @param [in]     b           最大値.
    //! @param [out]    result      クランプされた値.
    //--------------------------------------------------------------------------
    static void     Clamp( const Vector2& value, const Vector2& a, const Vector2& b, Vector2& result );

    //--------------------------------------------------------------------------
    //! @brief      指定された値を0～1の範囲に制限します.
    //!
    //! @param [in]     value       クランプする値.
    //! @return     クランプされた値.
    //--------------------------------------------------------------------------
    static Vector2  Saturate( const Vector2& value );

    //--------------------------------------------------------------------------
    //! @brief      指定された値を0～1の範囲に制限します.
    //!
    //! @param [in]     value       クランプする値.
    //! @param [out]    result      クランプされた値.
    //--------------------------------------------------------------------------
    static void     Saturate( const Vector2& value, Vector2& result );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトル間の距離を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @return     2つのベクトル間の距離を返却します.
    //--------------------------------------------------------------------------
    static f32      Distance( const Vector2& a, const Vector2& b );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトル間の距離を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [out]    result      2つのベクトル間の距離.
    //--------------------------------------------------------------------------
    static void     Distance( const Vector2& a, const Vector2& b, f32& result );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトル間の距離の2乗値を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @return     2つのベクトル間の距離の2乗値を返却します.
    //--------------------------------------------------------------------------
    static f32      DistanceSq( const Vector2& a, const Vector2& b );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトル間の距離の2乗値を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [out]    result      2つのベクトル間の距離の2乗値.
    //--------------------------------------------------------------------------
    static void     DistanceSq( const Vector2& a, const Vector2& b, f32& result );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの内積を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @return     ベクトルの内積を返却します.
    //--------------------------------------------------------------------------
    static f32      Dot( const Vector2& a, const Vector2& b );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの内積を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [out]    result      ベクトルの内積.
    //--------------------------------------------------------------------------
    static void     Dot( const Vector2& a, const Vector2& b, f32& result );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルを正規化します.
    //!
    //! @param [in]     value       正規化するベクトル.
    //! @return     正規化したベクトルを返却します.
    //--------------------------------------------------------------------------
    static Vector2  Normalize( const Vector2& value );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルを正規化します.
    //!
    //! @param [in]     value       正規化するベクトル.
    //! @param [out]    result      正規化したベクトル.
    //--------------------------------------------------------------------------
    static void     Normalize( const Vector2& value, Vector2& result );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの正規化を試みます.
    //!
    //! @param [in]     value       正規化するベクトル.
    //! @param [in]     set         長さが0の場合に設定するベクトル.
    //! @return     ベクトルの長さが0でなければ正規化したベクトルを返却,
    //!             長さが0の場合はsetを返却します.
    //--------------------------------------------------------------------------
    static Vector2  SafeNormalize( const Vector2& value, const Vector2& set );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの正規化を試みます.
    //!
    //! @param [in]     value       正規化するベクトル.
    //! @param [in]     set         長さが0の場合に設定するベクトル.
    //! @param [out]    result      長さが0でなければ正規化したベクトル，0であれば set.
    //--------------------------------------------------------------------------
    static void     SafeNormalize( const Vector2& value, const Vector2& set, Vector2& result );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトルの交差角を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @return     2つのベクトルの交差角をラジアンで返却します.
    //--------------------------------------------------------------------------
    static f32      ComputeCrossingAngleRad( const Vector2& a, const Vector2& b );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトルの交差角を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [out]    result      2つのベクトルの交差角(ラジアン).
    //--------------------------------------------------------------------------
    static void     ComputeCrossingAngleRad( const Vector2& a, const Vector2& b, f32& result );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトルの交差角を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @return     2つのベクトルの交差角を度で返却します.
    //--------------------------------------------------------------------------
    static f32      ComputeCrossingAngleDeg( const Vector2& a, const Vector2& b );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトルの交差角を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [out]    result      2つのベクトルの交差角(度).
    //--------------------------------------------------------------------------
    static void     ComputeCrossingAngleDeg( const Vector2& a, const Vector2& b, f32& result );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトルの交差角を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @return     2つのベクトルの交差角をインデックス角で返却します.
    //--------------------------------------------------------------------------
    static u16      ComputeCrossingAngleIdx( const Vector2& a, const Vector2& b );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトルの交差角を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [out]    result      2つのベクトルの交差角(インデックス角).
    //--------------------------------------------------------------------------
    static void     ComputeCrossingAngleIdx( const Vector2& a, const Vector2& b, u16& result );

    //--------------------------------------------------------------------------
    //! @brief      指定された法線を持つ表面の入射ベクトルから，反射ベクトルを求めます.
    //!
    //! @param [in]     i           入射ベクトル.
    //! @param [in]     n           法線ベクトル.
    //! @return     反射ベクトルを返却します.
    //--------------------------------------------------------------------------
    static Vector2  Reflect( const Vector2& i, const Vector2& n );

    //--------------------------------------------------------------------------
    //! @brief      指定された法線を持つ表面の入射ベクトルから，反射ベクトルを求めます.
    //!
    //! @param [in]     i           入射ベクトル.
    //! @param [in]     n           法線ベクトル.
    //! @param [out]    result      反射ベクトル.
    //--------------------------------------------------------------------------
    static void     Reflect( const Vector2& i, const Vector2& n, Vector2& result );

    //--------------------------------------------------------------------------
    //! @brief      指定された法線を持つ表面の入射ベクトルと屈折角から，屈折ベクトルを求めます.
    //!
    //! @param [in]     i           入射ベクトル.
    //! @param [in]     n           法線ベクトル.
    //! @param [in]     eta         屈折率.
    //! @return     屈折ベクトルを返却します.
    //--------------------------------------------------------------------------
    static Vector2  Refract( const Vector2& i, const Vector2& n, f32 eta );

    //--------------------------------------------------------------------------
    //! @brief      指定された法線を持つ表面の入射ベクトルと屈折角から，屈折ベクトルを求めます.
    //!
    //! @param [in]     i           入射ベクトル.
    //! @param [in]     n           法線ベクトル.
    //! @param [in]     eta         屈折率.
    //! @param [out]    result      屈折ベクトル.
    //--------------------------------------------------------------------------
    static void     Refract( const Vector2& i, const Vector2& n, f32 eta, Vector2& result );

    //--------------------------------------------------------------------------
    //! @brief      重心座標上の点を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [in]     c           入力ベクトル.
    //! @param [in]     amount1     重み.
    //! @param [in]     amount2     重み.
    //! @return     重心座標上の点を返却します.
    //--------------------------------------------------------------------------
    static Vector2  Barycentric( const Vector2& a, const Vector2& b, const Vector2& c, const f32 amount1, const f32 amount2 );

    //--------------------------------------------------------------------------
    //! @brief      重心座標上の点を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [in]     c           入力ベクトル.
    //! @param [in]     amount1     重み.
    //! @param [in]     amount2     重み.
    //! @param [out]    result      重心座標上の点.
    //--------------------------------------------------------------------------
    static void     Barycentric( const Vector2& a, const Vector2& b, const Vector2& c, const f32 amount1, const f32 amount2, Vector2& result );

    //--------------------------------------------------------------------------
    //! @brief      エルミートスプライン補間を行います.
    //!
    //! @param [in]     a           入力位置ベクトル.
    //! @param [in]     t1          入力接ベクトル.
    //! @param [in]     b           入力位置ベクトル.
    //! @param [in]     t2          入力接ベクトル.
    //! @param [in]     amount      重み.
    //! @return     エルミートスプライン補間を行った結果を返却します.
    //--------------------------------------------------------------------------
    static Vector2  Hermite( const Vector2& a, const Vector2& t1, const Vector2& b, const Vector2& t2, const f32 amount );

    //--------------------------------------------------------------------------
    //! @brief      エルミートスプライン補間を行います.
    //!
    //! @param [in]     a           入力位置ベクトル.
    //! @param [in]     t1          入力接ベクトル.
    //! @param [in]     b           入力位置ベクトル.
    //! @param [in]     t2          入力接ベクトル.
    //! @param [in]     amount      重み.
    //! @param [out]    result      エルミートスプライン補間の結果.
    //--------------------------------------------------------------------------
    static void     Hermite( const Vector2& a, const Vector2& t1, const Vector2& b, const Vector2& t2, const f32 amount, Vector2& result );

    //--------------------------------------------------------------------------
    //! @brief      Catmull-Rom補間を行います.
    //!
    //! @param [in]     a           補間の最初の位置.
    //! @param [in]     b           補間の2番目の位置.
    //! @param [in]     c           補間の3番目の位置.
    //! @param [in]     d           補間の4番目の位置.
    //! @param [in]     amount      加重係数.
    //! @return     Catmull-Rom補間の結果を返却します.
    //--------------------------------------------------------------------------
    static Vector2  CatmullRom( const Vector2& a, const Vector2& b, const Vector2& c, const Vector2& d, const f32 amount );

    //--------------------------------------------------------------------------
    //! @brief      Catmull-Rom補間を行います.
    //!
    //! @param [in]     a           補間の最初の位置.
    //! @param [in]     b           補間の2番目の位置.
    //! @param [in]     c           補間の3番目の位置.
    //! @param [in]     d           補間の4番目の位置.
    //! @param [in]     amount      加重係数.
    //! @param [out]    result      Catmull-Rom補間の結果.
    //--------------------------------------------------------------------------
    static void     CatmullRom( const Vector2& a, const Vector2& b, const Vector2& c, const Vector2& d, const f32 amount, Vector2& result );

    //--------------------------------------------------------------------------
    //! @brief      線形補間を行います.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [in]     amount      重み(0～1の値範囲で指定).
    //! @return     線形補間の結果を返却します.
    //--------------------------------------------------------------------------
    static Vector2  Lerp( const Vector2& a, const Vector2& b, const f32 amount );

    //--------------------------------------------------------------------------
    //! @brief      線形補間を行います.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [in]     amount      重み(0～1の値範囲で指定).
    //! @param [out]    result      線形補間の結果.
    //--------------------------------------------------------------------------
    static void     Lerp( const Vector2& a, const Vector2& b, const f32 amount, Vector2& result );

    //--------------------------------------------------------------------------
    //! @brief      3次方程式を用いて，2つの値の間を補間します.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [in]     amount      重み.
    //! @return     補間の結果を返却します.
    //--------------------------------------------------------------------------
    static Vector2  SmoothStep( const Vector2& a, const Vector2& b, const f32 amount );

    //--------------------------------------------------------------------------
    //! @brief      3次方程式を用いて，2つの値の間を補間します.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [in]     amount      重み.
    //! @param [out]    result      補間の結果.
    //--------------------------------------------------------------------------
    static void     SmoothStep( const Vector2& a, const Vector2& b, const f32 amount, Vector2& result );

    //--------------------------------------------------------------------------
    //! @brief      指定された行列を用いて，ベクトルを変換します.
    //!
    //! @param [in]     position    入力ベクトル.
    //! @param [in]     matrix      変換行列.
    //! @return     変換されたベクトルを返却します.
    //--------------------------------------------------------------------------
    static Vector2  Transform( const Vector2& position, const Matrix& matrix );

    //--------------------------------------------------------------------------
    //! @brief      指定された行列を用いて，ベクトルを変換します.
    //!
    //! @param [in]     position    入力ベクトル.
    //! @param [in]     matrix      変換行列.
    //! @param [out]    result      変換されたベクトル.
    //--------------------------------------------------------------------------
    static void     Transform( const Vector2& position, const Matrix& matrix, Vector2& result );

    //--------------------------------------------------------------------------
    //! @brief      指定された行列を用いて，法線ベクトルを変換します.
    //!
    //! @param [in]     normal      入力ベクトル.
    //! @param [in]     matrix      変換行列.
    //! @return     変換された法線ベクトル.
    //--------------------------------------------------------------------------
    static Vector2  TransformNormal( const Vector2& position, const Matrix& matrix );

    //--------------------------------------------------------------------------
    //! @brief      指定された行列を用いて，法線ベクトルを変換します.
    //!
    //! @param [in]     normal      入力ベクトル.
    //! @param [in]     matrix      変換行列.
    //! @param [out]    result      変換された法線ベクトル.
    //--------------------------------------------------------------------------
    static void     TransformNormal( const Vector2& position, const Matrix& matrix, Vector2& result );

    //--------------------------------------------------------------------------
    //! @brief      指定された行列を用いてベクトルを変換し，変換結果をw=1に射影します.
    //!
    //! @param [in]     coord       入力ベクトル.
    //! @param [in]     matrix      変換行列.
    //! @return     行列変換後, w=1に射影されたベクトルを返却します.
    //--------------------------------------------------------------------------
    static Vector2  TransformCoordinate( const Vector2& coord, const Matrix& matrix );

    //--------------------------------------------------------------------------
    //! @brief      指定された行列を用いてベクトルを変換し，変換結果をw=1に射影します.
    //!
    //! @param [in]     coord       入力ベクトル.
    //! @param [in]     matrix      変換行列.
    //! @param [out]    result      行列変換後，w=1に射影されたベクトル.
    //--------------------------------------------------------------------------
    static void     TransformCoordinate( const Vector2& coord, const Matrix& matrix, Vector2& result );
};

////////////////////////////////////////////////////////////////////////////////
// Vector3 class
////////////////////////////////////////////////////////////////////////////////
class Vector3 : public _Vector3
{
    //==========================================================================
    // list of friend classes and methods.
    //==========================================================================

    //--------------------------------------------------------------------------
    //! @brief      乗算演算子です.
    //!
    //! @param [in]     scalar      乗算するスカラー値.
    //! @param [in]     value       乗算されるベクトル.
    //! @return     乗算結果を返却します.
    //--------------------------------------------------------------------------
    friend Vector3 operator * ( const f32 scalar, const Vector3& value );

private:
    //==========================================================================
    // private variables
    //==========================================================================
    /* NOTHING */

    //==========================================================================
    // private methods
    //==========================================================================
    /* NOTHING */

protected:
    //==========================================================================
    // protected variables
    //==========================================================================
    /* NOTHING */

    //==========================================================================
    // protected methods
    //==========================================================================
    /* NOTHING */

public:
    //==========================================================================
    // public variables
    //==========================================================================
    /* DO_NOTHING */

    //==========================================================================
    // public methods
    //==========================================================================

    //--------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //--------------------------------------------------------------------------
    Vector3     ();

    //--------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //!
    //! @param [in]     pValeus     要素数3の配列.
    //--------------------------------------------------------------------------
    Vector3     ( const f32* pValues );

    //--------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //!
    //! @param [in]     nx           X成分.
    //! @param [in]     ny           Y成分.
    //! @param [in]     nz           Z成分.
    //--------------------------------------------------------------------------
    Vector3     ( const f32 nx, const f32 ny, const f32 nz );

    //--------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //!
    //! @param [in]     value       2次元ベクトル.
    //! @param [in]     nz          Z成分.
    //--------------------------------------------------------------------------
    Vector3     ( const Vector2& value, const f32 nz );

    //--------------------------------------------------------------------------
    //! @brief      コピーコンストラクタです.
    //!
    //! @param [in]     value       コピー元の値.
    //--------------------------------------------------------------------------
    Vector3     ( const Vector3& value );

    //--------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //--------------------------------------------------------------------------
    virtual ~Vector3 ();

    //--------------------------------------------------------------------------
    //! @brief      f32*型への演算子です.
    //!
    //! @return     最初の要素へのポインタを返却します.
    //--------------------------------------------------------------------------
    operator        f32* ();

    //--------------------------------------------------------------------------
    //! @brief      const f32*型への演算子です.
    //!
    //! @return     最初の要素へのポインタを返却します.
    //--------------------------------------------------------------------------
    operator const  f32* () const;

    //--------------------------------------------------------------------------
    //! @brief      加算代入演算子です.
    //!
    //! @param [in]     value       加算する値.
    //! @return     加算結果を返却します.
    //--------------------------------------------------------------------------
    Vector3&    operator +=     ( const Vector3& value );

    //--------------------------------------------------------------------------
    //! @brief      減算代入演算子です.
    //!
    //! @param [in]     value       減算する値.
    //! @return     減算結果を返却します.
    //--------------------------------------------------------------------------
    Vector3&    operator -=     ( const Vector3& value );

    //--------------------------------------------------------------------------
    //! @brief      乗算代入演算子です.
    //!
    //! @param [in]     scalar      乗算するスカラー値.
    //! @return     乗算結果を返却します.
    //--------------------------------------------------------------------------
    Vector3&    operator *=     ( const f32 scalar );

    Vector3&    operator *=     ( const Vector3& value );

    //--------------------------------------------------------------------------
    //! @brief      除算代入演算子です.
    //!
    //! @param [in]     scalar      除算するスカラー値.
    //! @return     除算結果を返却します.
    //--------------------------------------------------------------------------
    Vector3&    operator /=     ( const f32 scalar );

    //--------------------------------------------------------------------------
    //! @brief      正符号演算子です.
    //!
    //! @return     自分自身の値を返却します.
    //--------------------------------------------------------------------------
    Vector3     operator +      () const;

    //--------------------------------------------------------------------------
    //! @brief      負符号演算子です.
    //!
    //! @return     負符号を付けた値を返却します.
    //--------------------------------------------------------------------------
    Vector3     operator -      () const;

    //--------------------------------------------------------------------------
    //! @brief      加算演算子です.
    //!
    //! @param [in]     value       加算する値.
    //! @return     加算結果を返却します.
    //--------------------------------------------------------------------------
    Vector3     operator +      ( const Vector3& value )  const;

    //--------------------------------------------------------------------------
    //! @brief      減算演算子です.
    //!
    //! @param [in]     value       減算する値.
    //! @return     減算結果を返却します.
    //--------------------------------------------------------------------------
    Vector3     operator -      ( const Vector3& value )  const;

    //--------------------------------------------------------------------------
    //! @brief      乗算演算子です.
    //!
    //! @param [in]     scalar      乗算するスカラー値.
    //! @return     乗算結果を返却します.
    //--------------------------------------------------------------------------
    Vector3     operator *      ( const f32 scalar )       const;

    Vector3     operator *      ( const Vector3& value )   const;

    //--------------------------------------------------------------------------
    //! @brief      除算演算子です.
    //!
    //! @param [in]     scalar      除算するスカラー値.
    //! @return     除算結果を返却します.
    //--------------------------------------------------------------------------
    Vector3     operator /      ( const f32 scalar )       const;

    //--------------------------------------------------------------------------
    //! @brief      代入演算子です.
    //!
    //! @param [in]     value       代入する値.
    //! @return     代入結果を返却します.
    //--------------------------------------------------------------------------
    Vector3&    operator =      ( const Vector3& value );

    //--------------------------------------------------------------------------
    //! @brief      等価比較演算子です.
    //!
    //! @param [in]     value       比較する値.
    //! @return     値が等価であればtrue, そうでなければfalseを返却します.
    //--------------------------------------------------------------------------
    bool        operator ==     ( const Vector3& value )  const;

    //--------------------------------------------------------------------------
    //! @brief      非等価比較演算子です.
    //!
    //! @param [in]     value       比較する値.
    //! @return     値が非等価であればtrue, そうでなければfalseを返却します.
    //--------------------------------------------------------------------------
    bool        operator !=     ( const Vector3& value )  const;

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの長さを求めます.
    //!
    //! @return     ベクトルの長さを返却します.
    //--------------------------------------------------------------------------
    f32         Length          () const;

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの長さの2乗値を求めます.
    //!
    //! @return     ベクトルの長さの2乗値を返却します.
    //--------------------------------------------------------------------------
    f32         LengthSq        () const;

    //--------------------------------------------------------------------------
    //! @brief      単位ベクトルを求めます.
    //!
    //! @return     単位ベクトルを返却します.
    //--------------------------------------------------------------------------
    Vector3     UnitVector      () const;

    //--------------------------------------------------------------------------
    //! @brief      ベクトルを正規化します.
    //!
    //! @return     正規化したベクトルを返却します.
    //--------------------------------------------------------------------------
    Vector3&    Normalize       ();

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの正規化を試みます.
    //!
    //! @param [in]     value       長さが0の場合に設定する値.
    //! @return     ベクトルの長さが0の場合はvalueを，そうでないときは正規化したベクトルを返却します.
    //--------------------------------------------------------------------------
    Vector3&    SafeNormalize   ( const Vector3& value );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの内積を求めます.
    //!
    //! @param [in]     value       入力ベクトル.
    //! @return     ベクトルの内積を返却します.
    //--------------------------------------------------------------------------
    f32         Dot             ( const Vector3& value ) const;

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの外積を求めます.
    //!
    //! @param [in]     value       入力ベクトル.
    //! @return     ベクトルの外積を返却します.
    //--------------------------------------------------------------------------
    Vector3     Cross           ( const Vector3& value ) const;

    //--------------------------------------------------------------------------
    //! @brief      各成分の値を設定します.
    //!
    //! @param [in]     nx          設定するX成分の値.
    //! @param [in]     ny          設定するY成分の値.
    //! @param [in]     nz          設定するZ成分の値.
    //--------------------------------------------------------------------------
    void        Set             ( const f32 nx, const f32 ny, const f32 nz );

    //--------------------------------------------------------------------------
    //! @brief      各成分の絶対値を求めます.
    //!
    //! @param [in]     value       絶対値を求める値.
    //! @return     各成分の絶対値を求め，その結果を返却します.
    //--------------------------------------------------------------------------
    static Vector3  Abs( const Vector3& value );

    //--------------------------------------------------------------------------
    //! @brief      各成分の絶対値を求めます.
    //!
    //! @param [in]     value       絶対値を求めます.
    //! @param [out]    result      計算結果の格納先.
    //--------------------------------------------------------------------------
    static void     Abs( const Vector3& value, Vector3& result );

    //--------------------------------------------------------------------------
    //! @brief      各成分の最小値を求めます.
    //!
    //! @param [in]     a           比較する値.
    //! @param [in]     b           比較する値.
    //! @return     各成分の最小値を求め，その結果を返却します.
    //--------------------------------------------------------------------------
    static Vector3  Min( const Vector3& a, const Vector3& b );

    //--------------------------------------------------------------------------
    //! @brief      各成分の最小値を求めます.
    //!
    //! @param [in]     a           比較する値.
    //! @param [in]     b           比較する値.
    //! @param [out]    result      各成分の最小値を求めた結果.
    //--------------------------------------------------------------------------
    static void     Min( const Vector3& a, const Vector3& b, Vector3& result );

    //--------------------------------------------------------------------------
    //! @brief      各成分の最大値を求めます.
    //!
    //! @param [in]     a           比較する値.
    //! @param [in]     b           比較する値.
    //! @return     各成分の最大値を求め，その結果を返却します.
    //--------------------------------------------------------------------------
    static Vector3  Max( const Vector3& a, const Vector3& b );

    //--------------------------------------------------------------------------
    //! @brief      各成分の最大値を求めます.
    //!
    //! @param [in]     a           比較する値.
    //! @param [in]     b           比較する値.
    //! @param [out]    result      各成分の最大値を求めた結果.
    //--------------------------------------------------------------------------
    static void     Max( const Vector3& a, const Vector3& b, Vector3& result );

    //--------------------------------------------------------------------------
    //! @brief      値を指定された範囲内に制限します.
    //!
    //! @param [in]     value       クランプする値.
    //! @param [in]     a           最小値.
    //! @param [in]     b           最大値.
    //! @return     クランプされた値を返却します.
    //--------------------------------------------------------------------------
    static Vector3  Clamp( const Vector3& value, const Vector3& a, const Vector3& b );

    //--------------------------------------------------------------------------
    //! @brief      値を指定された範囲内に制限します.
    //!
    //! @param [in]     a           最小値.
    //! @param [in]     b           最大値.
    //! @param [out]    result      クランプされた値.
    //--------------------------------------------------------------------------
    static void     Clamp( const Vector3& value, const Vector3& a, const Vector3& b, Vector3& result );

    //--------------------------------------------------------------------------
    //! @brief      指定された値を0～1の範囲に制限します.
    //!
    //! @param [in]     value       クランプする値.
    //! @return     クランプされた値.
    //--------------------------------------------------------------------------
    static Vector3  Saturate( const Vector3& value );

    //--------------------------------------------------------------------------
    //! @brief      指定された値を0～1の範囲に制限します.
    //!
    //! @param [in]     value       クランプする値.
    //! @param [out]    result      クランプされた値.
    //--------------------------------------------------------------------------
    static void     Saturate( const Vector3& value, Vector3& result );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトル間の距離を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @return     2つのベクトル間の距離を返却します.
    //--------------------------------------------------------------------------
    static f32      Distance( const Vector3& a, const Vector3& b );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトル間の距離を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [out]    result      2つのベクトル間の距離.
    //--------------------------------------------------------------------------
    static void     Distance( const Vector3& a, const Vector3& b, f32& result );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトル間の距離の2乗値を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @return     2つのベクトル間の距離の2乗値を返却します.
    //--------------------------------------------------------------------------
    static f32      DistanceSq( const Vector3& a, const Vector3& b );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトル間の距離の2乗値を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [out]    result      2つのベクトル間の距離の2乗値.
    //--------------------------------------------------------------------------
    static void     DistanceSq( const Vector3& a, const Vector3& b, f32& result );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの内積を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @return     ベクトルの内積を返却します.
    //--------------------------------------------------------------------------
    static f32      Dot( const Vector3& a, const Vector3& b );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの内積を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [out]    result      ベクトルの内積.
    //--------------------------------------------------------------------------
    static void     Dot( const Vector3& a, const Vector3& b, f32& result );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの外積を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @return     ベクトルの外積を返却します.
    //--------------------------------------------------------------------------
    static Vector3  Cross( const Vector3& a, const Vector3& b );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの外積を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [out]    result      ベクトルの外積.
    //--------------------------------------------------------------------------
    static void     Cross( const Vector3& a, const Vector3& b, Vector3& result );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルを正規化します.
    //!
    //! @param [in]     value       正規化するベクトル.
    //! @return     正規化したベクトルを返却します.
    //--------------------------------------------------------------------------
    static Vector3  Normalize( const Vector3& value );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルを正規化します.
    //!
    //! @param [in]     value       正規化するベクトル.
    //! @param [out]    result      正規化したベクトル.
    //--------------------------------------------------------------------------
    static void     Normalize( const Vector3& value, Vector3& result );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの正規化を試みます.
    //!
    //! @param [in]     value       正規化するベクトル.
    //! @param [in]     set         長さが0の場合に設定するベクトル.
    //! @return     ベクトルの長さが0でなければ正規化したベクトルを返却,
    //!             長さが0の場合はsetを返却します.
    //--------------------------------------------------------------------------
    static Vector3  SafeNormalize( const Vector3& value, const Vector3& set );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの正規化を試みます.
    //!
    //! @param [in]     value       正規化するベクトル.
    //! @param [in]     set         長さが0の場合に設定するベクトル.
    //! @param [out]    result      長さが0でなければ正規化したベクトル，0であれば set.
    //--------------------------------------------------------------------------
    static void     SafeNormalize( const Vector3& value, const Vector3& set, Vector3& result );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトルの交差角を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @return     2つのベクトルの交差角をラジアンで返却します.
    //--------------------------------------------------------------------------
    static f32      ComputeCrossingAngleRad( const Vector3& a, const Vector3& b );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトルの交差角を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [out]    result      2つのベクトルの交差角(ラジアン).
    //--------------------------------------------------------------------------
    static void     ComputeCrossingAngleRad( const Vector3& a, const Vector3& b, f32& result );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトルの交差角を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @return     2つのベクトルの交差角を度で返却します.
    //--------------------------------------------------------------------------
    static f32      ComputeCrossingAngleDeg( const Vector3& a, const Vector3& b );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトルの交差角を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [out]    result      2つのベクトルの交差角(度).
    //--------------------------------------------------------------------------
    static void     ComputeCrossingAngleDeg( const Vector3& a, const Vector3& b, f32& result );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトルの交差角を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @return     2つのベクトルの交差角をインデックス角で返却します.
    //--------------------------------------------------------------------------
    static u16      ComputeCrossingAngleIdx( const Vector3& a, const Vector3& b );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトルの交差角を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [out]    result      2つのベクトルの交差角(インデックス角).
    //--------------------------------------------------------------------------
    static void     ComputeCrossingAngleIdx( const Vector3& a, const Vector3& b, u16& result );

    //--------------------------------------------------------------------------
    //! @brief      指定された法線を持つ表面の入射ベクトルから，反射ベクトルを求めます.
    //!
    //! @param [in]     i           入射ベクトル.
    //! @param [in]     n           法線ベクトル.
    //! @return     反射ベクトルを返却します.
    //--------------------------------------------------------------------------
    static Vector3  Reflect( const Vector3& i, const Vector3& n );

    //--------------------------------------------------------------------------
    //! @brief      指定された法線を持つ表面の入射ベクトルから，反射ベクトルを求めます.
    //!
    //! @param [in]     i           入射ベクトル.
    //! @param [in]     n           法線ベクトル.
    //! @param [out]    result      反射ベクトル.
    //--------------------------------------------------------------------------
    static void     Reflect( const Vector3& i, const Vector3& n, Vector3& result );

    //--------------------------------------------------------------------------
    //! @brief      指定された法線を持つ表面の入射ベクトルと屈折角から，屈折ベクトルを求めます.
    //!
    //! @param [in]     i           入射ベクトル.
    //! @param [in]     n           法線ベクトル.
    //! @param [in]     eta         屈折率.
    //! @return     屈折ベクトルを返却します.
    //--------------------------------------------------------------------------
    static Vector3  Refract( const Vector3& i, const Vector3& n, f32 eta );

    //--------------------------------------------------------------------------
    //! @brief      指定された法線を持つ表面の入射ベクトルと屈折角から，屈折ベクトルを求めます.
    //!
    //! @param [in]     i           入射ベクトル.
    //! @param [in]     n           法線ベクトル.
    //! @param [in]     eta         屈折率.
    //! @param [out]    result      屈折ベクトル.
    //--------------------------------------------------------------------------
    static void     Refract( const Vector3& i, const Vector3& n, f32 eta, Vector3& result );

    //--------------------------------------------------------------------------
    //! @brief      重心座標上の点を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [in]     c           入力ベクトル.
    //! @param [in]     amount1     重み.
    //! @param [in]     amount2     重み.
    //! @return     重心座標上の点を返却します.
    //--------------------------------------------------------------------------
    static Vector3  Barycentric( const Vector3& a, const Vector3& b, const Vector3& c, const f32 amount1, const f32 amount2 );

    //--------------------------------------------------------------------------
    //! @brief      重心座標上の点を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [in]     c           入力ベクトル.
    //! @param [in]     amount1     重み.
    //! @param [in]     amount2     重み.
    //! @param [out]    result      重心座標上の点.
    //--------------------------------------------------------------------------
    static void     Barycentric( const Vector3& a, const Vector3& b, const Vector3& c, const f32 amount1, const f32 amount2, Vector3& result );

    //--------------------------------------------------------------------------
    //! @brief      エルミートスプライン補間を行います.
    //!
    //! @param [in]     a           入力位置ベクトル.
    //! @param [in]     t1          入力接ベクトル.
    //! @param [in]     b           入力位置ベクトル.
    //! @param [in]     t2          入力接ベクトル.
    //! @param [in]     amount      重み.
    //! @return     エルミートスプライン補間を行った結果を返却します.
    //--------------------------------------------------------------------------
    static Vector3  Hermite( const Vector3& a, const Vector3& t1, const Vector3& b, const Vector3& t2, const f32 amount );

    //--------------------------------------------------------------------------
    //! @brief      エルミートスプライン補間を行います.
    //!
    //! @param [in]     a           入力位置ベクトル.
    //! @param [in]     t1          入力接ベクトル.
    //! @param [in]     b           入力位置ベクトル.
    //! @param [in]     t2          入力接ベクトル.
    //! @param [in]     amount      重み.
    //! @param [out]    result      エルミートスプライン補間の結果.
    //--------------------------------------------------------------------------
    static void     Hermite( const Vector3& a, const Vector3& t1, const Vector3& b, const Vector3& t2, const f32 amount, Vector3& result );

    //--------------------------------------------------------------------------
    //! @brief      Catmull-Rom補間を行います.
    //!
    //! @param [in]     a           補間の最初の位置.
    //! @param [in]     b           補間の2番目の位置.
    //! @param [in]     c           補間の3番目の位置.
    //! @param [in]     d           補間の4番目の位置.
    //! @param [in]     amount      加重係数.
    //! @return     Catmull-Rom補間の結果を返却します.
    //--------------------------------------------------------------------------
    static Vector3  CatmullRom( const Vector3& a, const Vector3& b, const Vector3& c, const Vector3& d, const f32 amount );

    //--------------------------------------------------------------------------
    //! @brief      Catmull-Rom補間を行います.
    //!
    //! @param [in]     a           補間の最初の位置.
    //! @param [in]     b           補間の2番目の位置.
    //! @param [in]     c           補間の3番目の位置.
    //! @param [in]     d           補間の4番目の位置.
    //! @param [in]     amount      加重係数.
    //! @param [out]    result      Catmull-Rom補間の結果.
    //--------------------------------------------------------------------------
    static void     CatmullRom( const Vector3& a, const Vector3& b, const Vector3& c, const Vector3& d, const f32 amount, Vector3& result );

    //--------------------------------------------------------------------------
    //! @brief      線形補間を行います.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [in]     amount      重み(0～1の値範囲で指定).
    //! @return     線形補間の結果を返却します.
    //--------------------------------------------------------------------------
    static Vector3  Lerp( const Vector3& a, const Vector3& b, const f32 amount );

    //--------------------------------------------------------------------------
    //! @brief      線形補間を行います.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [in]     amount      重み(0～1の値範囲で指定).
    //! @param [out]    result      線形補間の結果.
    //--------------------------------------------------------------------------
    static void     Lerp( const Vector3& a, const Vector3& b, const f32 amount, Vector3& result );

    //--------------------------------------------------------------------------
    //! @brief      3次方程式を用いて，2つの値の間を補間します.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [in]     amount      重み.
    //! @return     補間の結果を返却します.
    //--------------------------------------------------------------------------
    static Vector3  SmoothStep( const Vector3& a, const Vector3& b, const f32 amount );

    //--------------------------------------------------------------------------
    //! @brief      3次方程式を用いて，2つの値の間を補間します.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [in]     amount      重み.
    //! @param [out]    result      補間の結果.
    //--------------------------------------------------------------------------
    static void     SmoothStep( const Vector3& a, const Vector3& b, const f32 amount, Vector3& result );

    //--------------------------------------------------------------------------
    //! @brief      指定された行列を用いて，ベクトルを変換します.
    //!
    //! @param [in]     position    入力ベクトル.
    //! @param [in]     matrix      変換行列.
    //! @return     変換されたベクトルを返却します.
    //--------------------------------------------------------------------------
    static Vector3  Transform( const Vector3& position, const Matrix& matrix );

    //--------------------------------------------------------------------------
    //! @brief      指定された行列を用いて，ベクトルを変換します.
    //!
    //! @param [in]     position    入力ベクトル.
    //! @param [in]     matrix      変換行列.
    //! @param [out]    result      変換されたベクトル.
    //--------------------------------------------------------------------------
    static void     Transform( const Vector3& position, const Matrix& matrix, Vector3& result );

    //--------------------------------------------------------------------------
    //! @brief      指定された行列を用いて，法線ベクトルを変換します.
    //!
    //! @param [in]     normal      入力ベクトル.
    //! @param [in]     matrix      変換行列.
    //! @return     変換された法線ベクトル.
    //---------------------------------------------------------------------------
    static Vector3  TransformNormal( const Vector3& normal, const Matrix& matrix );

    //--------------------------------------------------------------------------
    //! @brief      指定された行列を用いて，法線ベクトルを変換します.
    //!
    //! @param [in]     normal      入力ベクトル.
    //! @param [in]     matrix      変換行列.
    //! @param [out]    result      変換された法線ベクトル.
    //--------------------------------------------------------------------------
    static void     TransformNormal( const Vector3& normal, const Matrix& matrix, Vector3& result );

    //--------------------------------------------------------------------------
    //! @brief      指定された行列を用いてベクトルを変換し，変換結果をw=1に射影します.
    //!
    //! @param [in]     coord       入力ベクトル.
    //! @param [in]     matrix      変換行列.
    //! @return     行列変換後, w=1に射影されたベクトルを返却します.
    //--------------------------------------------------------------------------
    static Vector3  TransformCoordinate( const Vector3& coord, const Matrix& matrix );

    //--------------------------------------------------------------------------
    //! @brief      指定された行列を用いてベクトルを変換し，変換結果をw=1に射影します.
    //!
    //! @param [in]     coord       入力ベクトル.
    //! @param [in]     matrix      変換行列.
    //! @param [out]    result      行列変換後，w=1に射影されたベクトル.
    //--------------------------------------------------------------------------
    static void     TransformCoordinate( const Vector3& coord, const Matrix& matrix, Vector3& result );

    //--------------------------------------------------------------------------
    //! @brief      三角形の法線ベクトルを求めます.
    //!
    //! @param [in]     p1          三角形を構成する頂点.
    //! @param [in]     p2          三角形を構成する頂点.
    //! @param [in]     p3          三角形を構成する頂点.
    //! @return     法線ベクトルを返却します.
    //--------------------------------------------------------------------------
    static Vector3  ComputeNormal( const Vector3& p1, const Vector3& p2, const Vector3& p3 );

    //--------------------------------------------------------------------------
    //! @brief      三角形の法線ベクトルを求めます.
    //!
    //! @param [in]     p1          三角形を構成する頂点.
    //! @param [in]     p2          三角形を構成する頂点.
    //! @param [in]     p3          三角形を構成する頂点.
    //! @param [out]    result      法線ベクトル.
    //--------------------------------------------------------------------------
    static void     ComputeNormal( const Vector3& p1, const Vector3& p2, const Vector3& p3, Vector3& result );

    //--------------------------------------------------------------------------
    //! @brief      四角形の法線ベクトルを求めます.
    //!
    //! @param [in]     p1          四角形を構成する頂点.
    //! @param [in]     p2          四角形を構成する頂点.
    //! @param [in]     p3          四角形を構成する頂点.
    //! @param [in]     p4          四角形を構成する頂点.
    //! @return     法線ベクトルを返却します.
    //--------------------------------------------------------------------------
    static Vector3  ComputeQuadNormal( const Vector3& p1, const Vector3& p2, const Vector3& p3, const Vector3& p4 );

    //--------------------------------------------------------------------------
    //! @brief      四角形の法線ベクトルを求めます.
    //!
    //! @param [in]     p1          四角形を構成する頂点.
    //! @param [in]     p2          四角形を構成する頂点.
    //! @param [in]     p3          四角形を構成する頂点.
    //! @param [in]     p4          四角形を構成する頂点.
    //! @param [out]    result      法線ベクトル.
    //--------------------------------------------------------------------------
    static void     ComputeQuadNormal( const Vector3& p1, const Vector3& p2, const Vector3& p3, const Vector3& p4, Vector3& result );

    //---------------------------------------------------------------------------
    //! @brief      スカラー3重積を計算します.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [in]     c           入力ベクトル.
    //! @return     スカラー3重積の演算結果を返却します.
    //----------------------------------------------------------------------------
    static f32      ScalarTriple( const Vector3& a, const Vector3& b, const Vector3& c );

    //---------------------------------------------------------------------------
    //! @brief      スカラー3重積を計算します.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [in]     c           入力ベクトル.
    //! @param [out]    result      スカラー3重積の演算結果.
    //----------------------------------------------------------------------------
    static void     ScalarTriple( const Vector3& a, const Vector3& b, const Vector3& c, f32& result );

    //---------------------------------------------------------------------------
    //! @brief      ベクトル3重積を計算します.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [in]     c           入力ベクトル.
    //! @return     ベクトル3重積の演算結果を返却します.
    //----------------------------------------------------------------------------
    static Vector3  VectorTriple( const Vector3& a, const Vector3& b, const Vector3& c );

    //---------------------------------------------------------------------------
    //! @brief      ベクトル3重積を計算します.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [in]     c           入力ベクトル.
    //! @param [out]    result      ベクトル3重積の演算結果.
    //----------------------------------------------------------------------------
    static void     VectorTriple( const Vector3& a, const Vector3& b, const Vector3& c, Vector3& result );

};


////////////////////////////////////////////////////////////////////////////////
// Vector4 class
////////////////////////////////////////////////////////////////////////////////
class Vector4 : public _Vector4
{
    //==========================================================================
    // list of friend classes and methods.
    //==========================================================================

    //--------------------------------------------------------------------------
    //! @brief      乗算演算子です.
    //!
    //! @param [in]     scalar      乗算するスカラー値.
    //! @param [in]     value       乗算されるベクトル.
    //! @return     乗算結果を返却します.
    //--------------------------------------------------------------------------
    friend Vector4 operator * ( const f32 scalar, const Vector4& value );

private:
    //==========================================================================
    // private variables
    //==========================================================================
    /* NOTHING */

    //==========================================================================
    // private methods
    //==========================================================================
    /* NOTHING */

protected:
    //==========================================================================
    // protected variables
    //==========================================================================
    /* NOTHING */

    //==========================================================================
    // protected methods
    //==========================================================================
    /* NOTHING */

public:
    //==========================================================================
    // public variables
    //==========================================================================
    /* NOTHING */

    //==========================================================================
    // public methods
    //==========================================================================

    //--------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //--------------------------------------------------------------------------
    Vector4     ();

    //--------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //!
    //! @param [in]     pValeus     要素数4の配列.
    //--------------------------------------------------------------------------
    Vector4     ( const f32* pValues );

    //--------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //!
    //! @param [in]     nx           X成分.
    //! @param [in]     ny           Y成分.
    //! @param [in]     nz           Z成分.
    //! @param [in]     nw           W成分.
    //--------------------------------------------------------------------------
    Vector4     ( const f32 nx, const f32 ny, const f32 nz, const f32 nw );

    //--------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //!
    //! @param [in]     value       2次元ベクトル.
    //! @param [in]     nz          Z成分.
    //! @param [in]     nw          W成分.
    //--------------------------------------------------------------------------
    Vector4     ( const Vector2& value, const f32 nz, const f32 nw );

    //--------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //!
    //! @param [in]     value       3次元ベクトル.
    //! @param [in]     nw          W成分.
    //--------------------------------------------------------------------------
    Vector4     ( const Vector3& value, const f32 nw );

    //--------------------------------------------------------------------------
    //! @brief      コピーコンストラクタです.
    //!
    //! @param [in]     value       コピー元の値.
    //--------------------------------------------------------------------------
    Vector4     ( const Vector4& value );

    //--------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //--------------------------------------------------------------------------
    virtual ~Vector4 ();

    //--------------------------------------------------------------------------
    //! @brief      f32*型への演算子です.
    //!
    //! @return     最初の要素へのポインタを返却します.
    //--------------------------------------------------------------------------
    operator        f32* ();

    //--------------------------------------------------------------------------
    //! @brief      const f32*型への演算子です.
    //!
    //! @return     最初の要素へのポインタを返却します.
    //--------------------------------------------------------------------------
    operator const  f32* () const;

    //--------------------------------------------------------------------------
    //! @brief      加算代入演算子です.
    //!
    //! @param [in]     value       加算する値.
    //! @return     加算結果を返却します.
    //--------------------------------------------------------------------------
    Vector4&    operator +=     ( const Vector4& value );

    //--------------------------------------------------------------------------
    //! @brief      減算代入演算子です.
    //!
    //! @param [in]     value       減算する値.
    //! @return     減算結果を返却します.
    //--------------------------------------------------------------------------
    Vector4&    operator -=     ( const Vector4& value );

    //--------------------------------------------------------------------------
    //! @brief      乗算代入演算子です.
    //!
    //! @param [in]     scalar      乗算するスカラー値.
    //! @return     乗算結果を返却します.
    //--------------------------------------------------------------------------
    Vector4&    operator *=     ( const f32 scalar );

    Vector4&    operator *=     ( const Vector4& value ); 

    //--------------------------------------------------------------------------
    //! @brief      除算代入演算子です.
    //!
    //! @param [in]     scalar      除算するスカラー値.
    //! @return     除算結果を返却します.
    //--------------------------------------------------------------------------
    Vector4&    operator /=     ( const f32 scalar );

    //--------------------------------------------------------------------------
    //! @brief      正符号演算子です.
    //!
    //! @return     自分自身の値を返却します.
    //--------------------------------------------------------------------------
    Vector4     operator +      () const;

    //--------------------------------------------------------------------------
    //! @brief      負符号演算子です.
    //!
    //! @return     負符号を付けた値を返却します.
    //--------------------------------------------------------------------------
    Vector4     operator -      () const;

    //--------------------------------------------------------------------------
    //! @brief      加算演算子です.
    //!
    //! @param [in]     value       加算する値.
    //! @return     加算結果を返却します.
    //--------------------------------------------------------------------------
    Vector4     operator +      ( const Vector4& value )  const;

    //--------------------------------------------------------------------------
    //! @brief      減算演算子です.
    //!
    //! @param [in]     value       減算する値.
    //! @return     減算結果を返却します.
    //--------------------------------------------------------------------------
    Vector4     operator -      ( const Vector4& value )  const;

    //--------------------------------------------------------------------------
    //! @brief      乗算演算子です.
    //!
    //! @param [in]     scalar      乗算するスカラー値.
    //! @return     乗算結果を返却します.
    //--------------------------------------------------------------------------
    Vector4     operator *      ( const f32 scalar )       const;

    Vector4     operator *      ( const Vector4& value )   const;

    //--------------------------------------------------------------------------
    //! @brief      除算演算子です.
    //!
    //! @param [in]     scalar      除算するスカラー値.
    //! @return     除算結果を返却します.
    //--------------------------------------------------------------------------
    Vector4     operator /      ( const f32 scalar )       const;

    //--------------------------------------------------------------------------
    //! @brief      代入演算子です.
    //!
    //! @param [in]     value       代入する値.
    //! @return     代入結果を返却します.
    //--------------------------------------------------------------------------
    Vector4&    operator =      ( const Vector4& value );

    //--------------------------------------------------------------------------
    //! @brief      等価比較演算子です.
    //!
    //! @param [in]     value       比較する値.
    //! @return     値が等価であればtrue, そうでなければfalseを返却します.
    //--------------------------------------------------------------------------
    bool        operator ==     ( const Vector4& value )  const;

    //--------------------------------------------------------------------------
    //! @brief      非等価比較演算子です.
    //!
    //! @param [in]     value       比較する値.
    //! @return     値が非等価であればtrue, そうでなければfalseを返却します.
    //--------------------------------------------------------------------------
    bool        operator !=     ( const Vector4& value )  const;

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの長さを求めます.
    //!
    //! @return     ベクトルの長さを返却します.
    //--------------------------------------------------------------------------
    f32         Length          () const;

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの長さの2乗値を求めます.
    //!
    //! @return     ベクトルの長さの2乗値を返却します.
    //--------------------------------------------------------------------------
    f32         LengthSq        () const;

    //--------------------------------------------------------------------------
    //! @brief      単位ベクトルを求めます.
    //!
    //! @return     単位ベクトルを返却します.
    //--------------------------------------------------------------------------
    Vector4     UnitVector      () const;

    //--------------------------------------------------------------------------
    //! @brief      ベクトルを正規化します.
    //!
    //! @return     正規化したベクトルを返却します.
    //--------------------------------------------------------------------------
    Vector4&    Normalize       ();

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの正規化を試みます.
    //!
    //! @param [in]     value       長さが0の場合に設定する値.
    //! @return     ベクトルの長さが0の場合はvalueを，そうでないときは正規化したベクトルを返却します.
    //--------------------------------------------------------------------------
    Vector4&    SafeNormalize   ( const Vector4& value );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの内積を求めます.
    //!
    //! @param [in]     value       入力ベクトル.
    //! @return     ベクトルの内積を返却します.
    //--------------------------------------------------------------------------
    f32         Dot             ( const Vector4& value ) const;

    //--------------------------------------------------------------------------
    //! @brief      各成分の値を設定します.
    //!
    //! @param [in]     nx          設定するX成分の値.
    //! @param [in]     ny          設定するY成分の値.
    //! @param [in]     nz          設定するZ成分の値.
    //! @param [in]     nw          設定するW成分の値.
    //--------------------------------------------------------------------------
    void        Set             ( const f32 nx, const f32 ny, const f32 nz, const f32 nw );

    //--------------------------------------------------------------------------
    //! @brief      各成分の絶対値を求めます.
    //!
    //! @param [in]     value       絶対値を求める値.
    //! @return     各成分の絶対値を求め，その結果を返却します.
    //--------------------------------------------------------------------------
    static Vector4  Abs( const Vector4& value );

    //--------------------------------------------------------------------------
    //! @brief      各成分の絶対値を求めます.
    //!
    //! @param [in]     value       絶対値を求めます.
    //! @param [out]    result      計算結果の格納先.
    //--------------------------------------------------------------------------
    static void     Abs( const Vector4& value, Vector4& result );

    //--------------------------------------------------------------------------
    //! @brief      各成分の最小値を求めます.
    //!
    //! @param [in]     a           比較する値.
    //! @param [in]     b           比較する値.
    //! @return     各成分の最小値を求め，その結果を返却します.
    //--------------------------------------------------------------------------
    static Vector4  Min( const Vector4& a, const Vector4& b );

    //--------------------------------------------------------------------------
    //! @brief      各成分の最小値を求めます.
    //!
    //! @param [in]     a           比較する値.
    //! @param [in]     b           比較する値.
    //! @param [out]    result      各成分の最小値を求めた結果.
    //--------------------------------------------------------------------------
    static void     Min( const Vector4& a, const Vector4& b, Vector4& result );

    //--------------------------------------------------------------------------
    //! @brief      各成分の最大値を求めます.
    //!
    //! @param [in]     a           比較する値.
    //! @param [in]     b           比較する値.
    //! @return     各成分の最大値を求め，その結果を返却します.
    //--------------------------------------------------------------------------
    static Vector4  Max( const Vector4& a, const Vector4& b );

    //--------------------------------------------------------------------------
    //! @brief      各成分の最大値を求めます.
    //!
    //! @param [in]     a           比較する値.
    //! @param [in]     b           比較する値.
    //! @param [out]    result      各成分の最大値を求めた結果.
    //--------------------------------------------------------------------------
    static void     Max( const Vector4& a, const Vector4& b, Vector4& result );

    //--------------------------------------------------------------------------
    //! @brief      値を指定された範囲内に制限します.
    //!
    //! @param [in]     value       クランプする値.
    //! @param [in]     a           最小値.
    //! @param [in]     b           最大値.
    //! @return     クランプされた値を返却します.
    //--------------------------------------------------------------------------
    static Vector4  Clamp( const Vector4& value, const Vector4& a, const Vector4& b );

    //--------------------------------------------------------------------------
    //! @brief      値を指定された範囲内に制限します.
    //!
    //! @param [in]     value       クランプする値.
    //! @param [in]     a           最小値.
    //! @param [in]     b           最大値.
    //! @param [out]    result      クランプされた値.
    //--------------------------------------------------------------------------
    static void     Clamp( const Vector4& value, const Vector4& a, const Vector4& b, Vector4& result );

    //--------------------------------------------------------------------------
    //! @brief      指定された値を0～1の範囲に制限します.
    //!
    //! @param [in]     value       クランプする値.
    //! @return     クランプされた値.
    //--------------------------------------------------------------------------
    static Vector4  Saturate( const Vector4& value );

    //--------------------------------------------------------------------------
    //! @brief      指定された値を0～1の範囲に制限します.
    //!
    //! @param [in]     value       クランプする値.
    //! @param [out]    result      クランプされた値.
    //--------------------------------------------------------------------------
    static void     Saturate( const Vector4& value, Vector4& result );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトル間の距離を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @return     2つのベクトル間の距離を返却します.
    //--------------------------------------------------------------------------
    static f32      Distance( const Vector4& a, const Vector4& b );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトル間の距離を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [out]    result      2つのベクトル間の距離.
    //--------------------------------------------------------------------------
    static void     Distance( const Vector4& a, const Vector4& b, f32& result );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトル間の距離の2乗値を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @return     2つのベクトル間の距離の2乗値を返却します.
    //--------------------------------------------------------------------------
    static f32      DistanceSq( const Vector4& a, const Vector4& b );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトル間の距離の2乗値を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [out]    result      2つのベクトル間の距離の2乗値.
    //--------------------------------------------------------------------------
    static void     DistanceSq( const Vector4& a, const Vector4& b, f32& result );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの内積を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @return     ベクトルの内積を返却します.
    //--------------------------------------------------------------------------
    static f32      Dot( const Vector4& a, const Vector4& b );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの内積を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [out]    result      ベクトルの内積.
    //--------------------------------------------------------------------------
    static void     Dot( const Vector4& a, const Vector4& b, f32& result );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルを正規化します.
    //!
    //! @param [in]     value       正規化するベクトル.
    //! @return     正規化したベクトルを返却します.
    //--------------------------------------------------------------------------
    static Vector4  Normalize( const Vector4& value );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルを正規化します.
    //!
    //! @param [in]     value       正規化するベクトル.
    //! @param [out]    result      正規化したベクトル.
    //--------------------------------------------------------------------------
    static void     Normalize( const Vector4& value, Vector4& result );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの正規化を試みます.
    //!
    //! @param [in]     value       正規化するベクトル.
    //! @param [in]     set         長さが0の場合に設定するベクトル.
    //! @return     ベクトルの長さが0でなければ正規化したベクトルを返却,
    //!             長さが0の場合はsetを返却します.
    //--------------------------------------------------------------------------
    static Vector4  SafeNormalize( const Vector4& value, const Vector4& set );

    //--------------------------------------------------------------------------
    //! @brief      ベクトルの正規化を試みます.
    //!
    //! @param [in]     value       正規化するベクトル.
    //! @param [in]     set         長さが0の場合に設定するベクトル.
    //! @param [out]    result      長さが0でなければ正規化したベクトル，0であれば set.
    //--------------------------------------------------------------------------
    static void     SafeNormalize( const Vector4& value, const Vector4& set, Vector4& result );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトルの交差角を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @return     2つのベクトルの交差角をラジアンで返却します.
    //--------------------------------------------------------------------------
    static f32      ComputeCrossingAngleRad( const Vector4& a, const Vector4& b );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトルの交差角を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [out]    result      2つのベクトルの交差角(ラジアン).
    //--------------------------------------------------------------------------
    static void     ComputeCrossingAngleRad( const Vector4& a, const Vector4& b, f32& result );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトルの交差角を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @return     2つのベクトルの交差角を度で返却します.
    //--------------------------------------------------------------------------
    static f32      ComputeCrossingAngleDeg( const Vector4& a, const Vector4& b );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトルの交差角を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [out]    result      2つのベクトルの交差角(度).
    //--------------------------------------------------------------------------
    static void     ComputeCrossingAngleDeg( const Vector4& a, const Vector4& b, f32& result );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトルの交差角を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @return     2つのベクトルの交差角をインデックス角で返却します.
    //--------------------------------------------------------------------------
    static u16      ComputeCrossingAngleIdx( const Vector4& a, const Vector4& b );

    //--------------------------------------------------------------------------
    //! @brief      2つのベクトルの交差角を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [out]    result      2つのベクトルの交差角(インデックス角).
    //--------------------------------------------------------------------------
    static void     ComputeCrossingAngleIdx( const Vector4& a, const Vector4& b, u16& result );

    //--------------------------------------------------------------------------
    //! @brief      指定された法線を持つ表面の入射ベクトルから，反射ベクトルを求めます.
    //!
    //! @param [in]     i           入射ベクトル.
    //! @param [in]     n           法線ベクトル.
    //! @return     反射ベクトルを返却します.
    //--------------------------------------------------------------------------
    static Vector4  Reflect( const Vector4& i, const Vector4& n );

    //--------------------------------------------------------------------------
    //! @brief      指定された法線を持つ表面の入射ベクトルから，反射ベクトルを求めます.
    //!
    //! @param [in]     i           入射ベクトル.
    //! @param [in]     n           法線ベクトル.
    //! @param [out]    result      反射ベクトル.
    //--------------------------------------------------------------------------
    static void     Reflect( const Vector4& i, const Vector4& n, Vector4& result );

    //--------------------------------------------------------------------------
    //! @brief      指定された法線を持つ表面の入射ベクトルと屈折角から，屈折ベクトルを求めます.
    //!
    //! @param [in]     i           入射ベクトル.
    //! @param [in]     n           法線ベクトル.
    //! @param [in]     eta         屈折率.
    //! @return     屈折ベクトルを返却します.
    //--------------------------------------------------------------------------
    static Vector4  Refract( const Vector4& i, const Vector4& n, f32 eta );

    //--------------------------------------------------------------------------
    //! @brief      指定された法線を持つ表面の入射ベクトルと屈折角から，屈折ベクトルを求めます.
    //!
    //! @param [in]     i           入射ベクトル.
    //! @param [in]     n           法線ベクトル.
    //! @param [in]     eta         屈折率.
    //! @param [out]    result      屈折ベクトル.
    //--------------------------------------------------------------------------
    static void     Refract( const Vector4& i, const Vector4& n, f32 eta, Vector4& result );

    //--------------------------------------------------------------------------
    //! @brief      重心座標上の点を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [in]     c           入力ベクトル.
    //! @param [in]     amount1     重み.
    //! @param [in]     amount2     重み.
    //! @return     重心座標上の点を返却します.
    //--------------------------------------------------------------------------
    static Vector4  Barycentric( const Vector4& a, const Vector4& b, const Vector4& c, const f32 amount1, const f32 amount2 );

    //--------------------------------------------------------------------------
    //! @brief      重心座標上の点を求めます.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [in]     c           入力ベクトル.
    //! @param [in]     amount1     重み.
    //! @param [in]     amount2     重み.
    //! @param [out]    result      重心座標上の点.
    //--------------------------------------------------------------------------
    static void     Barycentric( const Vector4& a, const Vector4& b, const Vector4& c, const f32 amount1, const f32 amount2, Vector4& result );

    //--------------------------------------------------------------------------
    //! @brief      エルミートスプライン補間を行います.
    //!
    //! @param [in]     a           入力位置ベクトル.
    //! @param [in]     t1          入力接ベクトル.
    //! @param [in]     b           入力位置ベクトル.
    //! @param [in]     t2          入力接ベクトル.
    //! @param [in]     amount      重み.
    //! @return     エルミートスプライン補間を行った結果を返却します.
    //--------------------------------------------------------------------------
    static Vector4  Hermite( const Vector4& a, const Vector4& t1, const Vector4& b, const Vector4& t2, const f32 amount );

    //--------------------------------------------------------------------------
    //! @brief      エルミートスプライン補間を行います.
    //!
    //! @param [in]     a           入力位置ベクトル.
    //! @param [in]     t1          入力接ベクトル.
    //! @param [in]     b           入力位置ベクトル.
    //! @param [in]     t2          入力接ベクトル.
    //! @param [in]     amount      重み.
    //! @param [out]    result      エルミートスプライン補間の結果.
    //--------------------------------------------------------------------------
    static void     Hermite( const Vector4& a, const Vector4& t1, const Vector4& b, const Vector4& t2, const f32 amount, Vector4& result );

    //--------------------------------------------------------------------------
    //! @brief      Catmull-Rom補間を行います.
    //!
    //! @param [in]     a           補間の最初の位置.
    //! @param [in]     b           補間の2番目の位置.
    //! @param [in]     c           補間の3番目の位置.
    //! @param [in]     d           補間の4番目の位置.
    //! @param [in]     amount      加重係数.
    //! @return     Catmull-Rom補間の結果を返却します.
    //--------------------------------------------------------------------------
    static Vector4  CatmullRom( const Vector4& a, const Vector4& b, const Vector4& c, const Vector4& d, const f32 amount );

    //--------------------------------------------------------------------------
    //! @brief      Catmull-Rom補間を行います.
    //!
    //! @param [in]     a           補間の最初の位置.
    //! @param [in]     b           補間の2番目の位置.
    //! @param [in]     c           補間の3番目の位置.
    //! @param [in]     d           補間の4番目の位置.
    //! @param [in]     amount      加重係数.
    //! @param [out]    result      Catmull-Rom補間の結果.
    //--------------------------------------------------------------------------
    static void     CatmullRom( const Vector4& a, const Vector4& b, const Vector4& c, const Vector4& d, const f32 amount, Vector4& result );

    //--------------------------------------------------------------------------
    //! @brief      線形補間を行います.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [in]     amount      重み(0～1の値範囲で指定).
    //! @return     線形補間の結果を返却します.
    //--------------------------------------------------------------------------
    static Vector4  Lerp( const Vector4& a, const Vector4& b, const f32 amount );

    //--------------------------------------------------------------------------
    //! @brief      線形補間を行います.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [in]     amount      重み(0～1の値範囲で指定).
    //! @param [out]    result      線形補間の結果.
    //--------------------------------------------------------------------------
    static void     Lerp( const Vector4& a, const Vector4& b, const f32 amount, Vector4& result );

    //--------------------------------------------------------------------------
    //! @brief      3次方程式を用いて，2つの値の間を補間します.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [in]     amount      重み.
    //! @return     補間の結果を返却します.
    //--------------------------------------------------------------------------
    static Vector4  SmoothStep( const Vector4& a, const Vector4& b, const f32 amount );

    //--------------------------------------------------------------------------
    //! @brief      3次方程式を用いて，2つの値の間を補間します.
    //!
    //! @param [in]     a           入力ベクトル.
    //! @param [in]     b           入力ベクトル.
    //! @param [in]     amount      重み.
    //! @param [out]    result      補間の結果.
    //--------------------------------------------------------------------------
    static void     SmoothStep( const Vector4& a, const Vector4& b, const f32 amount, Vector4& result );

    //--------------------------------------------------------------------------
    //! @brief      指定された行列を用いて，ベクトルを変換します.
    //!
    //! @param [in]     position    入力ベクトル.
    //! @param [in]     matrix      変換行列.
    //! @return     変換されたベクトルを返却します.
    //--------------------------------------------------------------------------
    static Vector4  Transform( const Vector4& position, const Matrix& matrix );

    //--------------------------------------------------------------------------
    //! @brief      指定された行列を用いて，ベクトルを変換します.
    //!
    //! @param [in]     position    入力ベクトル.
    //! @param [in]     matrix      変換行列.
    //! @param [out]    result      変換されたベクトル.
    //--------------------------------------------------------------------------
    static void     Transform( const Vector4& position, const Matrix& matrix, Vector4& result );
};


////////////////////////////////////////////////////////////////////////////////
// Matrix class
// 行列クラス    (列優先行列)
////////////////////////////////////////////////////////////////////////////////
class Matrix : public _Matrix
{
    //==========================================================================
    // list of friend classes and methods.
    //==========================================================================

    //--------------------------------------------------------------------------
    //! @brief      乗算演算子です.
    //!
    //! @param [in]     scalar      乗算するスカラー値.
    //! @param [in]     value       乗算される行列.
    //! @return     乗算結果を返却します.
    //--------------------------------------------------------------------------
    friend Matrix operator * ( const f32 scalar , const Matrix& value );

private:
    //==========================================================================
    // private variables.
    //==========================================================================
    /* NOTHING */

    //==========================================================================
    // private methods.
    //==========================================================================
    /* NOTHING */

protected:
    //==========================================================================
    // protected variables.
    //==========================================================================
    /* NOTHING */

public:
    //==========================================================================
    // public variables.
    //==========================================================================
    /* NOTHING */

    //==========================================================================
    // public methods.
    //==========================================================================

    //--------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //--------------------------------------------------------------------------
    Matrix ();

    //--------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //!
    //! @param [in]     pValues     要素数16の配列.
    //--------------------------------------------------------------------------
    Matrix ( const f32* pValues );

    //--------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //!
    //! @param [in]     m11         1行1列の値.
    //! @param [in]     m12         1行2列の値.
    //! @param [in]     m13         1行3列の値.
    //! @param [in]     m14         1行4列の値.
    //! @param [in]     m21         2行1列の値.
    //! @param [in]     m22         2行2列の値.
    //! @param [in]     m23         2行3列の値.
    //! @param [in]     m24         2行4列の値.
    //! @param [in]     m31         3行1列の値.
    //! @param [in]     m32         3行2列の値.
    //! @param [in]     m33         3行3列の値.
    //! @param [in]     m34         3行4列の値.
    //! @param [in]     m41         4行1列の値.
    //! @param [in]     m42         4行2列の値.
    //! @param [in]     m43         4行3列の値.
    //! @param [in]     m44         4行4列の値.
    //--------------------------------------------------------------------------
    Matrix ( const f32 m11, const f32 m12, const f32 m13, const f32 m14,
             const f32 m21, const f32 m22, const f32 m23, const f32 m24,
             const f32 m31, const f32 m32, const f32 m33, const f32 m34,
             const f32 m41, const f32 m42, const f32 m43, const f32 m44 );

    //--------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //!
    //! @param [in]     v0          1行目に設定する値.
    //! @param [in]     v1          2行目に設定する値.
    //! @param [in]     v2          3行目に設定する値.
    //! @param [in]     v3          4行目に設定する値.
    //--------------------------------------------------------------------------
    Matrix ( const Vector4& v0,
             const Vector4& v1,
             const Vector4& v2,
             const Vector4& v3 );

    //--------------------------------------------------------------------------
    //! @brief      コピーコンストラクタです.
    //!
    //! @param [in]     value       コピー元の値.
    //--------------------------------------------------------------------------
    Matrix ( const Matrix& value );

    //--------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //--------------------------------------------------------------------------
    virtual ~Matrix();

    //--------------------------------------------------------------------------
    //! @brief      f32*型への演算子です.
    //!
    //! @return     最初の要素へのポインタを返却します.
    //--------------------------------------------------------------------------
    operator        f32* ();

    //--------------------------------------------------------------------------
    //! @brief      const f32*型への演算子です.
    //!
    //! @return     最初の要素へのポインタを返却します.
    //--------------------------------------------------------------------------
    operator const  f32* () const;

    //--------------------------------------------------------------------------
    //! @brief      インデクサです.
    //!
    //! @param [in]     row         行番号.
    //! @param [in]     col         列番号.
    //! @return     指定された行番号と列番号に対応する要素を返却します.
    //--------------------------------------------------------------------------
    f32&    operator()      ( u32 row, u32 col );

    //--------------------------------------------------------------------------
    //! @brief      インデクサです(const版).
    //!
    //! @param [in]     row         行番号.
    //! @param [in]     col         列番号.
    //! @return     指定された行番号と列番号に対応する要素を返却します.
    //--------------------------------------------------------------------------
    const f32&     operator()      ( u32 row, u32 col ) const;

    //--------------------------------------------------------------------------
    //! @brief      乗算代入演算子です.
    //!
    //! @param [in]     value       乗算する行列.
    //! @return     乗算結果を返却します.
    //--------------------------------------------------------------------------
    Matrix& operator *=     ( const Matrix& value );

    //--------------------------------------------------------------------------
    //! @brief      加算代入演算子です.
    //!
    //! @param [in]     value       加算する行列.
    //! @return     加算結果を返却します.
    //--------------------------------------------------------------------------
    Matrix& operator +=     ( const Matrix& value );

    //--------------------------------------------------------------------------
    //! @brief      減算代入演算子です.
    //!
    //! @param [in]     value       減算する行列.
    //! @return     減算結果を返却します.
    //--------------------------------------------------------------------------
    Matrix& operator -=     ( const Matrix& value );

    //--------------------------------------------------------------------------
    //! @brief      乗算代入演算子です.
    //!
    //! @param [in]     scalar      乗算するスカラー値.
    //! @return     乗算結果を返却します.
    //--------------------------------------------------------------------------
    Matrix& operator *=     ( const f32 scalar );

    //--------------------------------------------------------------------------
    //! @brief      除算代入演算子です.
    //!
    //! @param [in]     scalar      除算するスカラー値.
    //! @return     除算結果を返却します.
    //--------------------------------------------------------------------------
    Matrix& operator /=     ( const f32 scalar );

    //--------------------------------------------------------------------------
    //! @brief      正符号演算子です.
    //!
    //! @return     自分自身を値を返却します.
    //--------------------------------------------------------------------------
    Matrix  operator +      () const;

    //--------------------------------------------------------------------------
    //! @brief      負符号演算子です.
    //
    //! @return     各成分にマイナスを付けた値を返却します.
    //--------------------------------------------------------------------------
    Matrix  operator -      () const;

    //--------------------------------------------------------------------------
    //! @brief      乗算演算子です.
    //!
    //! @param [in]     value       乗算する値.
    //! @return     乗算結果を返却します.
    //--------------------------------------------------------------------------
    Matrix  operator *      ( const Matrix& value )   const;

    //--------------------------------------------------------------------------
    //! @brief      加算演算子です.
    //!
    //! @param [in]     value       加算する値.
    //! @return     加算結果を返却します.
    //--------------------------------------------------------------------------
    Matrix  operator +      ( const Matrix& value )   const;

    //--------------------------------------------------------------------------
    //! @brief      減算演算子です.
    //!
    //! @param [in]     value       減算する値.
    //! @retrurn    減算結果を返却します.
    //--------------------------------------------------------------------------
    Matrix  operator -      ( const Matrix& value )   const;

    //--------------------------------------------------------------------------
    //! @brief      乗算演算子です.
    //
    //! @param [in]     scalar      乗算するスカラー値.
    //! @return     乗算結果を返却します.
    //--------------------------------------------------------------------------
    Matrix  operator *      ( const f32 scalar )       const;

    //--------------------------------------------------------------------------
    //! @brief      除算演算子です.
    //!
    //! @param [in]     scalar      除算するスカラー値.
    //--------------------------------------------------------------------------
    Matrix  operator /      ( const f32 scalar )       const;

    //--------------------------------------------------------------------------
    //! @brief      代入演算子です.
    //!
    //! @param [in]     value       代入する値.
    //! @return     代入結果を返却します.
    //--------------------------------------------------------------------------
    Matrix& operator =      ( const Matrix& value );

    //--------------------------------------------------------------------------
    //! @brief      等価比較演算子です.
    //!
    //! @param [in]     value       比較する値.
    //! @retval true    値が等価です.
    //! @retval false   値が非等価です.
    //--------------------------------------------------------------------------
    bool    operator ==     ( const Matrix& value )   const;

    //--------------------------------------------------------------------------
    //! @brief      非等価比較演算子です.
    //!
    //! @param [in]     value       比較する値.
    //! @retval true    値が非等価です.
    //! @retval false   値が等価です.
    //--------------------------------------------------------------------------
    bool    operator !=     ( const Matrix& value )   const;

    //--------------------------------------------------------------------------
    //! @brief      行列式を求めます.
    //!
    //! @return     行列式の値を返却します.
    //--------------------------------------------------------------------------
    f32     Determinant     () const;

    //--------------------------------------------------------------------------
    //! @brief      単位行列にします.
    //--------------------------------------------------------------------------
    void    Identity        ();

    //--------------------------------------------------------------------------
    //! @brief      行列から平行移動量を取得します.
    //!
    //! @return     平行移動量を返却します.
    //--------------------------------------------------------------------------
    Vector3 GetTranslate    () const;

    //--------------------------------------------------------------------------
    //! @brief      行列から拡大・縮小量を取得します.
    //!
    //! @return     拡大・縮小量を取得します.
    //--------------------------------------------------------------------------
    Vector3 GetScale        () const;

    //--------------------------------------------------------------------------
    //! @brief      行列からローカル座標のX軸方向を求めます.
    //!
    //! @return     X軸の方向を返却します.
    //--------------------------------------------------------------------------
    Vector3 GetDirectionX   () const;

    //--------------------------------------------------------------------------
    //! @brief      行列からローカル座標のY軸方向を求めます.
    //!
    //! @return     ローカル座標のY軸の方向を返却します.
    //--------------------------------------------------------------------------
    Vector3 GetDirectionY   () const;

    //--------------------------------------------------------------------------
    //! @brief      行列からローカル座標のZ軸方向を求めます.
    //!
    //! @return     ローカル座標のZ軸の方向を返却します.
    //--------------------------------------------------------------------------
    Vector3 GetDirectionZ   () const;

    //--------------------------------------------------------------------------
    //! @brief      単位行列にします.
    //!
    //! @param [in]     value       単位行列にする値.
    //! @return     単位行列化した結果を返却します.
    //--------------------------------------------------------------------------
    static Matrix   Identity( Matrix& value );

    //--------------------------------------------------------------------------
    //! @brief      単位行列であるか判定します.
    //!
    //! @param [in]     value       判定する値.
    //! @retval true    単位行列です.
    //! @retval false   非単位行列です.
    //--------------------------------------------------------------------------
    static bool     IsIdentity( const Matrix& value );

    //--------------------------------------------------------------------------
    //! @brief      行列を転置します.
    //!
    //! @param [in]     value       転置する行列.
    //! @return     行列を転置した結果を返却します.
    //--------------------------------------------------------------------------
    static Matrix   Transpose( const Matrix& value );

    //--------------------------------------------------------------------------
    //! @brief      行列を転置します.
    //!
    //! @param [in]     value       転置する行列.
    //! @param [out]    result      転置された行列.
    //--------------------------------------------------------------------------
    static void     Transpose( const Matrix& value, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      行列同士を乗算します.
    //!
    //! @param [in]     a           入力行列.
    //! @param [in]     b           入力行列.
    //! @return     乗算結果を返却します.
    //--------------------------------------------------------------------------
    static Matrix   Multiply( const Matrix& a, const Matrix& b );

    //--------------------------------------------------------------------------
    //! @brief      行列同士を乗算します.
    //!
    //! @param [in]     a           入力行列.
    //! @param [in]     b           入力行列.
    //! @param [out]    result      乗算結果.
    //--------------------------------------------------------------------------
    static void     Multiply( const Matrix& a, const Matrix& b, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      スカラー乗算します.
    //!
    //! @param [in]     value       入力行列.
    //! @param [in]     scalar      スカラー値.
    //! @return     行列をスカラー倍した結果を返却します.
    //--------------------------------------------------------------------------
    static Matrix   Multiply( const Matrix& value, const f32 scalar );

    //--------------------------------------------------------------------------
    //! @brief      スカラー乗算します.
    //!
    //! @param [in]     value       入力行列.
    //! @param [in]     scalar      スカラー値.
    //! @param [out]    result      スカラー乗算した結果.
    //--------------------------------------------------------------------------
    static void     Multiply( const Matrix& value, const f32 scalar, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      行列同士を乗算し，乗算結果を転置します.
    //!
    //! @param [in]     a           入力行列.
    //! @param [in]     b           入力行列.
    //! @return     行列同士を乗算し，乗算結果を転置した値を返却します.
    //--------------------------------------------------------------------------
    static Matrix   MultiplyTranspose( const Matrix& a, const Matrix& b );

    //--------------------------------------------------------------------------
    //! @brief      行列同士を乗算し，乗算結果を転置します.
    //!
    //! @param [in]     a           入力行列.
    //! @param [in]     b           入力行列.
    //! @param [out]    result      行列同士を乗算し，乗算結果を転置した値.
    //--------------------------------------------------------------------------
    static void     MultiplyTranspose( const Matrix& a, const Matrix& b, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      逆行列を求めます.
    //!
    //! @param [in]     value       逆行列を求める値.
    //--------------------------------------------------------------------------
    static Matrix   Invert( const Matrix& value );

    //--------------------------------------------------------------------------
    //! @brief      逆行列を求めます.
    //!
    //! @param [in]     value       逆行列を求める値.
    //! @param [out]    result      逆行列.
    //--------------------------------------------------------------------------
    static void     Invert( const Matrix& value, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      四元数から行列を生成します.
    //!
    //! @param [in]     value       四元数.
    //! @return     四元数から生成された行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateFromQuaternion( const Quaternion& value );

    //--------------------------------------------------------------------------
    //! @brief      四元数から行列を生成します.
    //!
    //! @param [in]     value       四元数.
    //! @param [out]    result      四元数から生成された行列.
    //--------------------------------------------------------------------------
    static void     CreateFromQuaternion( const Quaternion& value, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      拡大縮小行列を生成します.
    //!
    //! @param [in]     scale      拡大縮小値.
    //! @return     拡大縮小行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateScale( const f32 scale );

    //--------------------------------------------------------------------------
    //! @brief      拡大縮小行列を生成します.
    //!
    //! @param [in]     scale       拡大縮小値.
    //! @param [out]    result      拡大縮小行列.
    //--------------------------------------------------------------------------
    static void     CreateScale( const f32 scale, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      拡大縮小行列を生成します.
    //!
    //! @param [in]     sx          X成分の拡大縮小値.
    //! @param [in]     sy          Y成分の拡大縮小値.
    //! @param [in]     sz          Z成分の拡大縮小値.
    //! @return     拡大縮小行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateScale( const f32 sx, const f32 sy, const f32 sz );

    //--------------------------------------------------------------------------
    //! @brief      拡大縮小行列を生成します.
    //!
    //! @param [in]     sx          X成分の拡大縮小値.
    //! @param [in]     sy          Y成分の拡大縮小値.
    //! @param [in]     sz          Z成分の拡大縮小値.
    //! @param [out]    result      拡大縮小行列.
    //--------------------------------------------------------------------------
    static void     CreateScale( const f32 sx, const f32 sy, const f32, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      拡大縮小行列を生成します.
    //!
    //! @param [in]     scale       拡大縮小値.
    //! @return     拡大縮小行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateScale( const Vector3& scale );

    //--------------------------------------------------------------------------
    //! @brief      拡大縮小行列を生成します.
    //!
    //! @param [in]     scale       拡大縮小値.
    //! @param [out]    result      拡大縮小行列.
    //--------------------------------------------------------------------------
    static void     CreateScale( const Vector3& scale, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      平行移動行列を生成します.
    //!
    //! @param [in]     tx          X成分の平行移動値.
    //! @param [in]     ty          Y成分の平行移動値.
    //! @param [in]     tz          Z成分の平行移動値.
    //! @return     平行移動行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateTranslation( const f32 tx, const f32 ty, const f32 tz );

    //--------------------------------------------------------------------------
    //! @brief      平行移動行列を生成します.
    //!
    //! @param [in]     tx          X成分の平行移動値.
    //! @param [in]     ty          Y成分の平行移動値.
    //! @param [in]     tz          Z成分の平行移動値.
    //! @param [out]    result      平行移動行列.
    //--------------------------------------------------------------------------
    static void     CreateTranslation( const f32 tx, const f32 ty, const f32 tz, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      平行移動行列を生成します.
    //!
    //! @param [in]     translate   平行移動値.
    //! @return     平行移動行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateTranslation( const Vector3& translate );

    //--------------------------------------------------------------------------
    //! @brief      平行移動行列を生成します.
    //!
    //! @param [in]     trnaslate   平行移動値.
    //! @param [out]    result      平行移動行列.
    //--------------------------------------------------------------------------
    static void     CreateTranslation( const Vector3& translate, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      X軸回りの回転行列を生成します.
    //!
    //! @param [in]     rad         角度(ラジアン).
    //! @return     X軸回りの回転行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateRotationXRad( const f32 rad );

    //--------------------------------------------------------------------------
    //! @brief      X軸回りの回転行列を生成します.
    //!
    //! @param [in]     rad         角度(ラジアン).
    //! @param [out]    result      X軸回りの回転行列.
    //--------------------------------------------------------------------------
    static void     CreateRotationXRad( const f32 rad, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      X軸回りの回転行列を生成します.
    //!
    //! @param [in]     deg         角度(度).
    //! @return     X軸回りの回転行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateRotationXDeg( const f32 deg );

    //--------------------------------------------------------------------------
    //! @brief      X軸回りの回転行列を生成します.
    //!
    //! @param [in]     deg         角度(度).
    //! @param [out]    result      X軸回りの回転行列.
    //--------------------------------------------------------------------------
    static void     CreateRotationXDeg( const f32 deg, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      X軸回りの回転行列を生成します.
    //!
    //! @param [in]     idx         角度(インデックス角).
    //! @return     X軸回りの回転行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateRotationXIdx( const u16 idx );

    //--------------------------------------------------------------------------
    //! @brief      X軸回りの回転行列を生成します.
    //!
    //! @param [in]     idx         角度(インデックス角).
    //! @param [out]    result      X軸回りの回転行列.
    //--------------------------------------------------------------------------
    static void     CreateRotationXIdx( const u16 idx, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      Y軸回りの回転行列を生成します.
    //!
    //! @param [in]     rad         角度(ラジアン).
    //! @return     Y軸回りの回転行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateRotationYRad( const f32 rad );

    //--------------------------------------------------------------------------
    //! @brief      Y軸回りの回転行列を生成します.
    //!
    //! @param [in]     rad         角度(ラジアン).
    //! @param [out]    result      Y軸回りの回転行列.
    //--------------------------------------------------------------------------
    static void     CreateRotationYRad( const f32 rad, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      Y軸回りの回転行列を生成します.
    //!
    //! @param [in]     deg         角度(度).
    //! @return     Y軸回りの回転行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateRotationYDeg( const f32 deg );

    //--------------------------------------------------------------------------
    //! @brief      Y軸回りの回転行列を生成します.
    //!
    //! @param [in]     deg         角度(度).
    //! @param [out]    result      Y軸周りの回転行列.
    //--------------------------------------------------------------------------
    static void     CreateRotationYDeg( const f32 deg, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      Y軸回りの回転行列を生成します.
    //!
    //! @param [in]     idx         角度(インデックス角).
    //! @return     Y軸回りの回転行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateRotationYIdx( const u16 idx );

    //--------------------------------------------------------------------------
    //! @brief      Y軸回りの回転行列を生成します.
    //!
    //! @param [in]     idx         角度(インデックス角).
    //! @param [out]    result      Y軸回りの回転行列.
    //--------------------------------------------------------------------------
    static void     CreateRotationYIdx( const u16 idx, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      Z軸回りの回転行列を生成します.
    //!
    //! @param [in]     rad         角度(ラジアン).
    //! @return     Z軸回りの回転行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateRotationZRad( const f32 idx );

    //--------------------------------------------------------------------------
    //! @brief      Z軸回りの回転行列を生成します.
    //!
    //! @param [in]     rad         角度(ラジアン),.
    //! @param [out]    result      Z軸周りの回転行列.
    //--------------------------------------------------------------------------
    static void     CreateRotationZRad( const f32 deg, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      Z軸回りの回転行列を生成します.
    //!
    //! @param [in]     deg         角度(度).
    //! @return     Z軸回りの回転行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateRotationZDeg( const f32 deg );

    //--------------------------------------------------------------------------
    //! @brief      Z軸回りの回転行列を生成します.
    //!
    //! @param [in]     deg         角度(度).
    //! @param [out]    result      Z軸回りの回転行列.
    //--------------------------------------------------------------------------
    static void     CreateRotationZDeg( const f32 deg, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      Z軸回りの回転行列を生成します.
    //!
    //! @param [in]     idx         角度(インデックス角).
    //! @return     Z軸回りの回転行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateRotationZIdx( const u16 idx );

    //--------------------------------------------------------------------------
    //! @brief      Z軸回りの回転行列を生成します.
    //!
    //! @param [in]     idx         角度(インデックス角).
    //! @param [out]    result      Z軸回りの回転行列.
    //--------------------------------------------------------------------------
    static void     CreateRotationZIdx( const u16 idx, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      指定された軸と角度から回転行列を生成します.
    //!
    //! @param [in]     axis        回転軸.
    //! @param [in]     rad         回転角(ラジアン).
    //! @return     回転行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateFromAxisAngleRad( const Vector3& axis, const f32 rad );

    //--------------------------------------------------------------------------
    //! @brief      指定された軸と角度から回転行列を生成します.
    //!
    //! @param [in]     axis        回転軸.
    //! @param [in]     rad         回転角(ラジアン).
    //! @param [out]    result      回転行列.
    //--------------------------------------------------------------------------
    static void     CreateFromAxisAngleRad( const Vector3& axis, const f32 rad, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      指定された軸と角度から回転行列を生成します.
    //!
    //! @param [in]     axis        回転軸.
    //! @param [in]     deg         回転角(度).
    //! @return     回転行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateFromAxisAngleDeg( const Vector3& axis, const f32 deg );

    //--------------------------------------------------------------------------
    //! @brief      指定された軸と角度から回転行列を生成します.
    //!
    //! @param [in]     axis        回転軸.
    //! @param [in]     deg         回転角(度).
    //! @param [out]    result      回転行列.
    //--------------------------------------------------------------------------
    static void     CreateFromAxisAngleDeg( const Vector3& aixs, const f32 deg, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      指定された軸と角度から回転行列を生成します.
    //!
    //! @param [in]     axis        回転軸.
    //! @param [in]     idx         回転角(インデックス角).
    //! @return     回転行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateFromAxisAngleIdx( const Vector3& axis, const u16 idx );

    //--------------------------------------------------------------------------
    //! @brief      指定された軸と角度から回転行列を生成します.
    //!
    //! @param [in]     axis        回転軸.
    //! @param [in]     idx         回転角(インデックス角).
    //! @param [out]    result      回転行列.
    //--------------------------------------------------------------------------
    static void     CreateFromAxisAngleIdx( const Vector3& aixs, const u16 idx, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      ヨー・ピッチ・ロール角から回転行列を生成します.
    //!
    //! @param [in]     yaw         ヨー角(ラジアン).
    //! @param [in]     pitch       ピッチ角(ラジアン).
    //! @param [in]     roll        ロール角(ラジアン).
    //! @return     回転行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateRotationYawPitchRollRad( const f32 yaw, const f32 pitch, const f32 roll );

    //--------------------------------------------------------------------------
    //! @brief      ヨー・ピッチ・ロール角から回転行列を生成します.
    //!
    //! @param [in]     yaw         ヨー角(ラジアン).
    //! @param [in]     pitch       ピッチ角(ラジアン).
    //! @param [in]     roll        ロール角(ラジアン).
    //! @param [out]    result      回転行列.
    //--------------------------------------------------------------------------
    static void     CreateRotationYawPitchRollRad( const f32 yaw, const f32 pitch, const f32 roll, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      ヨー・ピッチ・ロール角から回転行列を生成します.
    //!
    //! @param [in]     yaw         ヨー角(度).
    //! @param [in]     pitch       ピッチ角(度).
    //! @param [in]     roll        ロール角(度).
    //! @return     回転行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateRotationYawPitchRollDeg( const f32 yaw, const f32 pitch, const f32 roll );

    //--------------------------------------------------------------------------
    //! @brief      ヨー・ピッチ・ロール角から回転行列を生成します.
    //!
    //! @param [in]     yaw         ヨー角(度).
    //! @param [in]     pitch       ピッチ角(度).
    //! @param [in]     roll        ロール角(度).
    //! @param [out]    result      回転行列.
    //--------------------------------------------------------------------------
    static void     CreateRotationYawPitchRollDeg( const f32 yaw, const f32 pitch, const f32 roll, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      ヨー・ピッチ・ロール角から回転行列を生成します.
    //!
    //! @param [in]     yaw         ヨー角(インデックス角).
    //! @param [in]     pitch       ピッチ角(インデックス角).
    //! @param [in]     roll        ロール角(インデックス角).
    //! @return     回転行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateRotationYawPitchRollIdx( const u16 yaw, const u16 pitch, const u16 roll );

    //--------------------------------------------------------------------------
    //! @brief      ヨー・ピッチ・ロール角から回転行列を生成します.
    //!
    //! @param [in]     yaw         ヨー角(インデックス角).
    //! @param [in]     pitch       ピッチ角(インデックス角).
    //! @param [in]     roll        ロール角(インデックス角).
    //! @param [out]    result      回転行列.
    //--------------------------------------------------------------------------
    static void     CreateRotationYawPitchRollIdx( const u16 yaw, const u16 pitch, const u16 roll, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      ビュー行列を生成します.
    //!
    //! @param [in]     position    カメラ位置.
    //! @param [in]     target      注視点.
    //! @param [in]     upward      上向きベクトル.
    //! @return     ビュー行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateLookAt( const Vector3& position, const Vector3& target, const Vector3& upward );

    //--------------------------------------------------------------------------
    //! @brief      ビュー行列を生成します.
    //!
    //! @param [in]     position    カメラ位置.
    //! @param [in]     target      注視点.
    //! @param [in]     upward      上向きベクトル.
    //! @param [out]    result      ビュー行列.
    //--------------------------------------------------------------------------
    static void     CreateLookAt( const Vector3& position, const Vector3& target, const Vector3& upward, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      透視投影行列を生成します.
    //!
    //! @param [in]     width       ビューボリュームの幅.
    //! @param [in]     height      ビューボリュームの高さ.
    //! @param [in]     naerClip    近クリップ平面までの距離.
    //! @param [in]     farClip     遠クリップ平面までの距離.
    //! @return     透視投影行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreatePerspective( const f32 width, const f32 height, const f32 nearClip, const f32 farClip );

    //--------------------------------------------------------------------------
    //! @brief      透視投影行列を生成します.
    //!
    //! @param [in]     width       ビューボリュームの幅.
    //! @param [in]     height      ビューボリュームの高さ.
    //! @param [in]     nearClip    近クリップ平面までの距離.
    //! @param [in]     farClip     遠クリップ平面までの距離.
    //! @param [out]    result      透視投影行列.
    //--------------------------------------------------------------------------
    static void     CreatePerspective( const f32 width, const f32 height, const f32 nearClip, const f32 farClip, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      視野角に基づいて透視投影行列を生成します.
    //!
    //! @param [in]     fieldOfView     視野角(ラジアン).
    //! @param [in]     aspectRatio     アスペクト比.
    //! @param [in]     nearClip        近クリップ平面までの距離.
    //! @param [in]     farClip         遠クリップ平面までの距離.
    //! @return     透視投影行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreatePerspectiveFieldOfViewRad( const f32 fieldOfView, const f32 aspectRatio, const f32 nearClip, const f32 farClip );

    //--------------------------------------------------------------------------
    //! @brief      視野角に基づいて透視投影行列を生成します.
    //!
    //! @param [in]     fieldOfView     視野角(ラジアン).
    //! @param [in]     aspectRatio     アスペクト比.
    //! @param [in]     nearClip        近クリップ平面までの距離.
    //! @param [in]     farClip         遠クリップ平面までの距離.
    //! @param [out]    result          透視投影行列.
    //--------------------------------------------------------------------------
    static void     CreatePerspectiveFieldOfViewRad( const f32 fieldOfView, const f32 aspectRatio, const f32 nearClip, const f32 farClip, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      視野角に基づいて透視投影行列を生成します.
    //!
    //! @param [in]     fieldOfView     視野角(度).
    //! @param [in]     aspectRatio     アスペクト比.
    //! @param [in]     nearClip        近クリップ平面までの距離.
    //! @param [in]     farClip         遠クリップ平面までの距離.
    //! @return     透視投影行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreatePerspectiveFieldOfViewDeg( const f32 fieldOfView, const f32 aspectRatio, const f32 nearClip, const f32 farClip );

    //--------------------------------------------------------------------------
    //! @brief      視野角に基づいて透視投影行列を生成します.
    //!
    //! @param [in]     fieldOfView     視野角(度).
    //! @param [in]     aspectRatio     アスペクト比.
    //! @param [in]     nearClip        近クリップ平面までの距離.
    //! @param [in]     farClip         遠クリップ平面までの距離.
    //! @param [out]    result          透視投影行列.
    //--------------------------------------------------------------------------
    static void     CreatePerspectiveFieldOfViewDeg( const f32 fieldOfView, const f32 aspectRatio, const f32 nearClip, const f32 farClip, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      視野角に基づいて透視投影行列を生成します.
    //!
    //! @param [in]     fieldOfView     視野角(インデックス角).
    //! @param [in]     aspectRatio     アスペクト比.
    //! @param [in]     nearClip        近クリップ平面までの距離.
    //! @param [in]     farClip         遠クリップ平面までの距離.
    //! @retrun     透視投影行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreatePerspectiveFieldOfViewIdx( const u16 fieldOfView, const f32 aspectRatio, const f32 nearClip, const f32 farClip );

    //--------------------------------------------------------------------------
    //! @brief      視野角に基づいて透視投影行列を生成します.
    //!
    //! @param [in]     fieldOfView     視野角(インデックス角).
    //! @param [in]     aspectRatio     アスペクト比.
    //! @param [in]     nearClip        近クリップ平面までの距離.
    //! @param [in]     farClip         遠クリップ平面までの距離.
    //! @param [out]    result          透視投影行列.
    //--------------------------------------------------------------------------
    static void     CreatePerspectiveFieldOfViewIdx( const u16 fieldOfView, const f32 aspectRatio, const f32 nearClip, const f32 farClip, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      カスタマイズした透視投影行列を生成します.
    //!
    //! @param [in]     left        ビューボリュームの最小X値.
    //! @param [in]     right       ビューボリュームの最大X値.
    //! @param [in]     bottom      ビューボリュームの最小Y値.
    //! @param [in]     top         ビューボリュームの最大Y値.
    //! @param [in]     nearClip    近クリップ平面までの距離.
    //! @param [in]     farClip     遠クリップ平面までの距離.
    //! @return     透視投影行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreatePerspectiveOffcenter( const f32 left, const f32 right, const f32 bottom, const f32 top, const f32 nearClip, const f32 farClip );

    //--------------------------------------------------------------------------
    //! @brief      カスタマイズした透視投影行列を生成します.
    //!
    //! @param [in]     left        ビューボリュームの最小X値.
    //! @param [in]     right       ビューボリュームの最大X値.
    //! @param [in]     bottom      ビューボリュームの最小Y値.
    //! @param [in]     top         ビューボリュームの最大Y値.
    //! @param [in]     nearClip    近クリップ平面までの距離.
    //! @param [in]     farClip     遠クリップ平面までの距離.
    //! @param [out]    result      透視投影行列.
    //--------------------------------------------------------------------------
    static void     CreatePerspectiveOffcenter( const f32 left, const f32 right, const f32 bottom, const f32 top, const f32 nearClip, const f32 farClip, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      正射影行列を生成します.
    //!
    //! @param [in]     width       ビューボリュームの幅.
    //! @param [in]     height      ビューボリュームの高さ.
    //! @param [in]     nearClip    近クリップ平面までの距離.
    //! @param [in]     farClip     遠クリップ平面までの距離.
    //! @return     正射影行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateOrthographic( const f32 width, const f32 height, const f32 nearClip, const f32 farClip );

    //--------------------------------------------------------------------------
    //! @brief      正射影行列を生成します.
    //!
    //! @param [in]     width       ビューボリュームの幅.
    //! @param [in]     height      ビューボリュームの高さ.
    //! @param [in]     nearClip    近クリップ平面までの距離.
    //! @param [in]     farClip     遠クリップ平面までの距離.
    //! @param [out]    result      正射影行列.
    //--------------------------------------------------------------------------
    static void     CreateOrthographic( const f32 width, const f32 height, const f32 nearClip, const f32 farClip, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      カスタマイズした正射影行列を生成します.
    //!
    //! @param [in]     left        ビューボリュームの最小X値.
    //! @param [in]     right       ビューボリュームの最大X値.
    //! @param [in]     bottom      ビューボリュームの最小Y値.
    //! @param [in]     top         ビューボリュームの最大Y値.
    //! @param [in]     nearClip    近クリップ平面までの距離.
    //! @param [in]     farClip     遠クリップ平面までの距離.
    //! @return     正射影行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   CreateOrthographicOffcenter( const f32 left, const f32 right, const f32 bottom, const f32 top, const f32 nearClip, const f32 farClip );

    //--------------------------------------------------------------------------
    //! @brief      カスタマイズした正射影行列を生成します.
    //!
    //! @param [in]     left        ビューボリュームの最小X値.
    //! @param [in]     right       ビューボリュームの最大X値.
    //! @param [in]     bottom      ビューボリュームの最小Y値.
    //! @param [in]     top         ビューボリュームの最大Y値.
    //! @param [in]     nearClip    近クリップ平面までの距離.
    //! @param [in]     farClip     遠クリップ平面までの距離.
    //! @param [out]    result      正射影行列.
    //--------------------------------------------------------------------------
    static void     CreateOrthographicOffcenter( const f32 left, const f32 right, const f32 bottom, const f32 top, const f32 nearClip, const f32 farClip, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      2つの行列を線形補間します.
    //!
    //! @param [in]     a           入力行列.
    //! @param [in]     b           入力行列.
    //! @param [in]     amount      補間係数.
    //! @return     線形補間した行列を返却します.
    //--------------------------------------------------------------------------
    static Matrix   Lerp( const Matrix& a, const Matrix& b, const f32 amount );

    //--------------------------------------------------------------------------
    //! @brief      2つの行列を線形補間します.
    //!
    //! @param [in]     a           入力行列.
    //! @param [in]     b           入力行列.
    //! @param [in]     amount      補間係数.
    //! @param [out]    result      線形補間された行列.
    //--------------------------------------------------------------------------
    static void     Lerp( const Matrix& a, const Matrix& b, const f32 amount, Matrix& result );

    //--------------------------------------------------------------------------
    //! @brief      行列から平行移動量を取得します.
    //!
    //! @param [in]     value       平行移動量を求める行列.
    //! @return     平行移動量を返却します.
    //--------------------------------------------------------------------------
    static Vector3  GetTranslate( const Matrix& value );

    //--------------------------------------------------------------------------
    //! @brief      行列から平行移動量を取得します.
    //!
    //! @param [in]     value       平行移動量を求める行列.
    //! @param [out]    result      平行移動量.
    //--------------------------------------------------------------------------
    static void     GetTranslate( const Matrix& value, Vector3& result );

    //--------------------------------------------------------------------------
    //! @brief      行列から拡大・縮小量を取得します.
    //!
    //! @param [in]     value       拡大・縮小量を求める行列.
    //! @return     拡大・縮小量を返却します.
    //--------------------------------------------------------------------------
    static Vector3  GetScale( const Matrix& value );

    //--------------------------------------------------------------------------
    //! @brief      行列から拡大・縮小量を取得します.
    //!
    //! @param [in]     value       拡大・縮小量を求める行列.
    //! @param [out]    result      拡大・縮小量.
    //--------------------------------------------------------------------------
    static void     GetScale( const Matrix& value, Vector3& result );
};


////////////////////////////////////////////////////////////////////////////////
// Quaternion class
////////////////////////////////////////////////////////////////////////////////
class Quaternion : public _Vector4
{
    //==========================================================================
    // list of friend classes and methods.
    //==========================================================================

    //--------------------------------------------------------------------------
    //! @brief          乗算演算子です.
    //!
    //! @param [in]     scalar          乗算するスカラー値.
    //! @param [in]     value           乗算される四元数.
    //! @return         乗算結果を返却します.
    //--------------------------------------------------------------------------
    friend Quaternion operator * ( const f32 scalar, const Quaternion& value );

private:
    //==========================================================================
    // private variables.
    //==========================================================================
    /* NOTHING */

    //==========================================================================
    // private methods.
    //==========================================================================
    /* NOTHING */

protected:
    //==========================================================================
    // protected variables.
    //==========================================================================
    /* NOTHING */

    //==========================================================================
    // protected methods.
    //==========================================================================
    /* NOTHING */

public:
    //==========================================================================
    // public variables.
    //==========================================================================
    /* NOTHING */

    //==========================================================================
    // public methods.
    //==========================================================================

    //--------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //--------------------------------------------------------------------------
    Quaternion ();

    //--------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //!
    //! @param [in]     pValues     要素数4の配列.
    //--------------------------------------------------------------------------
    Quaternion ( const f32* pValues );

    //--------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //!
    //! @param [in]     nx          X成分.
    //! @param [in]     ny          Y成分.
    //! @param [in]     nz          Z成分.
    //! @param [in]     nw          W成分.
    //--------------------------------------------------------------------------
    Quaternion ( const f32 nx, const f32 ny, const f32 nz, const f32 nw );

    //--------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //! @param [in]     vector      四元数のベクトル要素.
    //! @param [in]     scalar      四元数の回転要素.
    //--------------------------------------------------------------------------
    Quaternion ( const Vector3& vector, const f32 scalar );

    //--------------------------------------------------------------------------
    //! @brief      コピーコンストラクタです.
    //!
    //! @param [in]     value       コピー元の値.
    //--------------------------------------------------------------------------
    Quaternion ( const Quaternion& value );

    //--------------------------------------------------------------------------
    //! @brief      デストラクタ.
    //--------------------------------------------------------------------------
    virtual ~Quaternion();

    //--------------------------------------------------------------------------
    //! @brief      f32*型へのキャストです.
    //!
    //! @return     最初の要素へのポインタを返却します.
    //--------------------------------------------------------------------------
    operator        f32* ();

    //--------------------------------------------------------------------------
    //! @brief      const f32*型へのキャストです.
    //!
    //! @return     最初の要素へのポインタを返却します.
    //--------------------------------------------------------------------------
    operator const  f32* () const;

    //--------------------------------------------------------------------------
    //! @brief      加算代入演算子です.
    //!
    //! @param [in]     value       加算する値.
    //! @return     加算結果を返却します.
    //--------------------------------------------------------------------------
    Quaternion&     operator += ( const Quaternion& value );

    //--------------------------------------------------------------------------
    //! @brief      減算代入演算子です.
    //!
    //! @param [in]     value       減算する値.
    //! @return     減算結果を返却します.
    //--------------------------------------------------------------------------
    Quaternion&     operator -= ( const Quaternion& value );

    //--------------------------------------------------------------------------
    //! @brief      乗算代入演算子です.
    //!
    //! @param [in]     value       乗算する値.
    //! @return     乗算結果を返却します.
    //--------------------------------------------------------------------------
    Quaternion&     operator *= ( const Quaternion& value );

    //--------------------------------------------------------------------------
    //! @brief      乗算代入演算子です.
    //!
    //! @param [in]     scalar      スカラー乗算する値.
    //! @return     スカラー乗算した結果を返却します.
    //--------------------------------------------------------------------------
    Quaternion&     operator *= ( const f32 scalar );

    //--------------------------------------------------------------------------
    //! @brief      除算代入演算子です.
    //!
    //! @param [in]     scalar      スカラー除算する値.
    //! @return     スカラー除算した結果を返却します.
    //--------------------------------------------------------------------------
    Quaternion&     operator /= ( const f32 scalar );

    //--------------------------------------------------------------------------
    //! @brief      正符号演算子です.
    //!
    //! @return     自分自身の値を返却します.
    //--------------------------------------------------------------------------
    Quaternion      operator +  () const;

    //--------------------------------------------------------------------------
    //! @brief      負符号演算子です.
    //!
    //! @return     各成分の符号を反転した結果を返却します.
    //--------------------------------------------------------------------------
    Quaternion      operator -  () const;

    //--------------------------------------------------------------------------
    //! @brief      加算演算子です.
    //!
    //! @param [in]     value       加算する値.
    //! @return     加算結果を返却します.
    //--------------------------------------------------------------------------
    Quaternion      operator +  ( const Quaternion& value ) const;

    //--------------------------------------------------------------------------
    //! @brief      減算演算子です.
    //!
    //! @param [in]     value       減算する値.
    //! @return     減算結果を返却します.
    //--------------------------------------------------------------------------
    Quaternion      operator -  ( const Quaternion& value ) const;

    //--------------------------------------------------------------------------
    //! @brief      乗算演算子です.
    //!
    //! @param [in]     value       乗算する値.
    //! @return     乗算結果を返却します.
    //--------------------------------------------------------------------------
    Quaternion      operator *  ( const Quaternion& value ) const;

    //--------------------------------------------------------------------------
    //! @brief      乗算演算子です.
    //!
    //! @param [in]     scalar      スカラー乗算する値.
    //! @return     スカラー乗算した結果を返却します.
    //--------------------------------------------------------------------------
    Quaternion      operator *  ( const f32 scalar ) const;

    //--------------------------------------------------------------------------
    //! @brief      除算演算子です.
    //!
    //! @param [in]     scalar      スカラー除算する値.
    //! @return     スカラー除算した結果を返却します.
    //--------------------------------------------------------------------------
    Quaternion      operator /  ( const f32 scalar ) const;

    //--------------------------------------------------------------------------
    //! @brief      代入演算子です.
    //!
    //! @param [in]     value       代入する値.
    //! @return     代入結果を返却します.
    //--------------------------------------------------------------------------
    Quaternion&     operator =  ( const Quaternion& value );

    //--------------------------------------------------------------------------
    //! @brief      等価比較演算子です.
    //!
    //! @param [in]     value       比較する値.
    //! @retval true    等価です.
    //! @retval false   非等価です.
    //--------------------------------------------------------------------------
    bool            operator == ( const Quaternion& value ) const;

    //--------------------------------------------------------------------------
    //! @brief      非等価比較演算子です.
    //!
    //! @param [in]     value       比較する値.
    //! @retval true    非等価です.
    //! @retval flase   等価です.
    //--------------------------------------------------------------------------
    bool            operator != ( const Quaternion& value ) const;

    //--------------------------------------------------------------------------
    //! @brief      四元数の長さを求めます.
    //!
    //! @return     四元数の長さを返却します.
    //--------------------------------------------------------------------------
    f32             Length          () const;

    //--------------------------------------------------------------------------
    //! @brief      四元数の長さの2乗値を求めます.
    //!
    //! @return     四元数の長さの2乗値を返却します.
    //--------------------------------------------------------------------------
    f32             LengthSq        () const;

    //--------------------------------------------------------------------------
    //! @brief      正規化した四元数を求めます.
    //!
    //! @return     正規化した四元数を求め，その結果を返却します.
    //--------------------------------------------------------------------------
    Quaternion      UnitVector      () const;

    //--------------------------------------------------------------------------
    //! @brief      四元数の共役を求めます.
    //!
    //! @return     四元数の共役化した結果を返却します.
    //--------------------------------------------------------------------------
    Quaternion&     Conjugate       ();

    //--------------------------------------------------------------------------
    //! @brief      単位四元数化します.
    //!
    //! @return     単位四元数化した結果を返却します.
    //--------------------------------------------------------------------------
    Quaternion&     Identity        ();

    //--------------------------------------------------------------------------
    //! @brief      逆四元数化します.
    //
    //! @return     逆四元数化した結果を返却します.
    //--------------------------------------------------------------------------
    Quaternion&      Inverse         ();

    //--------------------------------------------------------------------------
    //! @brief      四元数を正規化します.
    //!
    //! @return     正規化した四元数を返却します.
    //--------------------------------------------------------------------------
    Quaternion&     Normalize       ();

    //--------------------------------------------------------------------------
    //! @brief      零除算を考慮して，四元数を正規化を試みます.
    //!
    //! @param [in]     set         長さが0の場合に設定する四元数.
    //! @return     長さが0でなければ正規化した四元数，0であればsetを返却します.
    //--------------------------------------------------------------------------
    Quaternion&     SafeNormalize   ( const Quaternion& set );

    //--------------------------------------------------------------------------
    //! @brief     四元数を連結します.
    //!
    //! @param [in]     value       連結する四元数.
    //! @return     最初の回転とvalueによる回転を表す四元数を返却します.
    //--------------------------------------------------------------------------
    Quaternion&     Concatenate     ( const Quaternion& value );

    //--------------------------------------------------------------------------
    //! @brief      内積を求めます.
    //!
    //! @param [in]     value       入力四元数.
    //! @return     内積を返却します.
    //--------------------------------------------------------------------------
    f32             Dot             ( const Quaternion& value ) const;


    //--------------------------------------------------------------------------
    //! @brief      単位四元数にします.
    //!
    //! @param [in/out]     value   単位四元数化する値
    //! @return     単位四元数にした結果を返却します.
    //--------------------------------------------------------------------------
    static Quaternion   Identity( Quaternion&  value );

    //--------------------------------------------------------------------------
    //! @brief      単位四元数かどうかチェックします.
    //!
    //! @param [in]     value       チェックする値.
    //! @retval true    単位四元数です.
    //! @retval false   非単位四元数です.
    //--------------------------------------------------------------------------
    static bool         IsIdentity( const Quaternion& value );

    //--------------------------------------------------------------------------
    //! @brief      四元数同士の乗算を行います.
    //!
    //! @param [in]     a           入力四元数.
    //! @param [in]     b           入力四元数.
    //! @return     乗算結果を返却します.
    //--------------------------------------------------------------------------
    static Quaternion   Multiply( const Quaternion& a, const Quaternion& b );

    //--------------------------------------------------------------------------
    //! @brief      四元数同士の乗算を行います.
    //!
    //! @param [in]     a           入力四元数.
    //! @param [in]     b           入力四元数.
    //! @param [out]    result      乗算結果.
    //--------------------------------------------------------------------------
    static void         Multiply( const Quaternion& a, const Quaternion& b, Quaternion& result );

    //--------------------------------------------------------------------------
    //! @brief      四元数の内積を求めます.
    //!
    //! @param [in]     a           入力四元数.
    //! @param [in]     b           入力四元数.
    //! @return     四元数の内積を返却します.
    //--------------------------------------------------------------------------
    static f32          Dot( const Quaternion& a, const Quaternion& b );

    //--------------------------------------------------------------------------
    //! @brief      四元数の内積を求めます.
    //!
    //! @param [in]     a           入力四元数.
    //! @param [in]     b           入力四元数.
    //! @param [out]    result      四元数の内積.
    //--------------------------------------------------------------------------
    static void         Dot( const Quaternion& a, const Quaternion& b, f32& result );

    //--------------------------------------------------------------------------
    //! @brief      四元数の共役を求めます.
    //!
    //! @param [in]     value       共役を求めたい四元数.
    //! @return     四元数の共役を返却します.
    //--------------------------------------------------------------------------
    static Quaternion   Conjugate( const Quaternion& value );

    //--------------------------------------------------------------------------
    //! @brief      四元数の共役を求めます.
    //!
    //! @param [in]     value       共役を求めたい四元数.
    //! @param [out]    result      四元数の共役.
    //--------------------------------------------------------------------------
    static void         Conjugate( const Quaternion& value, Quaternion& result );

    //--------------------------------------------------------------------------
    //! @brief      2つの四元数を連結します.
    //!
    //! @parma [in]     a           入力四元数.
    //! @param [in]     b           入力四元数.
    //! @return     aによる回転とbによる回転を表す四元数を返却します.
    //--------------------------------------------------------------------------
    static Quaternion   Concatenate( const Quaternion& a, const Quaternion& b );

    //--------------------------------------------------------------------------
    //! @brief      2つの四元数を連結します.
    //!
    //! @param [in]     a           入力四元数.
    //! @param [in]     b           入力四元数.
    //! @param [out]    result      aによる回転とbによる回転を表す四元数.
    //--------------------------------------------------------------------------
    static void         Concatenate( const Quaternion& a, const Quaternion& b, Quaternion& result );

    //--------------------------------------------------------------------------
    //! @brief      四元数を正規化します.
    //!
    //! @param [in]     value       入力四元数.
    //! @return     四元数を正規化した結果を返却します.
    //--------------------------------------------------------------------------
    static Quaternion   Normalize( const Quaternion& value );

    //--------------------------------------------------------------------------
    //! @brief      四元数を正規化します.
    //!
    //! @param [in]     value       入力四元数.
    //! @param [out]    result      正規化した四元数.
    //--------------------------------------------------------------------------
    static void         Normalize( const Quaternion& value, Quaternion& result );

    //--------------------------------------------------------------------------
    //! @brief      零除算を考慮して正規化を試みます.
    //!
    //! @param [in]     value       入力四元数.
    //! @param [in]     set         長さが0の場合に設定する四元数.
    //! @return     長さが0でなければ正規化した四元数、長さが0であればsetを返却します.
    //--------------------------------------------------------------------------
    static Quaternion   SafeNormalize( const Quaternion& value, const Quaternion& set );

    //--------------------------------------------------------------------------
    //! @brief      零除算を考慮して正規化を試みます.
    //!
    //! @param [in]     value       入力四元数.
    //! @param [in]     set         長さが0の場合に設定する四元数.
    //! @param [out]    result      長さが0でなければ正規化した四元数、長さが0であればset.
    //--------------------------------------------------------------------------
    static void         SafeNormalize( const Quaternion& value, const Quaternion& set, Quaternion& result );

    //--------------------------------------------------------------------------
    //! @brief      逆四元数を求めます.
    //!
    //! @param [in]     value       入力四元数.
    //! @return     逆四元数を返却します.
    //--------------------------------------------------------------------------
    static Quaternion   Inverse( const Quaternion& value );

    //--------------------------------------------------------------------------
    //! @brief      逆四元数を求めます.
    //!
    //! @param [in]     value       入力四元数.
    //! @param [out]    result      逆四元数.
    //--------------------------------------------------------------------------
    static void         Inverse( const Quaternion& value, Quaternion& result );

    //--------------------------------------------------------------------------
    //! @brief      ヨー・ピッチ・ロール角から四元数を生成します.
    //!
    //! @param [in]     yaw         ヨー角(ラジアン).
    //! @param [in]     pitch       ピッチ角(ラジアン).
    //! @param [in]     roll        ロール角(ラジアン).
    //! @return     指定されたヨー・ピッチ・ロール角から生成された四元数を返却します.
    //--------------------------------------------------------------------------
    static Quaternion   CreateFromYawPitchRollRad( const f32 yaw, const f32 pitch, const f32 roll );

    //--------------------------------------------------------------------------
    //! @brief      ヨー・ピッチ・ロール角から四元数を生成します.
    //!
    //! @param [in]     yaw         ヨー角(ラジアン).
    //! @param [in]     pitch       ピッチ角(ラジアン).
    //! @param [in]     roll        ロール角(ラジアン).
    //! @param [out]    result      指定されたヨー・ピッチ・ロール角から生成された四元数.
    //--------------------------------------------------------------------------
    static void         CreateFromYawPitchRollRad( const f32 yaw, const f32 pitch, const f32 roll, Quaternion& result );

    //--------------------------------------------------------------------------
    //! @brief      ヨー・ピッチ・ロール角から四元数を生成します.
    //!
    //! @param [in]     yaw         ヨー角(度).
    //! @param [in]     pitch       ピッチ角(度).
    //! @param [in]     roll        ロール角(度).
    //! @return     指定されたヨー・ピッチ・ロール角から生成された四元数を返却します.
    //--------------------------------------------------------------------------
    static Quaternion   CreateFromYawPitchRollDeg( const f32 yaw, const f32 pitch, const f32 roll );

    //--------------------------------------------------------------------------
    //! @brief      ヨー・ピッチ・ロール角から四元数を生成します.
    //!
    //! @param [in]     yaw         ヨー角(度).
    //! @param [in]     pitch       ピッチ角(度).
    //! @param [in]     roll        ロール角(度).
    //! @param [out]    result      指定されたヨー・ピッチ・ロール角から生成された四元数.
    //--------------------------------------------------------------------------
    static void         CreateFromYawPitchRollDeg( const f32 yaw, const f32 pitch, const f32 roll, Quaternion& result );

    //--------------------------------------------------------------------------
    //! @brief      ヨー・ピッチ・ロール角から四元数を生成します.
    //!
    //! @param [in]     yaw         ヨー角(インデックス角).
    //! @param [in]     pitch       ピッチ角(インデックス角).
    //! @param [in]     roll        ロール角(インデックス角).
    //! @return     指定されたヨー・ピッチ・ロール角から生成された四元数を返却します.
    //--------------------------------------------------------------------------
    static Quaternion   CreateFromYawPitchRollIdx( const u16 yaw, const u16 pitch, const u16 roll );

    //--------------------------------------------------------------------------
    //! @brief      ヨー・ピッチ・ロール角から四元数を生成します.
    //!
    //! @param [in]     yaw         ヨー角(インデックス角).
    //! @param [in]     pitch       ピッチ角(インデックス角).
    //! @param [in]     roll        ロール角(インデックス角).
    //! @param [out]    result      指定されたヨー・ピッチ・ロール角から生成された四元数.
    //--------------------------------------------------------------------------
    static void         CreateFromYawPitchRollIdx( const u16 yaw, const u16 pitch, const u16 roll, Quaternion& result );

    //--------------------------------------------------------------------------
    //! @brief      指定された軸と角度から四元数を生成します.
    //!
    //! @param [in]     axis        回転軸.
    //! @param [in]     rad         回転角(ラジアン).
    //! @return     指定された軸と角度から生成された四元数を返却します.
    //--------------------------------------------------------------------------
    static Quaternion   CreateFromAxisAngleRad( const Vector3& axis, const f32 rad );

    //--------------------------------------------------------------------------
    //! @brief      指定された軸と角度から四元数を生成します.
    //!
    //! @param [in]     axis        回転軸.
    //! @param [in]     rad         回転角(ラジアン).
    //! @param [out]    result      指定された軸と角度から生成された四元数.
    //--------------------------------------------------------------------------
    static void         CreateFromAxisAngleRad( const Vector3& axis, const f32 rad, Quaternion& result );

    //--------------------------------------------------------------------------
    //! @brief      指定された軸と角度から四元数を生成します.
    //!
    //! @param [in]     axis        回転軸.
    //! @param [in]     deg         回転角(度).
    //! @return     指定された軸と角度から生成された四元数を返却します.
    //--------------------------------------------------------------------------
    static Quaternion   CreateFromAxisAngleDeg( const Vector3& axis, const f32 deg );

    //--------------------------------------------------------------------------
    //! @brief      指定された軸と角度から四元数を生成します.
    //!
    //! @param [in]     axis        回転軸.
    //! @param [in]     deg         回転角(度).
    //! @param [out]    result      指定された軸と角度から生成された四元数.
    //--------------------------------------------------------------------------
    static void         CreateFromAxisAngleDeg( const Vector3& axis, const f32 deg, Quaternion& result );

    //--------------------------------------------------------------------------
    //! @brief      指定された軸と角度から四元数を生成します.
    //!
    //! @param [in]     axis        回転軸.
    //! @param [in]     idx         回転角(インデックス角).
    //! @return     指定された軸と角度から生成された四元数を返却します.
    //--------------------------------------------------------------------------
    static Quaternion   CreateFromAxisAngleIdx( const Vector3& axis, const u16 idx );

    //--------------------------------------------------------------------------
    //! @brief      指定された軸と角度から四元数を生成します.
    //!
    //! @param [in]     axis        回転軸.
    //! @param [in]     idx         回転角(インデックス角).
    //! @param [out]    result      指定された軸と角度から生成された四元数.
    //--------------------------------------------------------------------------
    static void         CreateFromAxisAngleIdx( const Vector3& axis, const u16 idx, Quaternion& result );

    //--------------------------------------------------------------------------
    //! @brief      回転行列から四元数を生成します.
    //!
    //! @param [in]     value       回転行列.
    //! @return     回転行列から生成した四元数を返却します.
    //--------------------------------------------------------------------------
    static Quaternion   CreateFromRotationMatrix( const Matrix& value );

    //--------------------------------------------------------------------------
    //! @brief      回転行列から四元数を生成します.
    //!
    //! @param [in]     value       回転行列.
    //! @param [out]    result      回転行列から生成した四元数を返却します.
    //--------------------------------------------------------------------------
    static void         CreateFromRotationMatrix( const Matrix& value, Quaternion& result );

    //--------------------------------------------------------------------------
    //! @brief      球面線形補間を行います.
    //!
    //! @param [in]     a           入力四元数.
    //! @param [in]     b           入力四元数.
    //! @param [in]     amount      補間係数.
    //! @return     球面線形補間した結果を返却します.
    //--------------------------------------------------------------------------
    static Quaternion   Slerp( const Quaternion& a, const Quaternion& b, const f32 amount );

    //--------------------------------------------------------------------------
    //! @brief      球面線形補間を行います.
    //!
    //! @param [in]     a           入力四元数.
    //! @param [in]     b           入力四元数.
    //! @param [in]     amount      補間係数.
    //! @param [out]    result      球面線形補完した結果.
    //--------------------------------------------------------------------------
    static void         Slerp( const Quaternion& a, const Quaternion& b, const f32 amount, Quaternion& result );

    //--------------------------------------------------------------------------
    //! @brief      球面四角形補間を行います.
    //!
    //! @param [in]     a           入力四元数.
    //! @param [in]     b           入力四元数.
    //! @param [in]     c           入力四元数.
    //! @param [in]     d           入力四元数.
    //! @param [in]     amount      補間係数.
    //! @return     球面四角形補間した結果を返却します.
    //--------------------------------------------------------------------------
    static Quaternion   Squad( const Quaternion& a, const Quaternion& b, const Quaternion& c, const Quaternion& d, const f32 amount );

    //--------------------------------------------------------------------------
    //! @brief      球面四角形補間を行います.
    //!
    //! @param [in]     a           入力四元数.
    //! @param [in]     b           入力四元数.
    //! @param [in]     c           入力四元数.
    //! @param [in]     d           入力四元数.
    //! @param [in]     amount      補間係数.
    //! @param [out]    result      球面四角形補間した結果.
    //--------------------------------------------------------------------------
    static void         Squad( const Quaternion& a, const Quaternion& b, const Quaternion& c, const Quaternion& d, const f32 amount, Quaternion& result );
};


} // namespace asdx


///////////////////////////////////////////////////////////////////////////////
// Inline Files
///////////////////////////////////////////////////////////////////////////////
#include "asdxMath.inl"


#endif//__ASDX_MATH_H__
