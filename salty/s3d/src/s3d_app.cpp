//------------------------------------------------------------------------------
// File : s3d_app.cpp
// Desc : Salty Application.
// Copyright(c) Project Asura. All right reserved.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Includes
//------------------------------------------------------------------------------
#include <s3d_app.h>
#include <s3d_target.h>
#include <s3d_vector3.h>
#include <s3d_color3.h>
#include <s3d_matrix.h>
#include <s3d_onb.h>
#include <s3d_bmp.h>
#include <s3d_shape.h>
#include <s3d_triangle.h>
#include <s3d_sphere.h>
#include <s3d_rand.h>
#include <vector>


namespace s3d {

////////////////////////////////////////////////////////////////////////////////
// App::Impl class
////////////////////////////////////////////////////////////////////////////////
class App::Impl
{
    //==========================================================================
    // list of friend classes and methods.
    //==========================================================================
    /* NOTHING */

private:
    //==========================================================================
    // private variables.
    //==========================================================================
    u32                     m_Width;
    u32                     m_Height;
    u32                     m_NumSamples;
    RenderTarget            m_RT;
    std::vector<IShape*>    m_Shapes;
    Random                  m_Random;

    //===========================================================================
    // private methods.
    //===========================================================================
    /* NOTHING */

protected:
    //===========================================================================
    // protected variables.
    //===========================================================================

    //===========================================================================
    // protected methods.
    //===========================================================================
    void Trace();
    void Shade();

    void PathTrace();


    bool Init();
    void Term();

public:
    //============================================================================
    // public variables.
    //============================================================================
    /* NOTHING */

    //============================================================================
    // public methods.
    //============================================================================
    Impl()
    {
    }

    ~Impl()
    {
    }

    void Run();
};


//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
bool App::Impl::Init()
{
    m_Width      = 200;
    m_Height     = 150;
    m_NumSamples = 512;

    m_Random.SetSeed( 314159265 );

    m_RT.Init( 200, 150 );

    return false;
}

//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
void App::Impl::Term()
{
    SaveToBMP( "FinalResult.bmp", m_RT.GetWidth(), m_RT.GetHeight(), m_RT.GetFrameBuffer() );
    m_RT.Term();

    m_Shapes.clear();
}

//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
void App::Impl::PathTrace()
{
    for( u32 i=0; i<m_Height; ++i )
    {
        for( u32 j=0; j<m_Width; ++j )
        {
        }
    }
}

//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
void App::Impl::Run()
{
    if ( Init() )
    {
        PathTrace();
    }

    Term();
}


///////////////////////////////////////////////////////////////////////////////
// App class
///////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
//      コンストラクタです.
//-----------------------------------------------------------------------------
App::App()
{
    m_pImpl = new App::Impl();
}

//-----------------------------------------------------------------------------
//      デストラクタです.
//-----------------------------------------------------------------------------
App::~App()
{
    delete m_pImpl;
}

//-----------------------------------------------------------------------------
//      アプリケーションを実行します.
//-----------------------------------------------------------------------------
void App::Run()
{
    m_pImpl->Run();
}





}// namespace s3d