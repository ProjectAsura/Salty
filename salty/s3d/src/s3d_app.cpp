//------------------------------------------------------------------------------
// File : s3d_app.cpp
// Desc : Salty Application.
// Copyright(c) Project Asura. All right reserved.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Includes
//------------------------------------------------------------------------------
#include <s3d_app.h>
#include <s3d_target.h>
#include <s3d_vector3.h>
#include <s3d_color3.h>
#include <s3d_matrix.h>
#include <s3d_onb.h>
#include <s3d_bmp.h>
#include <s3d_shape.h>
#include <s3d_triangle.h>
#include <s3d_sphere.h>
#include <s3d_quad.h>
#include <s3d_rand.h>
#include <s3d_camera.h>
#include <s3d_material.h>
#include <vector>



namespace /* anonymous */ {

static const f64 D_PI      = 3.1415926535897932384626433832795;
static const f64 D_PIDIV4  = 0.78539816339744830961566084581988;

} // namespace /* anonymous */


namespace s3d {

////////////////////////////////////////////////////////////////////////////////
// App::Impl class
////////////////////////////////////////////////////////////////////////////////
class App::Impl
{
    //==========================================================================
    // list of friend classes and methods.
    //==========================================================================
    /* NOTHING */

private:
    //==========================================================================
    // private variables.
    //==========================================================================
    u32                     m_Width;
    u32                     m_Height;
    u32                     m_NumSamples;
    RenderTarget            m_RT;
    std::vector<IShape*>    m_Shapes;
    std::vector<IMaterial*> m_Materials;
    Random                  m_Random;
    Camera                  m_Camera;

    //===========================================================================
    // private methods.
    //===========================================================================
    /* NOTHING */

protected:
    //===========================================================================
    // protected variables.
    //===========================================================================

    //===========================================================================
    // protected methods.
    //===========================================================================
    Color3 Trace( const Ray& );
    Color3 Shade();

    void PathTrace();


    bool Init();
    void Term();

public:
    //============================================================================
    // public variables.
    //============================================================================
    /* NOTHING */

    //============================================================================
    // public methods.
    //============================================================================
    Impl()
    {
    }

    ~Impl()
    {
    }

    void Run();
};


//-----------------------------------------------------------------------------
//      初期化処理です.
//-----------------------------------------------------------------------------
bool App::Impl::Init()
{
    m_Width      = 1280;
    m_Height     = 720;
    m_NumSamples = 512;

    // 乱数の種を設定.
    m_Random.SetSeed( 314159265 );

    // レンダーターゲットを初期化.
    m_RT.Init( m_Width, m_Height );

    // アスペクト比を算出.
    f64 aspectRatio = static_cast<f64>( m_Width ) / static_cast<f64>( m_Height );

    // カメラ更新.
    m_Camera.Update( 
        Vector3( 0.0, 0.0, -250.0 ),
        Vector3( 0.0, 0.0, 0.0 ),
        Vector3( 0.0, 1.0, 0.0 ),
        D_PIDIV4, 
        aspectRatio,
        1.0,
        10000.0 );

    m_Materials.push_back( new Matte( Color3( 1.0, 1.0, 0.0 ) ) );
    //// シェイプリストに追加.
    //m_Shapes.push_back( new Sphere( Vector3( 1e5 + 1, 40.8,  81.6    ), 1e5,  Color3( 1.0,  0.15, 0.15 ) ) );
    //m_Shapes.push_back( new Sphere( Vector3( -1e5+99, 40.8,  81.6    ), 1e5,  Color3( 0.15, 0.15, 1.0  ) ) );
    //m_Shapes.push_back( new Sphere( Vector3( 50,      40.8,  1e5     ), 1e5,  Color3( 0.15, 1.0,  0.15 ) ) );
    //m_Shapes.push_back( new Sphere( Vector3( 50,      40.8, -1e5+250 ), 1e5,  Color3( 0.0,  0.0,  0.15 ) ) );
    //m_Shapes.push_back( new Sphere( Vector3( 50,      1e5,  81.6     ), 1e5,  Color3( 1.0,  1.0,  0.15 ) ) );
    //m_Shapes.push_back( new Sphere( Vector3( 50, -1e5+81.6, 81.6     ), 1e5,  Color3( 1.0, 0.15,  1.0  ) ) );
    //m_Shapes.push_back( new Sphere( Vector3( 0,      0.0, 0.0       ), 16.5, Color3( 1.0, 1.0,   1.0  ) ) );
    //m_Shapes.push_back( new Sphere( Vector3( 73,      16.5, 78       ), 16.5, Color3( 1.0, 1.0,   1.0  ) ) );
    //m_Shapes.push_back( new Sphere( Vector3( 50.0,    75.0, 81.6     ), 5.0,  Color3( 1.0, 1.0,   1.0  ) ) );
    //m_Shapes.push_back( new Triangle( 
    //    Vector3( -20.0, -20.0, 0.0 ),
    //    Vector3( 0.0, 20.0, 0.0 ),
    //    Vector3( 20.0, -20.0, 0.0 ),
    //    Color3( 0.0, 0.0, 1.0 ) ) );
    m_Shapes.push_back( new Quad(
        Vector3( -20.0, -20.0, 0.0 ),
        Vector3( -20.0, 20.0, 0.0 ),
        Vector3( 20.0, 20.0, 0.0 ),
        Vector3( 20.0, -20.0, 0.0 ),
        m_Materials[0] ) );

    return true;
}

//-----------------------------------------------------------------------------
//      終了処理です.
//-----------------------------------------------------------------------------
void App::Impl::Term()
{
    // 最終結果をBMPファイルに出力.
    SaveToBMP( "FinalResult.bmp", m_RT.GetWidth(), m_RT.GetHeight(), m_RT.GetFrameBuffer() );

    // レンダーターゲットの終了処理.
    m_RT.Term();

    // シェイプリストのクリア.
    m_Shapes.clear();
}

//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
Color3 App::Impl::Trace( const Ray& ray )
{
    ShadeRec record;
    for( u32 i=0; i<m_Shapes.size(); ++i )
    {
        if ( m_Shapes[i]->IsHit( ray, 0.0001, 10000.0, record ) )
        {
            Vector3 dir;
            Color3 result = record.pMaterial->Shade( ray.GetDir(), record.normal, dir );
            return result;
        }
    }

    return Color3( 0.0, 0.0, 0.0 );
}

//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
Color3 App::Impl::Shade()
{
    return Color3( 0.0, 1.0, 0.0 );
}

//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
void App::Impl::PathTrace()
{
    for( u32 i=0; i<m_Height; ++i )
    {
        for( u32 j=0; j<m_Width; ++j )
        {
            const f64 dx = 0.0;
            const f64 dy = 0.0;

            const f64 x = 2.0 * ( static_cast<f64>( j ) + dx ) / m_Width  - 1.0;
            const f64 y = 2.0 * ( static_cast<f64>( i ) + dy ) / m_Height - 1.0;

            Ray ray = m_Camera.GetRay( x, y );
            Color3 color = Trace( ray );

            m_RT.SetPixel( j, i, color );
        }
    }
}

//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
void App::Impl::Run()
{
    if ( Init() )
    {
        PathTrace();
    }

    Term();
}


///////////////////////////////////////////////////////////////////////////////
// App class
///////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
//      コンストラクタです.
//-----------------------------------------------------------------------------
App::App()
{
    m_pImpl = new App::Impl();
}

//-----------------------------------------------------------------------------
//      デストラクタです.
//-----------------------------------------------------------------------------
App::~App()
{
    delete m_pImpl;
}

//-----------------------------------------------------------------------------
//      アプリケーションを実行します.
//-----------------------------------------------------------------------------
void App::Run()
{
    m_pImpl->Run();
}





}// namespace s3d