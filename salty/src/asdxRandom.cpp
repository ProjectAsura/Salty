//-------------------------------------------------------------------------------
// File : asdxRandom.cpp
// Desc : Random Number Generater Moudle
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------
#include <asdxRandom.h>


namespace asdx {

////////////////////////////////////////////////////////////////////////////////
// Random class
////////////////////////////////////////////////////////////////////////////////

//------------------------------------------------------------------------------
///<summary>
///コンストラクタです.
///</summary>
//------------------------------------------------------------------------------
Random::Random( s32 seed )
{
    SetSeed( seed );
}

//------------------------------------------------------------------------------
///<summary>コピーコンストラクタです.</summary>
///<param name="random">コピー元インスタンス</param>
//------------------------------------------------------------------------------
Random::Random( const Random& random )
{
    m_X = random.m_X;
    m_Y = random.m_Y;
    m_Z = random.m_Z;
    m_W = random.m_W;
}

//------------------------------------------------------------------------------
///<summary>デストラクタです.</summary>
//------------------------------------------------------------------------------
Random::~Random()
{
    /* DO_NOTHING */
}

//------------------------------------------------------------------------------
///<summary>ランダム種を設定します.</summary>
///<param name="seed">設定する種.</param>
//------------------------------------------------------------------------------
void Random::SetSeed( s32 seed )
{
    m_X = 123456789;
    m_Y = 362436069;
    m_Z = 521288629;
    m_W = ( seed <= 0 ) ? 88675123 : seed;
}

//------------------------------------------------------------------------------
///<summary>乱数をs32型として取得します.</summary>
///<return>-0x80000000から0x7fffffffまでの範囲で乱数を返却します.</return>
//------------------------------------------------------------------------------
s32 Random::GetAsS32()
{
    u32 t = m_X ^ ( m_X << 11 );
    m_X = m_Y;
    m_Y = m_Z;
    m_W = ( m_W ^ ( m_W >> 19 ) ) ^ ( t ^ ( t >> 8 ) );
    return static_cast< s32 >( m_W );
}

//------------------------------------------------------------------------------
///<summary>指定された値範囲までの乱数をs32型として取得します.</summary>
///<return>1からaまでの範囲で乱数を返却します.</return>
//------------------------------------------------------------------------------
s32 Random::GetAsS32( s32 a )
{
    // 符号ビット切り捨て.
    s32 x = GetAsS32() & 0x7fffffff;
    x %= a;
    return x;
}

//------------------------------------------------------------------------------
///<summary>指定された値範囲で乱数をs32型として取得します.</summary>
///<return>aからb-1までの範囲で乱数を返却します.</return>
//------------------------------------------------------------------------------
s32 Random::GetAsS32( s32 a, s32 b )
{
    s32 x = GetAsS32() & 0x7fffffff;
    x %= ( b - a );
    x += a;
    return x;
}

//------------------------------------------------------------------------------
///<summary>乱数をf32型として取得します.</summary>
///<return>0.0fから1.0fまでの範囲で乱数を返却します.</return>
//------------------------------------------------------------------------------
f32 Random::GetAsF32()
{
    s32 x = GetAsS32();
    return static_cast< f32 >( ( x + 1.0f ) / ( 4294967296.0f + 2.0f ) );
}

//------------------------------------------------------------------------------
///<summary>指定された値範囲までの乱数をf32型として取得します.</summary>
///<param name="a">最大値</param>
///<return>0.0fからaまでの範囲で乱数を返却します.</return>
//------------------------------------------------------------------------------
f32 Random::GetAsF32( f32 a )
{
    f32 x = GetAsF32();
    x *= a;
    return x;
}

//------------------------------------------------------------------------------
///<summary>指定された値範囲の乱数をf32型として取得します.</summary>
///<param name="a">最小値.</param>
///<param name="b">最大値.</param>
///<return>aからbまでの範囲で乱数を返却します.</return>
//------------------------------------------------------------------------------
f32 Random::GetAsF32( f32 a, f32 b )
{
    f32 x = GetAsF32();
    x *= ( b - a );
    x += a;
    return x;
}

//------------------------------------------------------------------------------
///<summary>乱数をf64型として取得します.</summary>
///<return>0.0から1.0までの範囲で乱数を返却します.</return>
//------------------------------------------------------------------------------
f64 Random::GetAsF64()
{
    s32 x = GetAsS32();
    return static_cast< f64 >( ( x + 1.0 ) / ( 4294967296.0 + 2.0 ) );
}

//------------------------------------------------------------------------------
///<summary>指定された値範囲までの乱数をf64型として取得します.</summary>
///<param name="a">最大値</param>
///<return>0.0からaまでの範囲で乱数を返却します.</return>
//------------------------------------------------------------------------------
f64 Random::GetAsF64( f64 a )
{
    f64 x = GetAsF64();
    x *= a;
    return x;
}

//------------------------------------------------------------------------------
///<summary>指定された値範囲で乱数をf64型として取得します.</summary>
///<param name="a">最小値.</param>
///<param name="b">最大値.</param>
///<return>aからbまでの範囲で乱数を返却します.</return>
//------------------------------------------------------------------------------
f64 Random::GetAsF64( f64 a, f64 b )
{
    f64 x = GetAsF64();
    x *= ( b - a );
    x *= a;
    return x;
}

//------------------------------------------------------------------------------
///<summary>代入演算子です.</summary>
///<param name="random">代入する値</param>
///<return>代入した結果を参照として返却します.</return>
//------------------------------------------------------------------------------
Random& Random::operator = ( const Random& random )
{
    m_X = random.m_X;
    m_Y = random.m_Y;
    m_Z = random.m_Z;
    m_W = random.m_W;
    return (*this);
}

//------------------------------------------------------------------------------
///<summary>等価演算子です.</summary>
///<param name="random">比較する値</param>
///<return>等価である場合にはtrueを返却します.</return>
//------------------------------------------------------------------------------
bool Random::operator == ( const Random& random ) const
{
    return ( this == &random );
}

//------------------------------------------------------------------------------
///<summary>非等価演算子です.</summary>
///<param name="random">比較する値</param>
///<return>非等価である場合にはtrueを返却します.</return>
//------------------------------------------------------------------------------
bool Random::operator != ( const Random& random ) const
{
    return  ( this != &random );
}



} // namespace asdx