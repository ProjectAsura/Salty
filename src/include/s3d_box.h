//----------------------------------------------------------------------------------
// File : s3d_box.h
// Desc : Bounding Box Module.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------------

#ifndef __S3D_BOX_H__
#define __S3D_BOX_H__

//------------------------------------------------------------------------------------
// Includes
//------------------------------------------------------------------------------------
#include <s3d_typedef.h>
#include <s3d_math.h>

#undef min
#undef max


namespace s3d {

/////////////////////////////////////////////////////////////////////////////////////
// BoundingBox structure
/////////////////////////////////////////////////////////////////////////////////////
struct BoundingBox
{
public:
    Vector3 min;        //!< 最小値です.
    Vector3 max;        //!< 最大値です.

    //-------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------------
    BoundingBox();

    //-------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //-------------------------------------------------------------------------------
    BoundingBox( const Vector3& );

    //-------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //-------------------------------------------------------------------------------
    BoundingBox( const Vector3&, const Vector3& );

    //-------------------------------------------------------------------------------
    //! @brief      コピーコンストラクタです.
    //-------------------------------------------------------------------------------
    BoundingBox( const BoundingBox& );

    //-------------------------------------------------------------------------------
    //! @brief      交差判定を行います.
    //-------------------------------------------------------------------------------
    bool IsHit( const Ray& ) const;

    //-------------------------------------------------------------------------------
    //! @brief      2つのバウンディングボックスをマージします.
    //-------------------------------------------------------------------------------
    static BoundingBox Merge( const BoundingBox&, const BoundingBox& );

    //-------------------------------------------------------------------------------
    //! @brief      バウンディングボックスと点をマージします.
    //-------------------------------------------------------------------------------
    static BoundingBox Merge( const BoundingBox&, const Vector3& );
};


/////////////////////////////////////////////////////////////////////////////////////
// BoundingBox4 structure
/////////////////////////////////////////////////////////////////////////////////////
struct BoundingBox4
{
public:
    b128 value[2][3];       // 最大・最小値です( 0:min, 1:max ).

    //--------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //--------------------------------------------------------------------------------
    BoundingBox4();

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    BoundingBox4
    (
        const BoundingBox& box0
    );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    BoundingBox4
    (
        const BoundingBox& box0,
        const BoundingBox& box1
    );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    BoundingBox4
    (
        const BoundingBox& box0,
        const BoundingBox& box1,
        const BoundingBox& box2
    );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    BoundingBox4
    (
        const BoundingBox& box0,
        const BoundingBox& box1,
        const BoundingBox& box2,
        const BoundingBox& box3
    );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    BoundingBox4( const BoundingBox* pBoxes );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    BoundingBox4
    (
        const b128& miniX,
        const b128& miniY,
        const b128& miniZ,

        const b128& maxiX,
        const b128& maxiY,
        const b128& maxiZ
    );

    //--------------------------------------------------------------------------------
    //! @brief      交差判定を行います.
    //--------------------------------------------------------------------------------
    bool IsHit( const Ray4&, s32& mask ) const;

    //--------------------------------------------------------------------------------
    //! @brief      バウンディングボックスを取得します.
    //--------------------------------------------------------------------------------
    BoundingBox GetBox() const;

    //--------------------------------------------------------------------------------
    //! @brief      2つの4バウンディングボックスをマージします.
    //--------------------------------------------------------------------------------
    static BoundingBox4 Merge( const BoundingBox4&, const BoundingBox4& );
};


/////////////////////////////////////////////////////////////////////////////////////
// BoundingBox8 structure
/////////////////////////////////////////////////////////////////////////////////////
struct BoundingBox8
{
public:
    b256 value[2][3];       // 最大・最小値です( 0:min, 1:max ).

    //--------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //--------------------------------------------------------------------------------
    BoundingBox8();

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    BoundingBox8
    (
        const BoundingBox& box0
    );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    BoundingBox8
    (
        const BoundingBox& box0,
        const BoundingBox& box1
    );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    BoundingBox8
    (
        const BoundingBox& box0,
        const BoundingBox& box1,
        const BoundingBox& box2
    );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    BoundingBox8
    (
        const BoundingBox& box0,
        const BoundingBox& box1,
        const BoundingBox& box2,
        const BoundingBox& box3
    );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    BoundingBox8
    (
        const BoundingBox& box0,
        const BoundingBox& box1,
        const BoundingBox& box2,
        const BoundingBox& box3,
        const BoundingBox& box4
    );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    BoundingBox8
    (
        const BoundingBox& box0,
        const BoundingBox& box1,
        const BoundingBox& box2,
        const BoundingBox& box3,
        const BoundingBox& box4,
        const BoundingBox& box5
    );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    BoundingBox8
    (
        const BoundingBox& box0,
        const BoundingBox& box1,
        const BoundingBox& box2,
        const BoundingBox& box3,
        const BoundingBox& box4,
        const BoundingBox& box5,
        const BoundingBox& box6
    );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    BoundingBox8
    (
        const BoundingBox& box0,
        const BoundingBox& box1,
        const BoundingBox& box2,
        const BoundingBox& box3,
        const BoundingBox& box4,
        const BoundingBox& box5,
        const BoundingBox& box6,
        const BoundingBox& box7
    );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    BoundingBox8( const BoundingBox* pBoxes );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    BoundingBox8
    (
        const b256& miniX,
        const b256& miniY,
        const b256& miniZ,

        const b256& maxiX,
        const b256& maxiY,
        const b256& maxiZ
    );

    //--------------------------------------------------------------------------------
    //! @brief      交差判定を行います.
    //--------------------------------------------------------------------------------
    bool IsHit( const Ray8&, s32& mask ) const;

    //--------------------------------------------------------------------------------
    //! @brief      バウンディングボックスを取得します.
    //--------------------------------------------------------------------------------
    BoundingBox GetBox() const;

    //--------------------------------------------------------------------------------
    //! @brief      2つの4バウンディングボックスをマージします.
    //--------------------------------------------------------------------------------
    static BoundingBox8 Merge( const BoundingBox8&, const BoundingBox8& );
};

} // namespace s3d


//-----------------------------------------------------------------------------------
// Inlines
//-----------------------------------------------------------------------------------
#include <s3d_box.inl>


#endif//__S3D_BOX_H__
