//---------------------------------------------------------------------------
// File : s3d_bvh.h
// Desc : Bounding Volume Hierarchy Module.
// Copyright(c) Project Asura. All right reserved.
//---------------------------------------------------------------------------

#ifndef __S3D_BVH_H__
#define __S3D_BVH_H__

//----------------------------------------------------------------------------
// Includes
//----------------------------------------------------------------------------
#include <s3d_typedef.h>
#include <s3d_math.h>
#include <s3d_box.h>
#include <s3d_shape.h>


namespace s3d {


////////////////////////////////////////////////////////////////////////////////
// Leaf structure
////////////////////////////////////////////////////////////////////////////////
struct Leaf : public IShape, public IDispose
{
public:
    u32         size;
    IShape**    ppShapes;    //!< シェイプです.
    BoundingBox box;        //!< バウンディングボックスです.

    //--------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //--------------------------------------------------------------------------
    Leaf()
    { /* DO_NOTHING */ }

    //--------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------
    Leaf( u32 _size, IShape** _ppShapes )
    {
        size = _size;
        ppShapes = new IShape*[size];

        for( u32 i=0; i<size; ++i )
        { ppShapes[ i ] = _ppShapes[ i ]; }

        box = _ppShapes[ 0 ]->GetBox();
        for( u32 i=1; i<size; ++i )
        { box = BoundingBox::Merge( box, _ppShapes[ i ]->GetBox() ); }
    }

    //---------------------------------------------------------------------------
    //! @brief      破棄処理を行います.
    //---------------------------------------------------------------------------
    void Dispose()
    {
        for( u32 i=0; i<size; ++i )
        {
            if ( ppShapes[ i ]->IsPrimitive() )
            { ppShapes[ i ] = nullptr; }
            else
            {
                IDispose* pDisposable = dynamic_cast<IDispose*>( ppShapes[ i ] );
                if ( pDisposable != nullptr )
                { pDisposable->Dispose(); }
            }
        }

        delete[] ppShapes;
        ppShapes = nullptr;

        delete this;
    }

    //--------------------------------------------------------------------------
    //! @brief      交差判定を行います.
    //--------------------------------------------------------------------------
    bool IsHit( const Ray& ray, HitRecord& record ) const
    {
        bool result = false;
        for( u32 i=0; i<size; ++i )
        { 
            if ( ppShapes[ i ]->IsHit( ray, record ) )
            { result = true; }
        }
        return result &&
               ( record.distance > F_HIT_MIN ) &&
               ( record.distance < F_HIT_MAX );
    }

    //--------------------------------------------------------------------------
    //! @brief      マテリアルを取得します.
    //--------------------------------------------------------------------------
    const IMaterial* GetMaterial() const
    { return nullptr; }

    //--------------------------------------------------------------------------
    //! @brief      バウンディングボックスを取得します.
    //--------------------------------------------------------------------------
    BoundingBox GetBox() const
    { return box; }

    //--------------------------------------------------------------------------
    //! @brief      基本図形であるか判定します.
    //--------------------------------------------------------------------------
    bool IsPrimitive() const
    { return false; }

    //--------------------------------------------------------------------------
    //! @brief      葉ノードの数を取得します.
    //--------------------------------------------------------------------------
    u32 GetSize() const
    { return size; }
};


//////////////////////////////////////////////////////////////////////////////
// BVH structure
//////////////////////////////////////////////////////////////////////////////
struct BVH : public IShape, public IDispose
{
public:
    BoundingBox box;            //!< バウンディングボックスです.
    IShape*     pLeft;          //!< 左のブランチです.
    IShape*     pRight;         //!< 右のブランチです.

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    BVH();

    ////-----------------------------------------------------------------------
    ////! @brief      デストラクタです.
    ////-----------------------------------------------------------------------
    //virtual ~BVH();

    //-------------------------------------------------------------------------
    //! @brief        破棄処理を行います.
    //-------------------------------------------------------------------------
    void Dispose();

    //-------------------------------------------------------------------------
    //! @brief      交差判定を行います.
    //-------------------------------------------------------------------------
    bool IsHit( const Ray&, HitRecord& ) const;

    //-------------------------------------------------------------------------
    //! @brief      マテリアルを取得します.
    //-------------------------------------------------------------------------
    IMaterial* GetMaterial() const;

    //-------------------------------------------------------------------------
    //! @brief      バウンディングボックスを取得します.
    //-------------------------------------------------------------------------
    BoundingBox GetBox() const;

    //-------------------------------------------------------------------------
    //! @brief      基本図形であるか判定します.
    //-------------------------------------------------------------------------
    bool IsPrimitive() const;

    //-------------------------------------------------------------------------
    //! @brief      ブランチを構築します.
    //-------------------------------------------------------------------------
    static IShape* BuildBranch( IShape**, const u32 );

    //-------------------------------------------------------------------------
    //! @brief      ブランチを構築します.
    //-------------------------------------------------------------------------
    static IShape* BuildBranch( Triangle*, const u32 );

    ////-------------------------------------------------------------------------
    ////! @brief      ブランチを破棄します.
    ////-------------------------------------------------------------------------
    //static void DestroyBranch( BVH* );

private:
    //-------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //-------------------------------------------------------------------------
    BVH( IShape*, IShape* );

    //-------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //-------------------------------------------------------------------------
    BVH( IShape*, IShape*, const BoundingBox& );
};


////////////////////////////////////////////////////////////////////////////////
// QBVH structure
////////////////////////////////////////////////////////////////////////////////
struct QBVH : public IShape, public IDispose
{
public:
    IShape*         pShape[4];          //!< 子ノードです.
    BoundingBox4    box;                //!< 子ノードのバウンディングボックスです.

    //--------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //--------------------------------------------------------------------------
    QBVH();

    //--------------------------------------------------------------------------
    //! @brief      破棄処理を行います.
    //--------------------------------------------------------------------------
    void Dispose();

    //--------------------------------------------------------------------------
    //! @brief      交差判定を行います.
    //--------------------------------------------------------------------------
    bool IsHit(const Ray&, HitRecord&) const;

    //--------------------------------------------------------------------------
    //! @brief      マテリアルを取得します.
    //--------------------------------------------------------------------------
    IMaterial* GetMaterial() const;

    //--------------------------------------------------------------------------
    //! @brief      バウンディングボックスを取得します.
    //--------------------------------------------------------------------------
    BoundingBox GetBox() const;

    //--------------------------------------------------------------------------
    //! @brief      基本図形かどうか判定します.
    //--------------------------------------------------------------------------
    bool IsPrimitive() const;

    //--------------------------------------------------------------------------
    //! @brief      ブランチを構築します.
    //--------------------------------------------------------------------------
    static IShape* BuildBranch(IShape**, const u32);

    //--------------------------------------------------------------------------
    //! @brief      ブランチを構築します.
    //--------------------------------------------------------------------------
    static IShape* BuildBranch(Triangle*, const u32);

private:
    //--------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------
    QBVH( IShape** ppShapes );

    //--------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです
    //--------------------------------------------------------------------------
    QBVH( IShape** ppShapes, const BoundingBox4& box );
};


////////////////////////////////////////////////////////////////////////////////
// OBVH structure
////////////////////////////////////////////////////////////////////////////////
struct OBVH : public IShape, public IDispose
{
public:
    IShape*         pShape[8];          //!< 子ノードです.
    BoundingBox8    box;                //!< 子ノードのバウンディングボックスです.

    //--------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //--------------------------------------------------------------------------
    OBVH();

    ////--------------------------------------------------------------------------
    ////! @brief      デストラクタです.
    ////--------------------------------------------------------------------------
    //virtual ~OBVH();

    //--------------------------------------------------------------------------
    //! @brief      破棄処理を行います.
    //--------------------------------------------------------------------------
    void Dispose();

    //--------------------------------------------------------------------------
    //! @brief      交差判定を行います.
    //--------------------------------------------------------------------------
    bool IsHit(const Ray&, HitRecord&) const;

    //--------------------------------------------------------------------------
    //! @brief      マテリアルを取得します.
    //--------------------------------------------------------------------------
    IMaterial* GetMaterial() const;

    //--------------------------------------------------------------------------
    //! @brief      バウンディングボックスを取得します.
    //--------------------------------------------------------------------------
    BoundingBox GetBox() const;

    //--------------------------------------------------------------------------
    //! @brief      基本図形かどうか判定します.
    //--------------------------------------------------------------------------
    bool IsPrimitive() const;

    //--------------------------------------------------------------------------
    //! @brief      ブランチを構築します.
    //--------------------------------------------------------------------------
    static IShape* BuildBranch(IShape**, const u32);

    //--------------------------------------------------------------------------
    //! @brief      ブランチを構築します.
    //--------------------------------------------------------------------------
    static IShape* BuildBranch(Triangle*, const u32);

    ////--------------------------------------------------------------------------
    ////! @brief      ブランチを破棄します.
    ////--------------------------------------------------------------------------
    //static void DestroyBranch(OBVH*);

private:
    //typedef bool(*HitFunc) (const OBVH*, const Ray&, HitRecord&);    // 交差判定関数.
    //HitFunc pHitFunc;       //!< 交差判定を行うメソッドの関数ポインタです.

    ////--------------------------------------------------------------------------
    ////! @brief      ノードの交差判定を行います.
    ////--------------------------------------------------------------------------
    //static bool HitFuncNode(const OBVH*, const Ray&, HitRecord&);

    ////--------------------------------------------------------------------------
    ////! @brief      葉の交差判定を行います.
    ////--------------------------------------------------------------------------
    //static bool HitFuncLeaf(const OBVH*, const Ray&, HitRecord&);

    //--------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------
    OBVH( IShape** ppShapes );

    //--------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです
    //--------------------------------------------------------------------------
    OBVH( IShape** ppShapes, const BoundingBox8& octBox );
};

} // namespace s3d

#endif//__S3D_BVH_H__
