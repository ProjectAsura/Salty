//---------------------------------------------------------------------------
// File : s3d_bvh.h
// Desc : Bounding Volume Hierarchy Module.
// Copyright(c) Project Asura. All right reserved.
//---------------------------------------------------------------------------

#ifndef __S3D_BVH_H__
#define __S3D_BVH_H__

//----------------------------------------------------------------------------
// Includes
//----------------------------------------------------------------------------
#include <s3d_typedef.h>
#include <s3d_math.h>
#include <s3d_box.h>
#include <s3d_shape.h>


namespace s3d {

//////////////////////////////////////////////////////////////////////////////
// BVH structure
//////////////////////////////////////////////////////////////////////////////
struct BVH : public IShape
{
public:
    BoundingBox box;            //!< バウンディングボックスです.
    IShape*     pLeft;          //!< 左のブランチです.
    IShape*     pRight;         //!< 右のブランチです.

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    BVH();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    virtual ~BVH();

    //-------------------------------------------------------------------------
    //! @brief      交差判定を行います.
    //-------------------------------------------------------------------------
    bool IsHit( const Ray&, HitRecord& ) const;

    //-------------------------------------------------------------------------
    //! @brief      マテリアルを取得します.
    //-------------------------------------------------------------------------
    IMaterial* GetMaterial() const;

    //-------------------------------------------------------------------------
    //! @brief      バウンディングボックスを取得します.
    //-------------------------------------------------------------------------
    BoundingBox GetBox() const;

    //-------------------------------------------------------------------------
    //! @brief      基本図形であるか判定します.
    //-------------------------------------------------------------------------
    bool IsPrimitive() const;

    //-------------------------------------------------------------------------
    //! @brief      ブランチを構築します.
    //-------------------------------------------------------------------------
    static IShape* BuildBranch( IShape**, const u32 );

    //-------------------------------------------------------------------------
    //! @brief      ブランチを構築します.
    //-------------------------------------------------------------------------
    static IShape* BuildBranch( Triangle*, const u32 );

    //-------------------------------------------------------------------------
    //! @brief      ブランチを破棄します.
    //-------------------------------------------------------------------------
    static void DestroyBranch( BVH* );

private:
    //-------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //-------------------------------------------------------------------------
    BVH( IShape*, IShape* );

    //-------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //-------------------------------------------------------------------------
    BVH( IShape*, IShape*, const BoundingBox& );
};



////////////////////////////////////////////////////////////////////////////////
// QBVH structure
////////////////////////////////////////////////////////////////////////////////
struct QBVH : public IShape
{
public:
    IShape*         pShape[4];        //!< 子ノードです.
    BoundingBoxQuad box;                //!< 子ノードのバウンディングボックスです.

    //--------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //--------------------------------------------------------------------------
    QBVH();

    //--------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //--------------------------------------------------------------------------
    virtual ~QBVH();

    //--------------------------------------------------------------------------
    //! @brief      交差判定を行います.
    //--------------------------------------------------------------------------
    bool IsHit(const Ray&, HitRecord&) const;

    //--------------------------------------------------------------------------
    //! @brief      マテリアルを取得します.
    //--------------------------------------------------------------------------
    IMaterial* GetMaterial() const;

    //--------------------------------------------------------------------------
    //! @brief      バウンディングボックスを取得します.
    //--------------------------------------------------------------------------
    BoundingBox GetBox() const;

    //--------------------------------------------------------------------------
    //! @brief      基本図形かどうか判定します.
    //--------------------------------------------------------------------------
    bool IsPrimitive() const;

    //--------------------------------------------------------------------------
    //! @brief      ブランチを構築します.
    //--------------------------------------------------------------------------
    static IShape* BuildBranch(IShape**, const u32);

    //--------------------------------------------------------------------------
    //! @brief      ブランチを構築します.
    //--------------------------------------------------------------------------
    static IShape* BuildBranch(Triangle*, const u32);

    //--------------------------------------------------------------------------
    //! @brief      ブランチを破棄します.
    //--------------------------------------------------------------------------
    static void DestroyBranch(QBVH*);

private:
    typedef bool(*HitFunc) (const QBVH*, const Ray&, HitRecord&);    // 交差判定関数.
    HitFunc pHitFunc;       //!< 交差判定を行うメソッドの関数ポインタです.

    //--------------------------------------------------------------------------
    //! @brief      ノードの交差判定を行います.
    //--------------------------------------------------------------------------
    static bool HitFuncNode(const QBVH*, const Ray&, HitRecord&);

    //--------------------------------------------------------------------------
    //! @brief      葉の交差判定を行います.
    //--------------------------------------------------------------------------
    static bool HitFuncLeaf(const QBVH*, const Ray&, HitRecord&);

    //--------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------
    QBVH
        (
        bool,
        IShape*,
        IShape*,
        IShape*,
        IShape*
        );

    //--------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです
    //--------------------------------------------------------------------------
    QBVH
        (
        bool,
        IShape*,
        IShape*,
        IShape*,
        IShape*,
        const BoundingBoxQuad&
        );
};

} // namespace s3d

#endif//__S3D_BVH_H__
