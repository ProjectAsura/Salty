//-------------------------------------------------------------------------------------------------
// File : s3d_bvh8.h
// Desc : Oct BVH Module.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------
#pragma once

//-------------------------------------------------------------------------------------------------
// Inlcudes
//-------------------------------------------------------------------------------------------------
#include <s3d_math.h>
#include <s3d_shape.h>
#include <atomic>


namespace s3d {

///////////////////////////////////////////////////////////////////////////////////////////////////
// BVH8 class
///////////////////////////////////////////////////////////////////////////////////////////////////
class BVH8 : IShape
{
    //=============================================================================================
    // list of friend classes and methods.
    //=============================================================================================
    /* NOTHING */

public:
    //=============================================================================================
    // public variables.
    //=============================================================================================
    /* NOTHING */

    //=============================================================================================
    // public methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      OBVHを構築します.
    //---------------------------------------------------------------------------------------------
    static IShape* Create(size_t size, IShape** ppShapes);

    //---------------------------------------------------------------------------------------------
    //! @brief      参照カウントを増やします.
    //---------------------------------------------------------------------------------------------
    void AddRef() override;

    //---------------------------------------------------------------------------------------------
    //! @brief      解放処理を行います.
    //---------------------------------------------------------------------------------------------
    void Release() override;

    //---------------------------------------------------------------------------------------------
    //! @brief      参照カウントを取得します.
    //---------------------------------------------------------------------------------------------
    u32 GetCount() const override;

    //---------------------------------------------------------------------------------------------
    //! @brief      交差判定を行います.
    //---------------------------------------------------------------------------------------------
    bool IsHit(const Ray& ray, HitRecord& record ) const override;

    //---------------------------------------------------------------------------------------------
    //! @brief      バウンディングボックスを取得します.
    //---------------------------------------------------------------------------------------------
    BoundingBox GetBox() const override;

    //---------------------------------------------------------------------------------------------
    //! @brief      中心座標を取得します.
    //---------------------------------------------------------------------------------------------
    Vector3 GetCenter() const override;

private:
    //=============================================================================================
    // private varaibles.
    //=============================================================================================
    std::atomic<u32>    m_Count;        //!< 参照カウントです.
    BoundingBox8        m_Box;          //!< バウンディングボックスです.
    IShape*             m_pNode[8];     //!< 子ノードです.

    //=============================================================================================
    // private methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    BVH8(
        IShape* pShape0,
        IShape* pShape1,
        IShape* pShape2,
        IShape* pShape3,
        IShape* pShape4,
        IShape* pShape5,
        IShape* pShape6,
        IShape* pShape7 );

    //---------------------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //---------------------------------------------------------------------------------------------
    ~BVH8();

    //---------------------------------------------------------------------------------------------
    //! @brief      SAH分割します.
    //---------------------------------------------------------------------------------------------
    static bool SplitSAH( size_t count, IShape** ppShapes, size_t& mid );

    //---------------------------------------------------------------------------------------------
    //! @brief      中間分割します.
    //---------------------------------------------------------------------------------------------
    static bool SplitMid( size_t count, IShape** ppShapes, size_t& mid );

    //---------------------------------------------------------------------------------------------
    //! @brief      分割します.
    //---------------------------------------------------------------------------------------------
    static bool Split( size_t count, IShape** ppShapes, size_t& mid );

    //---------------------------------------------------------------------------------------------
    //! @brief      new 演算子のオーバーロードです.
    //---------------------------------------------------------------------------------------------
    void* operator new (size_t size);

    //---------------------------------------------------------------------------------------------
    //! @brief      new[] 演算子のオーバーロードです.
    //---------------------------------------------------------------------------------------------
    void* operator new[] (size_t size);

    //---------------------------------------------------------------------------------------------
    //! @brief      delete 演算子のオーバーロードです.
    //---------------------------------------------------------------------------------------------
    void operator delete (void* ptr);

    //---------------------------------------------------------------------------------------------
    //! @brief      delete[] 演算子のオーバーロードです.
    //---------------------------------------------------------------------------------------------
    void operator delete[] (void* ptr);
};

} // namespace s3d
