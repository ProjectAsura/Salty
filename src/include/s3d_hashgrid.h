//-------------------------------------------------------------------------------------
// File : s3d_hashgrid.h
// Desc : Hash Grid Module.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------

#ifndef __S3D_HASH_GRID_H__
#define __S3D_HASH_GRID_H__

//-------------------------------------------------------------------------------------
// Include
//-------------------------------------------------------------------------------------
#include <s3d_typedef.h>
#include <s3d_box.h>
#include <s3d_shape.h>


namespace s3d {

///////////////////////////////////////////////////////////////////////////////////////
// Node class
///////////////////////////////////////////////////////////////////////////////////////
template< typename T >
class Node
{
    //=================================================================================
    // list of friend classes and methods.
    //=================================================================================
    /* NOTHING */

public:
    //=================================================================================
    // public variables.
    //=================================================================================
    /* NOTHING */

    //=================================================================================
    // public methods.
    //=================================================================================

    //---------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------
    Node()
    : m_pValue  ( nullptr )
    , m_pNext   ( nullptr )
    , m_pPrev   ( nullptr )
    { /* DO_NOTHING */ }

    //---------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //---------------------------------------------------------------------------------
    Node( T* pValue )
    : m_pValue  ( pValue )
    , m_pNext   ( nullptr )
    , m_pPrev   ( nullptr )
    { /* DO_NOTHING */ }

    //---------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //---------------------------------------------------------------------------------
    ~Node()
    {
        if ( m_pValue )
        {
            delete m_pValue;
            m_pValue = nullptr;
        }

        m_pNext = nullptr;
        m_pPrev = nullptr;
    }

    //---------------------------------------------------------------------------------
    //! @brief      次のノードを取得します.
    //---------------------------------------------------------------------------------
    Node* GetNext() const
    { return m_pNext; }

    //---------------------------------------------------------------------------------
    //! @brief      前のノードを取得します.
    //---------------------------------------------------------------------------------
    Node* GetPrev() const
    { return m_pPrev; }

    //---------------------------------------------------------------------------------
    //! @brief      値を取得します.
    //---------------------------------------------------------------------------------
    T* GetValue() const
    { return m_pValue; }

    //---------------------------------------------------------------------------------
    //! @brief      値を設定します.
    //---------------------------------------------------------------------------------
    void SetValue( T* pValue )
    { m_pValue = pValue; }

    //---------------------------------------------------------------------------------
    //! @brief      次のノードを持つかどうかチェックします.
    //---------------------------------------------------------------------------------
    bool HasNext() const
    { return ( m_pNext != nullptr ); }

    //---------------------------------------------------------------------------------
    //! @brief      前のノードを持つかどうかチェックします.
    //---------------------------------------------------------------------------------
    bool HasPrev() const
    { return ( m_pPrev != nullptr ); }

    //---------------------------------------------------------------------------------
    //! @brief      値をもつかどうかチェックします.
    //---------------------------------------------------------------------------------
    bool HasValue() const
    { return ( m_pValue != nullptr ); }

    //---------------------------------------------------------------------------------
    //! @brief      ノードを追加します.
    //---------------------------------------------------------------------------------
    Node<T>* Add( T* pValue )
    {
        Node<T>* pNext = new Node<T>(pValue);
        m_pNext = pNext;
        m_pNext->m_pPrev = this;

        return pNext;
    }

    //---------------------------------------------------------------------------------
    //! @brief      ノードを削除します.
    //---------------------------------------------------------------------------------
    Node<T>* Remove()
    {
        Node<T>* pPrev = m_pPrev;
        if ( HasPrev() )
        {
            m_pPrev->m_pNext = m_pNext;
            if ( HasNext() )
            { m_pNext->m_pPrev = m_pPrev; }
        }
        else
        {
            if ( HasNext() )
            { m_pNext->m_pPrev = nullptr; }
        }

        delete this;

        return pPrev;
    }

protected:
    //=================================================================================
    // protected variables.
    //=================================================================================
    /* NOTHING */

    //=================================================================================
    // protected methods.
    //=================================================================================
    /* NOTHING */

private:
    //=================================================================================
    // private variables.
    //=================================================================================
    T*          m_pValue;
    Node<T>*    m_pNext;
    Node<T>*    m_pPrev;

    //=================================================================================
    // private methods.
    //=================================================================================
    /* NOTHING */
};

typedef Node<HitRecordEx>   HitNode;



///////////////////////////////////////////////////////////////////////////////////////
// HashGrid class
///////////////////////////////////////////////////////////////////////////////////////
class HashGrid
{
    //=================================================================================
    // list of friend classes and methods.
    //=================================================================================
    /* NOTHING */

public:
    //=================================================================================
    // public variables.
    //=================================================================================
    /* NOTHING */

    //=================================================================================
    // public methods.
    //=================================================================================

    //---------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------
    HashGrid();

    //---------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //---------------------------------------------------------------------------------
    virtual ~HashGrid();

    //---------------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //---------------------------------------------------------------------------------
    bool Init( const s32 w, const s32 h, HitNode* pList );

    //---------------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //---------------------------------------------------------------------------------
    void Term();

    //---------------------------------------------------------------------------------
    //! @brief      ノードを取得します.
    //---------------------------------------------------------------------------------
    HitNode* GetValue( const Vector3& point );

protected:
    //=================================================================================
    // protected variables.
    //=================================================================================
    /* NOTHING */

    //=================================================================================
    // protected methods.
    //=================================================================================

    //---------------------------------------------------------------------------------
    //! @brief      ハッシュキーを取得します.
    //---------------------------------------------------------------------------------
    u32     GetKey( const s32 x, const s32 y, const s32 z );

private:
    //=================================================================================
    // private variables.
    //=================================================================================
    f32             m_Factor;       //!< 正規化係数.
    u32             m_NumHash;      //!< ハッシュの数.
    BoundingBox     m_Box;          //!< 衝突点から形成されるAABB
    HitNode**       m_ppHead;       //!< 先頭のポインタ.

    //=================================================================================
    // private methods.
    //=================================================================================
    /* NOTHING */
};

} // namespace s3d


#endif//__S3D_HASH_GRID_H__
