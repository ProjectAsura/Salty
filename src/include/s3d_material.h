//-----------------------------------------------------------------------------------
// File : s3d_material.h
// Desc : Material Module.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------------

#ifndef __S3D_MATERIAL_H__
#define __S3D_MATERIAL_H__

//-----------------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------------
#include <s3d_math.h>
#include <s3d_texture.h>
#include <s3d_onb.h>


namespace s3d {

//////////////////////////////////////////////////////////////////////////////////////
// ShadingArg structure
//////////////////////////////////////////////////////////////////////////////////////
struct ShadingArg
{
    Vector3     input;          //!< 入射方向.
    Vector3     output;         //!< 出射方向.
    Vector3     normal;         //!< 法線ベクトル.
    Vector2     texcoord;       //!< テクスチャ座標.
    Random      random;         //!< 乱数.
    f64         prob;           //!< 確率.
};


/////////////////////////////////////////////////////////////////////////////////////
// IMaterial interface
/////////////////////////////////////////////////////////////////////////////////////
struct IMaterial
{
    //-------------------------------------------------------------------------------
    //! @brief      自己発光カラーを取得します.
    //-------------------------------------------------------------------------------
    virtual Color GetEmissive() const = 0;

    //-------------------------------------------------------------------------------
    //! @brief      ロシアンルーレットの閾値を取得します.
    //-------------------------------------------------------------------------------
    virtual f64 GetThreshold() const = 0;

    //-------------------------------------------------------------------------------
    //! @brief      シェーディングします.
    //-------------------------------------------------------------------------------
    virtual Color ComputeColor( ShadingArg& ) const = 0;
};


/////////////////////////////////////////////////////////////////////////////////////
// MaterialBase structure
/////////////////////////////////////////////////////////////////////////////////////
struct MaterialBase : public IMaterial
{
    Color           emissive;       //!< 自己発光カラーです.
    Color           color;          //!< マテリアルカラーです.
    Texture2D       texture;        //!< 2次元テクスチャです.
    TextureSampler  sampler;        //!< テクスチャサンプラーです.
    f64             threshold;      //!< 閾値です.

    //---------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------
    MaterialBase();

    //---------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //---------------------------------------------------------------------------------
    MaterialBase( const Color&, const Color& );

    //---------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //---------------------------------------------------------------------------------
    MaterialBase
    (
        const Color&,
        const Color&,
        const char*,
        const TextureSampler& = TextureSampler()
    );

    //--------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //--------------------------------------------------------------------------------
    virtual ~MaterialBase();

    //--------------------------------------------------------------------------------
    //! @brief      自己発行カラーを取得します.
    //--------------------------------------------------------------------------------
    virtual Color GetEmissive() const;

    //--------------------------------------------------------------------------------
    //! @brief      ロシアンルーレットの閾値を取得します.
    //--------------------------------------------------------------------------------
    virtual f64 GetThreshold() const;

    //--------------------------------------------------------------------------------
    //! @brief      色を求めます.
    //--------------------------------------------------------------------------------
    virtual Color ComputeColor( ShadingArg& arg ) const;
};


//////////////////////////////////////////////////////////////////////////////////////
// Matte structure
//////////////////////////////////////////////////////////////////////////////////////
struct Matte: public MaterialBase
{
    //--------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //--------------------------------------------------------------------------------
    Matte();

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    Matte( const Color&, const Color& );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    Matte
    (
        const Color&,
        const char*,
        const TextureSampler = TextureSampler(),
        const Color&         = Color( 0.0, 0.0, 0.0 )
    );

    //--------------------------------------------------------------------------------
    //! @brief      色を求めます.
    //--------------------------------------------------------------------------------
    virtual Color ComputeColor( ShadingArg& arg ) const;
};


//////////////////////////////////////////////////////////////////////////////////////
// Clay structure
//////////////////////////////////////////////////////////////////////////////////////
struct Clay : public MaterialBase
{
    f64 roughness;      //!< 面の粗さです.

    //--------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //--------------------------------------------------------------------------------
    Clay();

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    Clay( const Color&, const f64, const Color& = Color( 0.0, 0.0, 0.0 ) );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    Clay
    ( 
        const Color&,
        const f64,
        const char*,
        const Color&  = Color( 0.0, 0.0, 0.0 ),
        const TextureSampler& = TextureSampler()
    );

    //--------------------------------------------------------------------------------
    //! @brief      色を求めます.
    //--------------------------------------------------------------------------------
    virtual Color ComputeColor( ShadingArg& arg ) const;
};


//////////////////////////////////////////////////////////////////////////////////////
// Mirror structure
//////////////////////////////////////////////////////////////////////////////////////
struct Mirror : public MaterialBase
{
    //--------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //--------------------------------------------------------------------------------
    Mirror();

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    Mirror( const Color&, const Color& = Color( 0.0, 0.0, 0.0 ) );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    Mirror
    (
        const Color&,
        const char*,
        const TextureSampler = TextureSampler(),
        const Color&         = Color( 0.0, 0.0, 0.0 )
    );

    //--------------------------------------------------------------------------------
    //! @brief      色を求めます.
    //--------------------------------------------------------------------------------
    virtual Color ComputeColor( ShadingArg& arg ) const;
};


//////////////////////////////////////////////////////////////////////////////////////
// RefractionMaterial structure
//////////////////////////////////////////////////////////////////////////////////////
struct RefractionMaterial : public MaterialBase
{
    f64     refractivity;       //!< 屈折率です.

    //--------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //--------------------------------------------------------------------------------
    RefractionMaterial( const f64 = 1.0 );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    RefractionMaterial
    (
        const Color&,
        const Color& = Color( 0.0, 0.0, 0.0 ),
        const f64    = 1.0
    );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    RefractionMaterial
    (
        const Color&,
        const Color&,
        const f64,
        const char*,
        const TextureSampler& _sampler = TextureSampler()
    );

    //--------------------------------------------------------------------------------
    //! @brief      色を求めます.
    //--------------------------------------------------------------------------------
    virtual Color ComputeColor( ShadingArg& arg ) const;
};


//////////////////////////////////////////////////////////////////////////////////////
// Crystal structure
//////////////////////////////////////////////////////////////////////////////////////
struct Crystal : public RefractionMaterial
{
    //--------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //--------------------------------------------------------------------------------
    Crystal();

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    Crystal( const Color&, const Color& = Color( 0.0, 0.0, 0.0 ) );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    Crystal
    (
        const Color&,
        const char*,
        const TextureSampler = TextureSampler(),
        const Color&         = Color( 0.0, 0.0, 0.0 )
    );
};


//////////////////////////////////////////////////////////////////////////////////////
// Diamon structure
//////////////////////////////////////////////////////////////////////////////////////
struct Diamond : public RefractionMaterial
{
    //--------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //--------------------------------------------------------------------------------
    Diamond();

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    Diamond( const Color&, const Color& = Color( 0.0, 0.0, 0.0 ) );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    Diamond
    (
        const Color&,
        const char*,
        const TextureSampler = TextureSampler(),
        const Color&         = Color( 0.0, 0.0, 0.0 )
    );
};


////////////////////////////////////////////////////////////////////////////////////////
// MeshMaterial structure
////////////////////////////////////////////////////////////////////////////////////////
struct MeshMaterial : public IMaterial
{
    Color           diffuse;            //!< 拡散反射色です.
    Color           emissive;           //!< 自己発光色です.
    f64             refractivity;       //!< 屈折率です.
    f64             roughness;          //!< 面の粗さです.
    Texture2D       diffuseMap;         //!< ディフューズマップです.
    TextureSampler  diffuseSmp;         //!< ディフューズマップのサンプラーです.

    //----------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //----------------------------------------------------------------------------------
    MeshMaterial();

    //----------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //----------------------------------------------------------------------------------
    MeshMaterial( Color, Color, f64, f64 );

    //----------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //----------------------------------------------------------------------------------
    MeshMaterial( Color, Color, f64, f64, const char*, TextureSampler& = TextureSampler() );

    //----------------------------------------------------------------------------------
    //! @brief      自己発光カラーを取得します.
    //----------------------------------------------------------------------------------
    virtual Color GetEmissive() const;

    //----------------------------------------------------------------------------------
    //! @brief      色を求めます.
    //----------------------------------------------------------------------------------
    virtual Color ComputeColor( ShadingArg& ) const;
};


} // namespace s3d

#endif //__S3D_MATERIAL_H__
