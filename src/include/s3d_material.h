//-----------------------------------------------------------------------------------
// File : s3d_material.h
// Desc : Material Module.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------------

#ifndef __S3D_MATERIAL_H__
#define __S3D_MATERIAL_H__

//-----------------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------------
#include <s3d_math.h>
#include <s3d_texture.h>
#include <s3d_onb.h>


namespace s3d {

//////////////////////////////////////////////////////////////////////////////////////
// ShadingArg structure
//////////////////////////////////////////////////////////////////////////////////////
struct ShadingArg
{
    Vector3     input;          //!< 入射方向.
    Vector3     output;         //!< 出射方向.
    Vector3     normal;         //!< 法線ベクトル.
    Vector2     texcoord;       //!< テクスチャ座標.
    Random      random;         //!< 乱数.
    f32         prob;           //!< 確率.
};


/////////////////////////////////////////////////////////////////////////////////////
// IMaterial interface
/////////////////////////////////////////////////////////////////////////////////////
struct IMaterial
{
    //-------------------------------------------------------------------------------
    //! @brief      自己発光カラーを取得します.
    //-------------------------------------------------------------------------------
    virtual Color GetEmissive() const = 0;

    //-------------------------------------------------------------------------------
    //! @brief      ロシアンルーレットの閾値を取得します.
    //-------------------------------------------------------------------------------
    virtual f32 GetThreshold() const = 0;

    //-------------------------------------------------------------------------------
    //! @brief      シェーディングします.
    //-------------------------------------------------------------------------------
    virtual Color ComputeColor( ShadingArg& ) const = 0;
};


/////////////////////////////////////////////////////////////////////////////////////
// MaterialBase structure
/////////////////////////////////////////////////////////////////////////////////////
struct MaterialBase : public IMaterial
{
    Color           emissive;       //!< 自己発光カラーです.
    Color           color;          //!< マテリアルカラーです.
    Texture2D       texture;        //!< 2次元テクスチャです.
    TextureSampler  sampler;        //!< テクスチャサンプラーです.
    f32             threshold;      //!< 閾値です.

    //---------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------
    MaterialBase();

    //---------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //---------------------------------------------------------------------------------
    MaterialBase( const Color&, const Color& );

    //---------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //---------------------------------------------------------------------------------
    MaterialBase
    (
        const Color&,
        const Color&,
        const char*,
        const TextureSampler& = TextureSampler()
    );

    //--------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //--------------------------------------------------------------------------------
    virtual ~MaterialBase();

    //--------------------------------------------------------------------------------
    //! @brief      自己発行カラーを取得します.
    //--------------------------------------------------------------------------------
    virtual Color GetEmissive() const;

    //--------------------------------------------------------------------------------
    //! @brief      ロシアンルーレットの閾値を取得します.
    //--------------------------------------------------------------------------------
    virtual f32 GetThreshold() const;

    //--------------------------------------------------------------------------------
    //! @brief      色を求めます.
    //--------------------------------------------------------------------------------
    virtual Color ComputeColor( ShadingArg& arg ) const;
};


//////////////////////////////////////////////////////////////////////////////////////
// Matte structure
// (Oren-Nayer Model)
//////////////////////////////////////////////////////////////////////////////////////
struct Matte : public MaterialBase
{
    f32 roughness;      //!< 面の粗さです.

    //--------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //--------------------------------------------------------------------------------
    Matte();

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    Matte( const Color&, const f32, const Color& = Color( 0.0f, 0.0f, 0.0f ) );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    Matte
    ( 
        const Color&,
        const f32,
        const char*,
        const Color&  = Color( 0.0f, 0.0f, 0.0f ),
        const TextureSampler& = TextureSampler()
    );

    //--------------------------------------------------------------------------------
    //! @brief      色を求めます.
    //--------------------------------------------------------------------------------
    virtual Color ComputeColor( ShadingArg& arg ) const;
};


//////////////////////////////////////////////////////////////////////////////////////
// Mirror structure
// (Perfect Reflection)
//////////////////////////////////////////////////////////////////////////////////////
struct Mirror : public MaterialBase
{
    //--------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //--------------------------------------------------------------------------------
    Mirror();

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    Mirror( const Color&, const Color& = Color( 0.0f, 0.0f, 0.0f ) );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    Mirror
    (
        const Color&,
        const char*,
        const TextureSampler = TextureSampler(),
        const Color&         = Color( 0.0f, 0.0f, 0.0f )
    );

    //--------------------------------------------------------------------------------
    //! @brief      色を求めます.
    //--------------------------------------------------------------------------------
    virtual Color ComputeColor( ShadingArg& arg ) const;
};


//////////////////////////////////////////////////////////////////////////////////////
// Transparent structure
// (Refraction)
//////////////////////////////////////////////////////////////////////////////////////
struct Transparent : public MaterialBase
{
    f32     ior;       //!< 屈折率です(Index Of Refraction).

    //--------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //--------------------------------------------------------------------------------
    Transparent();

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    Transparent
    (
        const f32,
        const Color&,
        const Color& = Color( 0.0f, 0.0f, 0.0f )
    );

    //--------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //--------------------------------------------------------------------------------
    Transparent
    (
        const f32,
        const Color&,
        const Color&,
        const char*,
        const TextureSampler& _sampler = TextureSampler()
    );

    //--------------------------------------------------------------------------------
    //! @brief      色を求めます.
    //--------------------------------------------------------------------------------
    virtual Color ComputeColor( ShadingArg& arg ) const;
};


//////////////////////////////////////////////////////////////////////////////////////
// Glossy structure
// (Cook-Torrance Model)
//////////////////////////////////////////////////////////////////////////////////////
struct Glossy : public IMaterial
{
    Color           emissive;       //!< 自己発光カラーです.
    Color           diffuse;        //!< 拡散反射色です.
    Color           specular;       //!< 鏡面反射色です.
    Texture2D       texture;        //!< 2次元テクスチャです.
    TextureSampler  sampler;        //!< テクスチャサンプラーです.
    f32             threshold;      //!< 閾値です.
    f32             roughness;      //!< 面の粗さ.
    f32             fresnel;        //!< フレネル反射係数.

    Glossy();

    Glossy
    ( 
        const f32,
        const f32,
        const Color&,
        const Color&,
        const Color&
    );

    Glossy
    (
        const f32,
        const f32,
        const Color&,
        const Color&,
        const Color&,
        const char*,
        const TextureSampler& = TextureSampler()
    );

    //--------------------------------------------------------------------------------
    //! @brief      自己発行カラーを取得します.
    //--------------------------------------------------------------------------------
    virtual Color GetEmissive() const;

    //--------------------------------------------------------------------------------
    //! @brief      ロシアンルーレットの閾値を取得します.
    //--------------------------------------------------------------------------------
    virtual f32 GetThreshold() const;

    //--------------------------------------------------------------------------------
    //! @brief      色を求めます.
    //--------------------------------------------------------------------------------
    virtual Color ComputeColor( ShadingArg& ) const;
};


} // namespace s3d

#endif //__S3D_MATERIAL_H__
