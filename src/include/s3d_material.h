//-------------------------------------------------------------------------------------------------
// File : s3d_material.h
// Desc : Material Module.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------
#pragma once

//-------------------------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------------------------
#include <s3d_math.h>
#include <s3d_texture.h>


namespace s3d {

///////////////////////////////////////////////////////////////////////////////////////////////////
// ShadingArg structure
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ShadingArg
{
    Vector3     input;          //!< 入射方向.
    Vector3     output;         //!< 出射方向.
    Vector3     normal;         //!< 法線ベクトル.
    Vector2     texcoord;       //!< テクスチャ座標.
    Random      random;         //!< 乱数.
    f32         prob;           //!< 確率.
};


///////////////////////////////////////////////////////////////////////////////////////////////////
// IMaterial interface
///////////////////////////////////////////////////////////////////////////////////////////////////
struct IMaterial
{
    //---------------------------------------------------------------------------------------------
    //! @brief      自己発光カラーを取得します.
    //---------------------------------------------------------------------------------------------
    virtual Color4 GetEmissive() const = 0;

    //---------------------------------------------------------------------------------------------
    //! @brief      ロシアンルーレットの閾値を取得します.
    //---------------------------------------------------------------------------------------------
    virtual f32 GetThreshold() const = 0;

    //---------------------------------------------------------------------------------------------
    //! @brief      シェーディングします.
    //---------------------------------------------------------------------------------------------
    virtual Color4 ComputeColor( ShadingArg& ) const = 0;

    //---------------------------------------------------------------------------------------------
    //! @brief      アルファテストを行います.
    //---------------------------------------------------------------------------------------------
    virtual bool AlphaTest( const Vector2&, const f32 ) const = 0;

#if 1
    virtual Color4 GetDebugColor() const
    { return Color4( 1.0f, 0.0f, 0.0f, 1.0f ); }
#endif
};


///////////////////////////////////////////////////////////////////////////////////////////////////
// MaterialBase structure
///////////////////////////////////////////////////////////////////////////////////////////////////
struct MaterialBase : public IMaterial
{
    Color4                  emissive;       //!< 自己発光カラーです.
    Color4                  color;          //!< マテリアルカラーです.
    const Texture2D*        pTexture;       //!< 2次元テクスチャです.
    const TextureSampler*   pSampler;       //!< テクスチャサンプラーです.
    f32                     threshold;      //!< 閾値です.

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    MaterialBase();

    //---------------------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //---------------------------------------------------------------------------------------------
    MaterialBase( const Color4&, const Color4& );

    //---------------------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //---------------------------------------------------------------------------------------------
    MaterialBase
    (
        const Color4&,
        const Color4&,
        const Texture2D*,
        const TextureSampler*
    );

    //---------------------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //---------------------------------------------------------------------------------------------
    virtual ~MaterialBase();

    //---------------------------------------------------------------------------------------------
    //! @brief      自己発光カラーを取得します.
    //---------------------------------------------------------------------------------------------
    virtual Color4 GetEmissive() const override;

    //---------------------------------------------------------------------------------------------
    //! @brief      ロシアンルーレットの閾値を取得します.
    //---------------------------------------------------------------------------------------------
    virtual f32 GetThreshold() const override;

    //---------------------------------------------------------------------------------------------
    //! @brief      色を求めます.
    //---------------------------------------------------------------------------------------------
    virtual Color4 ComputeColor( ShadingArg& arg ) const override;

    //---------------------------------------------------------------------------------------------
    //! @brief      アルファテストを行います.
    //---------------------------------------------------------------------------------------------
    virtual bool AlphaTest( const Vector2& texcoord, const f32 value ) const override;

#if 1
    virtual Color4 GetDebugColor() const
    { return color; }
#endif
};


///////////////////////////////////////////////////////////////////////////////////////////////////
// Matte structure
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Matte : public MaterialBase
{
    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    Matte();

    //---------------------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //---------------------------------------------------------------------------------------------
    Matte( const Color4&, const Color4& );

    //---------------------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //---------------------------------------------------------------------------------------------
    Matte
    ( 
        const Color4&,
        const Color4&,
        const Texture2D*,
        const TextureSampler*
    );

    //---------------------------------------------------------------------------------------------
    //! @brief      色を求めます.
    //---------------------------------------------------------------------------------------------
    Color4 ComputeColor( ShadingArg& arg ) const override;
};


///////////////////////////////////////////////////////////////////////////////////////////////////
// Mirror structure
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Mirror : public MaterialBase
{
    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    Mirror();

    //---------------------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //---------------------------------------------------------------------------------------------
    Mirror( const Color4&, const Color4& = Color4( 0.0f, 0.0f, 0.0f, 1.0f ) );

    //---------------------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //---------------------------------------------------------------------------------------------
    Mirror
    (
        const Color4&,
        const Color4&,
        const Texture2D*,
        const TextureSampler*
    );

    //---------------------------------------------------------------------------------------------
    //! @brief      色を求めます.
    //---------------------------------------------------------------------------------------------
    Color4 ComputeColor( ShadingArg& arg ) const override;
};


///////////////////////////////////////////////////////////////////////////////////////////////////
// Dielectric structure
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Dielectric : public MaterialBase
{
    f32     ior;       //!< 屈折率です(Index Of Refraction).

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    Dielectric();

    //---------------------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //---------------------------------------------------------------------------------------------
    Dielectric
    (
        const f32,
        const Color4&,
        const Color4& = Color4( 0.0f, 0.0f, 0.0f, 1.0f )
    );

    //---------------------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //---------------------------------------------------------------------------------------------
    Dielectric
    (
        const f32,
        const Color4&,
        const Color4&,
        const Texture2D*,
        const TextureSampler*
    );

    //---------------------------------------------------------------------------------------------
    //! @brief      色を求めます.
    //---------------------------------------------------------------------------------------------
    Color4 ComputeColor( ShadingArg& arg ) const override;
};


///////////////////////////////////////////////////////////////////////////////////////////////////
// Glossy structure
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Glossy : public IMaterial
{
    Color4                  emissive;       //!< 自己発光カラーです.
    Color4                  specular;       //!< 鏡面反射色です.
    f32                     power;          //!< 鏡面反射強度です.
    f32                     threshold;      //!< 閾値です.
    const Texture2D*        pTexture;       //!< 2次元テクスチャです.
    const TextureSampler*   pSampler;       //!< テクスチャサンプラーです.

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    Glossy();

    //---------------------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //---------------------------------------------------------------------------------------------
    Glossy
    ( 
        const Color4&,
        const f32,
        const Color4& = Color4( 0.0f, 0.0f, 0.0f, 1.0f )
    );

    //---------------------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //---------------------------------------------------------------------------------------------
    Glossy
    (
        const Color4&,
        const f32,
        const Color4&,
        const Texture2D*,
        const TextureSampler*
    );

    //---------------------------------------------------------------------------------------------
    //! @brief      自己発光カラーを取得します.
    //---------------------------------------------------------------------------------------------
    Color4 GetEmissive() const override;

    //---------------------------------------------------------------------------------------------
    //! @brief      ロシアンルーレットの閾値を取得します.
    //---------------------------------------------------------------------------------------------
    f32 GetThreshold() const override;

    //---------------------------------------------------------------------------------------------
    //! @brief      色を求めます.
    //---------------------------------------------------------------------------------------------
    Color4 ComputeColor( ShadingArg& ) const override;

    //---------------------------------------------------------------------------------------------
    //! @brief      アルファテストを行います.
    //---------------------------------------------------------------------------------------------
    bool AlphaTest( const Vector2& texcoord, const f32 value ) const override;

#if 1
    Color4 GetDebugColor() const override
    { return Color4( 0.0f, 1.0f, 0.0f, 1.0f ); }
#endif
};


///////////////////////////////////////////////////////////////////////////////////////////////////
// Plastic structure
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Plastic : public IMaterial
{
    Color4                  diffuse;
    Color4                  specular;
    f32                     power;
    Color4                  emissive;
    const Texture2D*        pDiffuseMap;
    const TextureSampler*   pDiffuseSmp;
    f32                     threshold;

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    Plastic();

    //---------------------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //---------------------------------------------------------------------------------------------
    Plastic
    (
        const Color4&,
        const Color4&,
        const f32,
        const Color4& = Color4(0.0f, 0.0f, 0.0f, 1.0),
        const Texture2D* = nullptr,
        const TextureSampler* = nullptr
    );

    //---------------------------------------------------------------------------------------------
    //! @brief      自己発光カラーを取得します
    //---------------------------------------------------------------------------------------------
    Color4 GetEmissive() const override;

    //---------------------------------------------------------------------------------------------
    //! @brief      ロシアンルーレットの閾値を取得します.
    //---------------------------------------------------------------------------------------------
    f32 GetThreshold() const override;

    //---------------------------------------------------------------------------------------------
    //! @brief      シェーディングします.
    //---------------------------------------------------------------------------------------------
    Color4 ComputeColor(ShadingArg&) const override;

    //---------------------------------------------------------------------------------------------
    //! @brief      アルファテストを行います.
    //---------------------------------------------------------------------------------------------
    bool AlphaTest(const Vector2&, const f32) const override;
};


} // namespace s3d
