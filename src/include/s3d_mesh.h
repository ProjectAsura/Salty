//-------------------------------------------------------------------------------------------------
// File : s3d_mesh.h
// Desc : Mesh Module.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------
#pragma once

//-------------------------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------------------------
#include <s3d_shape.h>
#include <s3d_material.h>
#include <atomic>
#include <vector>


namespace s3d {

///////////////////////////////////////////////////////////////////////////////////////////////////
// Mesh class
///////////////////////////////////////////////////////////////////////////////////////////////////
class Mesh : IShape
{
    //=============================================================================================
    // list of friend classes and methods.
    //=============================================================================================
    /* NOTHING */

public:
    //=============================================================================================
    // public variables.
    //=============================================================================================
    /* NOTHING */

    //=============================================================================================
    // public methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      生成処理です.
    //---------------------------------------------------------------------------------------------
    static bool Create(const char* filename, IShape** ppShape);

    //---------------------------------------------------------------------------------------------
    //! @brief      生成処理です.
    //---------------------------------------------------------------------------------------------
    static bool Create(u32 vertexCount, Vertex* pVertices, IMaterial* pMateiral, IShape** ppShape);

    //---------------------------------------------------------------------------------------------
    //! @brief      参照カウントを増やします.
    //---------------------------------------------------------------------------------------------
    void AddRef() override;

    //---------------------------------------------------------------------------------------------
    //! @brief      解放処理を行います.
    //---------------------------------------------------------------------------------------------
    void Release() override;

    //---------------------------------------------------------------------------------------------
    //! @brief      参照カウントを取得します.
    //---------------------------------------------------------------------------------------------
    u32 GetCount() const override;

    //---------------------------------------------------------------------------------------------
    //! @brief      交差判定を行います.
    //---------------------------------------------------------------------------------------------
    bool IsHit(const Ray&, HitRecord&) const override;

    //---------------------------------------------------------------------------------------------
    //! @brief      バウンディングボックスを取得します.
    //---------------------------------------------------------------------------------------------
    BoundingBox GetBox() const override;

    //---------------------------------------------------------------------------------------------
    //! @brief      中心座標を取得します.
    //---------------------------------------------------------------------------------------------
    Vector3 GetCenter() const override;

private:
    //=============================================================================================
    // private variables.
    //=============================================================================================
    std::atomic<u32>            m_Count;            //!< 参照カウントです.
    std::vector<IShape*>        m_Triangles;        //!< 三角形です.
    std::vector<IMaterial*>     m_Materials;        //!< マテリアルです.
    std::vector<Texture2D>      m_Textures;         //!< テクスチャです.
    TextureSampler              m_DiffuseSmp;       //!< ディフューズマップのサンプラーです.
    TextureSampler              m_SpecularSmp;      //!< スペキュラーマップのサンプラーです.
    IShape*                     m_pBVH;             //!< BVHです.

    //=============================================================================================
    // private methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    Mesh();

    //---------------------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //---------------------------------------------------------------------------------------------
    ~Mesh();

    //---------------------------------------------------------------------------------------------
    //! @brief      ファイルから読み込みします.
    //---------------------------------------------------------------------------------------------
    bool LoadFromFile(const char* filename);

    //---------------------------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //---------------------------------------------------------------------------------------------
    bool Init(u32 vertexCount, Vertex* pVertices, IMaterial* pMaterial);
};


} // namespace s3d
