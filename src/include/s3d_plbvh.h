//---------------------------------------------------------------------------
// File : s3d_plbvh.h
// Desc : Partitioning LBVH Module.
// Copyright(c) Project Asura. All right reserved.
//---------------------------------------------------------------------------

#ifndef __S3D_PLBVH_H__
#define __S3D_PLBVH_H__



//----------------------------------------------------------------------------
// Includes
//----------------------------------------------------------------------------
#include <s3d_typedef.h>
#include <s3d_math.h>
#include <s3d_shape.h>



namespace s3d {

//////////////////////////////////////////////////////////////////////////////
// PLBVH structure
//////////////////////////////////////////////////////////////////////////////
struct PLBVH : public IShape, public IDispose
{
public:
    BoundingBox box;            //!< バウンディングボックスです.
    IShape*     pLeft;          //!< 左のブランチです.
    IShape*     pRight;         //!< 右のブランチです.

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    PLBVH();

    //-------------------------------------------------------------------------
    //! @brief        破棄処理を行います.
    //-------------------------------------------------------------------------
    void Dispose();

    //-------------------------------------------------------------------------
    //! @brief      交差判定を行います.
    //-------------------------------------------------------------------------
    bool IsHit( const Ray&, HitRecord& ) const;

    //-------------------------------------------------------------------------
    //! @brief      マテリアルを取得します.
    //-------------------------------------------------------------------------
    IMaterial* GetMaterial() const;

    //-------------------------------------------------------------------------
    //! @brief      バウンディングボックスを取得します.
    //-------------------------------------------------------------------------
    BoundingBox GetBox() const;

    //-------------------------------------------------------------------------
    //! @brief      基本図形であるか判定します.
    //-------------------------------------------------------------------------
    bool IsPrimitive() const;

    //-------------------------------------------------------------------------
    //! @brief      中心座標を取得します.
    //-------------------------------------------------------------------------
    Vector3 GetCenter() const;

    //-------------------------------------------------------------------------
    //! @brief      ブランチを構築します.
    //-------------------------------------------------------------------------
    static IShape* BuildBranch( IShape**, const u32 );

private:
    //-------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //-------------------------------------------------------------------------
    PLBVH( IShape*, IShape* );

    //-------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //-------------------------------------------------------------------------
    PLBVH( IShape*, IShape*, const BoundingBox& );

    //-------------------------------------------------------------------------
    //! @brief      ブランチを作成します.
    //-------------------------------------------------------------------------
    static IShape* InternalBuildBranch( 
        const u32*  pMortonCodes,
        u32*        pIndices,
        IShape**    ppShapes,
        u32         a,
        u32         b,
        s32         level );

};

//////////////////////////////////////////////////////////////////////////////
// PLQBVH structure
//////////////////////////////////////////////////////////////////////////////
struct PLQBVH : public IShape, public IDispose
{
public:
    BoundingBox4 box;            //!< バウンディングボックスです.
    IShape*      pShape[4];      //!< シェープノードです.

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    PLQBVH();

    //-------------------------------------------------------------------------
    //! @brief        破棄処理を行います.
    //-------------------------------------------------------------------------
    void Dispose();

    //-------------------------------------------------------------------------
    //! @brief      交差判定を行います.
    //-------------------------------------------------------------------------
    bool IsHit( const Ray&, HitRecord& ) const;

    //-------------------------------------------------------------------------
    //! @brief      マテリアルを取得します.
    //-------------------------------------------------------------------------
    IMaterial* GetMaterial() const;

    //-------------------------------------------------------------------------
    //! @brief      バウンディングボックスを取得します.
    //-------------------------------------------------------------------------
    BoundingBox GetBox() const;

    //-------------------------------------------------------------------------
    //! @brief      基本図形であるか判定します.
    //-------------------------------------------------------------------------
    bool IsPrimitive() const;

    //-------------------------------------------------------------------------
    //! @brief      中心座標を取得します.
    //-------------------------------------------------------------------------
    Vector3 GetCenter() const;

    //-------------------------------------------------------------------------
    //! @brief      ブランチを構築します.
    //-------------------------------------------------------------------------
    static IShape* BuildBranch( IShape**, const u32 );

private:
    //-------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //-------------------------------------------------------------------------
    PLQBVH( IShape** );

    //-------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //-------------------------------------------------------------------------
    PLQBVH( IShape**, const BoundingBox4& );

    //-------------------------------------------------------------------------
    //! @brief      ブランチを作成します.
    //-------------------------------------------------------------------------
    static IShape* InternalBuildBranch( 
        const u32*  pMortonCodes,
        u32*        pIndices,
        IShape**    ppShapes,
        u32         a,
        u32         b,
        s32         level );

};

//////////////////////////////////////////////////////////////////////////////
// PLOBVH structure
//////////////////////////////////////////////////////////////////////////////
struct PLOBVH : public IShape, public IDispose
{
public:
    BoundingBox8 box;            //!< バウンディングボックスです.
    IShape*      pShape[8];      //!< シェープノードです.

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    PLOBVH();

    //-------------------------------------------------------------------------
    //! @brief        破棄処理を行います.
    //-------------------------------------------------------------------------
    void Dispose();

    //-------------------------------------------------------------------------
    //! @brief      交差判定を行います.
    //-------------------------------------------------------------------------
    bool IsHit( const Ray&, HitRecord& ) const;

    //-------------------------------------------------------------------------
    //! @brief      マテリアルを取得します.
    //-------------------------------------------------------------------------
    IMaterial* GetMaterial() const;

    //-------------------------------------------------------------------------
    //! @brief      バウンディングボックスを取得します.
    //-------------------------------------------------------------------------
    BoundingBox GetBox() const;

    //-------------------------------------------------------------------------
    //! @brief      基本図形であるか判定します.
    //-------------------------------------------------------------------------
    bool IsPrimitive() const;

    //-------------------------------------------------------------------------
    //! @brief      中心座標を取得します.
    //-------------------------------------------------------------------------
    Vector3 GetCenter() const;

    //-------------------------------------------------------------------------
    //! @brief      ブランチを構築します.
    //-------------------------------------------------------------------------
    static IShape* BuildBranch( IShape**, const u32 );

private:
    //-------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //-------------------------------------------------------------------------
    PLOBVH( IShape** );

    //-------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //-------------------------------------------------------------------------
    PLOBVH( IShape**, const BoundingBox8& );

    //-------------------------------------------------------------------------
    //! @brief      ブランチを作成します.
    //-------------------------------------------------------------------------
    static IShape* InternalBuildBranch( 
        const u32*  pMortonCodes,
        u32*        pIndices,
        IShape**    ppShapes,
        u32         a,
        u32         b,
        s32         level );

};


} // namespace s3d

#endif//__S3D_PLBVH_H__
