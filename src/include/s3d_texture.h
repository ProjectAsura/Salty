//----------------------------------------------------------------------------------
// File : s3d_texture.h
// Desc : Texture Module.
// Copyright(c) Project Asura. All right reserved.
//----------------------------------------------------------------------------------
#pragma once

//----------------------------------------------------------------------------------
// Includes
//----------------------------------------------------------------------------------
#include <s3d_math.h>


namespace s3d {

enum TEXTURE_FILE_FORMAT
{
    TFF_BMP = 0,
    TFF_TGA,
    TFF_HDR
};

////////////////////////////////////////////////////////////////////////////////////
// Texture2D class
////////////////////////////////////////////////////////////////////////////////////
class Texture
{
    //==============================================================================
    // list of friend classes and methods.
    //==============================================================================
    /* NOTHING */

public:
    //==============================================================================
    // public variables.
    //==============================================================================
    /* NOTHING */

    //==============================================================================
    // public methods.
    //==============================================================================

    //------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //------------------------------------------------------------------------------
    Texture();

    //------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //------------------------------------------------------------------------------
    virtual ~Texture();

    //------------------------------------------------------------------------------
    //! @brief      ファイルからロードします.
    //------------------------------------------------------------------------------
    bool Init( const char* path, TEXTURE_FILE_FORMAT format );

    //------------------------------------------------------------------------------
    //! @brief      メモリ解放処理を行います.
    //------------------------------------------------------------------------------
    void Term();

    //------------------------------------------------------------------------------
    //! @brief      カラー値をサンプリングします.
    //------------------------------------------------------------------------------
    Color3 SampleColor(const Vector2& uv ) const;

    //------------------------------------------------------------------------------
    //! @brief      カラー値をサンプリングします.
    //------------------------------------------------------------------------------
    Color3 SampleColor(const Vector3& dir ) const;

    //------------------------------------------------------------------------------
    //! @brief      アルファ値をサンプリングします.
    //------------------------------------------------------------------------------
    f32 SampleAlpha(const Vector2& uv ) const;

protected:
    //==============================================================================
    // protected variables.
    //==============================================================================
    /* NOTHING */

    //==============================================================================
    // protected methods.
    //==============================================================================
    /* NOTHING */

private:
    //==============================================================================
    // private variables.
    //==============================================================================
    s32     m_Width;            //!< 画像の横幅です.
    s32     m_Height;           //!< 画像の縦幅です.
    u32     m_Size;             //!< データサイズです.
    Color3* m_pColors;          //!< カラーデータです.
    f32*    m_pAlphas;          //!< アルファデータです.

    //==============================================================================
    // private methods.
    //==============================================================================

    //------------------------------------------------------------------------------
    //! @brief      指定されたピクセルのカラー値を取得します.
    //------------------------------------------------------------------------------
    inline const Color3& GetColor( s32 x, s32 y ) const
    {
        auto idx = (m_Width * y) + x;
        assert( idx < m_Size );
        return m_pColors[idx];
    }

    //------------------------------------------------------------------------------
    //! @brief      指定されたピクセルのアルファ値を取得します.
    //------------------------------------------------------------------------------
    inline float GetAlpha(s32 x, s32 y) const 
    {
        auto idx = (m_Width * y) + x;
        assert( idx < m_Size );
        return m_pAlphas[idx];
    }
};


//-------------------------------------------------------------------------------------------------
//! @brief      BMPファイルに保存します.
//!
//! @param [in]     filename        ファイル名.
//! @param [in]     width           画像の横幅.
//! @param [in]     height          画像の縦幅.
//! @param [in]     pPixel          ピクセル.
//! @retval true    保存に成功.
//! @retval false   保存に失敗.
//-------------------------------------------------------------------------------------------------
bool SaveToBMP(
    const char*     filename,
    const s32       width,
    const s32       height,
    const Color3*   pPixel );

//-------------------------------------------------------------------------------------------------
//! @brief      BMPファイルを読み込みます.
//!
//! @param [in]     filename        ファイル名.
//! @param [out]    width           画像の横幅です.
//! @param [out]    height          画像の縦幅です.
//! @param [out]    ppPixels        ピクセルデータです.
//! @retval true    読み込みに成功.
//! @retval false   読み込みに失敗.
//-------------------------------------------------------------------------------------------------
bool LoadFromBMP(
    const char* filename,
    s32&        width,
    s32&        height,
    Color3**    ppPixel );

//-------------------------------------------------------------------------------------------------
//! @brief      TGAファイルを読み込みます.
//!
//! @param [in]     filename        ファイル名.
//! @param [out]    width           画像の横幅です.
//! @param [out]    height          画像の縦幅です.
//! @param [out]    component       コンポーネント数(RGB=3, RGBA=4)
//! @param [out]    ppPixels        ピクセルデータです.
//! @retval true    読み込みに成功.
//! @retval false   読み込みに失敗.
//-------------------------------------------------------------------------------------------------
bool LoadFromTGA(
    const char* filename,
    s32&        width,
    s32&        height,
    Color3**    ppPixels,
    f32**       ppAlphas);

//--------------------------------------------------------------------------------------
//! @brief      HDRファイルに保存します.
//!
//! @param[in]      filename        ファイル名です.
//! @param[in]      width           画像の横幅です.
//! @param[in]      height          画像の縦幅です.
//! @param[in]      gamma           ガンマ値です.
//! @param[in]      exposure        露光値です.
//! @param[in]      pPixels         ピクセルデータです.
//--------------------------------------------------------------------------------------
bool SaveToHDR(
    const char*     filename,
    const s32       width,
    const s32       height,
    const Color3*   pPixel );

//--------------------------------------------------------------------------------------
//! @brief      HDRファイルから読み込みします.
//!
//! @param[in]      filename        ファイル名です.
//! @param[out]     width           画像の横幅です.
//! @param[out]     height          画像の縦幅です.
//! @param[out]     gamma           ガンマ値です.
//! @param[out]     exposure        露光値です.
//! @param[out]     ppPixels        ピクセルデータです.
//--------------------------------------------------------------------------------------
bool LoadFromHDR(
    const char* filename,
    s32&        width,
    s32&        height,
    Color3**    ppPixel );


} // namespace s3d
