//-------------------------------------------------------------------------------------------------
// File : s3d_lambert.cpp
// Desc : Lambert Material.
// Copyright(c) Project Asura. All right reserved.
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Includes
//--------------------------------------------------------------------------------------------------
#include <s3d_lambert.h>


namespace s3d {

///////////////////////////////////////////////////////////////////////////////////////////////////
// Lambert class
///////////////////////////////////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------------------------------------
//      コンストラクタです.
//-------------------------------------------------------------------------------------------------
Lambert::Lambert(const Color3& diffuse, const Color3& emissive)
: m_Count   (1)
, m_Diffuse (diffuse)
, m_Emissive(emissive)
{
    m_Threshold = diffuse.x;
    m_Threshold = s3d::Max( m_Threshold, diffuse.y );
    m_Threshold = s3d::Max( m_Threshold, diffuse.z );
    m_Threshold = s3d::Max( m_Threshold, 0.01f);    // Nan対策のため下駄をはかせる.
}

//-------------------------------------------------------------------------------------------------
//      デストラクタです.
//-------------------------------------------------------------------------------------------------
Lambert::~Lambert()
{ /* DO_NOTHING */ }

//-------------------------------------------------------------------------------------------------
//      参照カウントを増やします.
//-------------------------------------------------------------------------------------------------
void Lambert::AddRef()
{ m_Count++; }

//-------------------------------------------------------------------------------------------------
//      解放処理を行います.
//-------------------------------------------------------------------------------------------------
void Lambert::Release()
{
    m_Count--;
    if ( m_Count == 0 )
    { delete this; }
}

//-------------------------------------------------------------------------------------------------
//      参照カウントを取得します.
//-------------------------------------------------------------------------------------------------
u32 Lambert::GetCount() const
{ return m_Count; }

//-------------------------------------------------------------------------------------------------
//      シェーディングします.
//-------------------------------------------------------------------------------------------------
Color3 Lambert::Shade( ShadingArg& arg ) const
{
    // 補正済み法線データ (レイの入出を考慮済み).
    const Vector3 N = ( Vector3::Dot ( arg.normal, arg.input ) < 0.0 ) ? arg.normal : -arg.normal;

    // normalModの方向を基準とした正規直交基底(w, u, v)を作る。
    // この基底に対する半球内で次のレイを飛ばす。
    Vector3 T, B;
    TangentSpace(N, T, B);

    // インポータンスサンプリング.
    auto s = SampleLambert(arg.random.GetAsF32(), arg.random.GetAsF32());

    arg.output = Vector3::SafeUnitVector( T * s.x + B * s.y + N * s.z );
    arg.dice   = ( arg.random.GetAsF32() >= m_Threshold );

    // 以下の処理の省略.
    //      pdf = cosine * F_1DIVPI;
    //      sample = m_Diffuse * cosine * F_1DIVPI;
    //      weight = sample / pdf;

    return m_Diffuse;
}

//-------------------------------------------------------------------------------------------------
//      エミッシブカラーを取得します.
//-------------------------------------------------------------------------------------------------
Color3 Lambert::GetEmissive() const
{ return m_Emissive; }

//-------------------------------------------------------------------------------------------------
//      デルタ関数をもつかどうか?
//-------------------------------------------------------------------------------------------------
bool Lambert::HasDelta() const
{ return false; }

//-------------------------------------------------------------------------------------------------
//      生成処理です.
//-------------------------------------------------------------------------------------------------
IMaterial* Lambert::Create(const Color3& diffuse)
{ return Lambert::Create(diffuse, Color3(0.0f, 0.0f, 0.0f)); }

//-------------------------------------------------------------------------------------------------
//      生成処理です.
//-------------------------------------------------------------------------------------------------
IMaterial* Lambert::Create(const Color3& diffuse, const Color3& emissive)
{ return new (std::nothrow) Lambert(diffuse, emissive); }

} // namespace s3d
