//-------------------------------------------------------------------------------------------------
// File : s3d_mirror.cpp
// Desc : Mirror Material.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------------------------
#include <s3d_mirror.h>


namespace s3d {

///////////////////////////////////////////////////////////////////////////////////////////////////
// Mirror class
///////////////////////////////////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------------------------------------
//      コンストラクタです.
//-------------------------------------------------------------------------------------------------
Mirror::Mirror(const Color4& specular, const Color4& emissive)
: m_Count   (1)
, m_Specular(specular)
, m_Emissive(emissive)
{ /* DO_NOTHING */ }

//-------------------------------------------------------------------------------------------------
//      デストラクタです.
//-------------------------------------------------------------------------------------------------
Mirror::~Mirror()
{ /* DO_NOTHING */ }

//-------------------------------------------------------------------------------------------------
//      参照カウントを増やします.
//-------------------------------------------------------------------------------------------------
void Mirror::AddRef() 
{ m_Count++; }

//-------------------------------------------------------------------------------------------------
//      解放処理を行います.
//-------------------------------------------------------------------------------------------------
void Mirror::Release()
{
    m_Count--;
    if ( m_Count == 0 )
    { delete this; }
}

//-------------------------------------------------------------------------------------------------
//      参照カウントを取得します.
//-------------------------------------------------------------------------------------------------
u32 Mirror::GetCount() const
{ return m_Count; }

//-------------------------------------------------------------------------------------------------
//      シェーディングします.
//-------------------------------------------------------------------------------------------------
Color4 Mirror::Shade( ShadingArg& arg ) const
{
    // 補正済み法線データ (レイの入出を考慮済み).
    const Vector3 normalMod = ( Vector3::Dot ( arg.normal, arg.input ) < 0.0 ) ? arg.normal : -arg.normal;

    // 反射ベクトルを求める.
    Vector3 reflect = Vector3::SafeUnitVector( Vector3::Reflect( arg.input, normalMod ) );

    arg.output = reflect;
    arg.dice   = false;

    return m_Specular;
}

//-------------------------------------------------------------------------------------------------
//      エミッシブカラーを取得します.
//-------------------------------------------------------------------------------------------------
Color4 Mirror::GetEmissive() const
{ return m_Emissive; }

//-------------------------------------------------------------------------------------------------
//      デルタ関数をもつかどうか?
//-------------------------------------------------------------------------------------------------
bool Mirror::HasDelta() const
{ return true; }

//-------------------------------------------------------------------------------------------------
//      生成処理を行います.
//-------------------------------------------------------------------------------------------------
IMaterial* Mirror::Create(const Color4& specular)
{ return Mirror::Create(specular, Color4(0.0f, 0.0f, 0.0f, 1.0f)); }

//-------------------------------------------------------------------------------------------------
//      生成処理を行います.
//-------------------------------------------------------------------------------------------------
IMaterial* Mirror::Create(const Color4& specular, const Color4& emissive)
{ return new(std::nothrow) Mirror(specular, emissive); }

} // namespace s3d
