//------------------------------------------------------------------------------------
// File : s3d_qrand.cpp
// Desc : Quansi-Random Number Generator Module.
// Copyright(c) Project Asura. All right reserved.
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
// Includes
//------------------------------------------------------------------------------------
#include <s3d_qrand.h>
#include <cmath>
#include <cassert>


namespace /* anonymous */ {

//------------------------------------------------------------------------------------
//      エラトステネスの篩により素数を求めます.
//------------------------------------------------------------------------------------
void ComputePrimeNumbers
(
    const s32           maxNumber,
    std::vector<s32>&   result
)
{
    const s32 sqrtN = s32( sqrt((f64)maxNumber));
    std::vector<bool> table;
    table.resize(maxNumber+1, false);

    for( s32 i=2; (i*i) <= maxNumber; ++i )
    {
        if ( !table[i] )
        {
            for( s32 j=(i+i); j<=maxNumber; j+=i )
            { table[j] = true; }
        }
    }

    // 格納数を数える.
    u32 count = 0;
    for( s32 i=2; i<=maxNumber; ++i)
    {
        if ( !table[i] )
        { count++; }
    }

    // メモリ確保.
    result.resize( count );

    // カウンターリセット.
    count = 0;
    for( s32 i=2; i<=maxNumber; ++i)
    {
        if ( !table[i] )
        {
            // 格納していく.
            result[count] = i;
            count++;
        }
    }
}

//------------------------------------------------------------------------------------
//      根基逆関数を導出するヘルパーメソッド.
//------------------------------------------------------------------------------------
S3D_INLINE
s32 Reverse( const s32 i, const s32 p)
{
    if ( i == 0 )
    { return i; }

    return p-i;
}

} // namespace /* anonymous */


namespace s3d {

//////////////////////////////////////////////////////////////////////////////////////
// QRandom class
//////////////////////////////////////////////////////////////////////////////////////
std::vector<s32> QRandom::s_Primes;

//------------------------------------------------------------------------------------
//      コンストラクタです.
//------------------------------------------------------------------------------------
QRandom::QRandom()
{ /* DO_NOTHING */ }

//------------------------------------------------------------------------------------
//      デストラクタです.
//------------------------------------------------------------------------------------
QRandom::~QRandom()
{ /* DO_NOTHING */ }

//------------------------------------------------------------------------------------
//      初期化処理を行います.
//------------------------------------------------------------------------------------
bool QRandom::Init()
{
    if ( s_Primes.size() == 0 )
    {
        const s32 MAX_NUMBER = 1000000; // 素数生成範囲の最大値.
        ComputePrimeNumbers( MAX_NUMBER, s_Primes );
    }

    return true;
}

//------------------------------------------------------------------------------------
//      終了処理を行います.
//------------------------------------------------------------------------------------
void QRandom::Term()
{
    s_Primes.clear();
}

//------------------------------------------------------------------------------------
//      値をfloat型として取り出します.
//------------------------------------------------------------------------------------
f32 QRandom::GetAsF32()
{
    s32 base = m_Base;
    m_Base+=3;

    assert( size_t(base) < s_Primes.size() );
    const s32 p = s_Primes[ base ];
    f32 value   = 0.0f;
    f32 invBase = 1.0f / f32(p);
    f32 fact    = invBase;
    s32 n       = m_Index;

    while( n > 0 )
    {
        value += Reverse( n % p, p ) * fact;
        n /= p;
        fact *= invBase;
    }

    return value;
}

//------------------------------------------------------------------------------------
//      値をdouble型として取り出します.
//------------------------------------------------------------------------------------
f64 QRandom::GetAsF64()
{
    s32 base = m_Base;
    m_Base+=3;

    assert( size_t(base) < s_Primes.size() );
    const s32 p = s_Primes[base];
    f64 value   = 0.0;
    f64 invBase = 1.0 / f64(p);
    f64 fact    = invBase;
    s32 n       = m_Index;

    while( n > 0 )
    {
        value += Reverse( n % p, p ) * fact;
        n /= p;
        fact *= invBase;
    }

    return value;
}

//------------------------------------------------------------------------------------
//      素数の数を返却します.
//------------------------------------------------------------------------------------
u32 QRandom::GetDimension() const
{ return u32( s_Primes.size() ); }

//------------------------------------------------------------------------------------
//      インデックスを設定します.
//------------------------------------------------------------------------------------
void QRandom::SetIndex( s32 index )
{
    m_Index = index;
    m_Base = 3;
}

//------------------------------------------------------------------------------------
//      インデックスを取得します.
//------------------------------------------------------------------------------------
s32 QRandom::GetIndex() const
{ return m_Index; }

}
