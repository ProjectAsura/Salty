//------------------------------------------------------------------------------
// File : s3d_rendertaget.cpp
// Desc : Render Target Module.
// Copyright(c) Project Asura. All right reserved.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Includes
//------------------------------------------------------------------------------
#include <new>
#include <iostream>
#include <cassert>
#include <s3d_rendertarget.h>
#include <s3d_mutex.h>


#ifndef ELOG
#define ELOG( x, ... )      fprintf_s( stderr, "[File:%s, Line:%d] "x"\n", __FILE__, __LINE__, ##__VA_ARGS__ )
#endif//ELOG


namespace /* anonymous */ {

////////////////////////////////////////////////////////////////////////////////
// Locker class
////////////////////////////////////////////////////////////////////////////////
class Locker
{
public:
    Locker()
    : m_Mutex()
    { m_Mutex.Lock(); }

    ~Locker()
    { m_Mutex.Unlock(); }

private:
    s3d::Mutex m_Mutex;
};

} // namespace /* anonymous */


namespace s3d {

////////////////////////////////////////////////////////////////////////////////
// RenderTarget class
////////////////////////////////////////////////////////////////////////////////

//------------------------------------------------------------------------------
//      コンストラクタです.
//------------------------------------------------------------------------------
RenderTarget::RenderTarget()
: m_Width   ( 0 )
, m_Height  ( 0 )
, m_pPixels ( nullptr )
{
    /* DO_NOTHING */
}

//-----------------------------------------------------------------------------
//      デストラクタです.
//-----------------------------------------------------------------------------
RenderTarget::~RenderTarget()
{
    Term();
}

//----------------------------------------------------------------------------
//      初期化処理を行います.
//----------------------------------------------------------------------------
bool RenderTarget::Init( const u32 width, const u32 height )
{
    // ゼロチェック.
    if ( width <= 0 || height <= 0 )
    { return false; }

    // サイズを設定.
    m_Width  = width;
    m_Height = height;

    // メモリ確保.
    try
    {
        m_pPixels = new Color[ m_Width * m_Height ];
    }
    catch( std::bad_alloc ba )
    {
        // エラーログ出力.
        ELOG( "Error : Memory Allocate Failed." );
        m_Width  = 0;
        m_Height = 0;
        return false;
    }

    // 正常終了.
    return true;
}

//----------------------------------------------------------------------------
//      終了処理を行います.
//----------------------------------------------------------------------------
void RenderTarget::Term()
{
    S3D_DELETE_ARRAY( m_pPixels );

    m_Width  = 0;
    m_Height = 0;
}

//----------------------------------------------------------------------------
//      横幅を取得します.
//----------------------------------------------------------------------------
u32 RenderTarget::GetWidth() const
{ return m_Width; }

//----------------------------------------------------------------------------
//      縦幅を取得します.
//----------------------------------------------------------------------------
u32 RenderTarget::GetHeight() const
{ return m_Height; }

//----------------------------------------------------------------------------
//      指定されたピクセルを取得します.
//----------------------------------------------------------------------------
Color RenderTarget::GetPixel( const u32 idx )
{
    assert( 0 <= idx && idx < ( m_Width * m_Height ) );
    Locker locker;
    return m_pPixels[ idx ];
}

//----------------------------------------------------------------------------
//      ピクセルを取得します.
//----------------------------------------------------------------------------
f32* RenderTarget::GetPixels()
{
    Locker locker;
    return &m_pPixels[0].x;
}

//----------------------------------------------------------------------------
//      指定されたカラーでピクセルをクリアをします.
//----------------------------------------------------------------------------
void RenderTarget::Clear( const Color& value )
{
    Locker locker;
    for( u32 i=0; i<m_Width * m_Height; ++i )
    { m_pPixels[i] = value; }
}

//----------------------------------------------------------------------------
//      指定されたインデックスのピクセルカラーを設定します.
//----------------------------------------------------------------------------
void RenderTarget::SetPixel( const u32 idx, const Color& value )
{
    assert( 0 <= idx && idx < ( m_Width * m_Height ) );
    Locker locker;
    m_pPixels[ idx ] = value;
}

//----------------------------------------------------------------------------
//      指定されたインデックスのピクセルにカラーを加算します.
//----------------------------------------------------------------------------
void RenderTarget::AddPixel( const u32 idx, const Color& value )
{
    assert( 0 <= idx && idx < ( m_Width * m_Height ) );
    Locker locker;
    m_pPixels[ idx ] += value;
}

} // namespace s3d

