//-------------------------------------------------------------------------------------------------
// File : s3d_texturedmaterial.cpp
// Desc : Textured Material.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------------------------
#include <s3d_texturedmaterial.h>


namespace s3d {

///////////////////////////////////////////////////////////////////////////////////////////////////
// TexturedMaterial class
///////////////////////////////////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------------------------------------
//      コンストラクタです.
//-------------------------------------------------------------------------------------------------
TexturedMaterial::TexturedMaterial
(
    const Texture*        pTexture,
    IMaterial*              pMaterial
)
: m_Count       (1)
, m_pTexture    (pTexture)
, m_pMaterial   (pMaterial)
{ m_pMaterial->AddRef(); }

//-------------------------------------------------------------------------------------------------
//      デストラクタです.
//-------------------------------------------------------------------------------------------------
TexturedMaterial::~TexturedMaterial()
{ SafeRelease(m_pMaterial); }

//-------------------------------------------------------------------------------------------------
//      参照カウントを増やします.
//-------------------------------------------------------------------------------------------------
void TexturedMaterial::AddRef()
{ m_Count++; }

//-------------------------------------------------------------------------------------------------
//      解放処理を行います.
//-------------------------------------------------------------------------------------------------
void TexturedMaterial::Release()
{
    m_Count--;
    if ( m_Count == 0 )
    { delete this; }
}

//-------------------------------------------------------------------------------------------------
//      参照カウントを取得します.
//-------------------------------------------------------------------------------------------------
u32 TexturedMaterial::GetCount() const
{ return m_Count; }

//-------------------------------------------------------------------------------------------------
//      シェーディングします.
//-------------------------------------------------------------------------------------------------
Color3 TexturedMaterial::Shade( ShadingArg& arg ) const
{
    return Color3::Mul(
        m_pMaterial->Shade( arg ),
        m_pTexture->SampleColor( arg.texcoord ) );
}

//-------------------------------------------------------------------------------------------------
//      エミッシブカラーを取得します.
//-------------------------------------------------------------------------------------------------
Color3 TexturedMaterial::GetEmissive() const
{ return m_pMaterial->GetEmissive(); }

//-------------------------------------------------------------------------------------------------
//      デルタ関数をもつかどうか?
//-------------------------------------------------------------------------------------------------
bool TexturedMaterial::HasDelta() const
{ return m_pMaterial->HasDelta(); }

Color3 TexturedMaterial::GetBaseColor(const Vector2& texcoord) const
{
    return Color3::Mul(
        m_pMaterial->GetBaseColor(texcoord),
        m_pTexture->SampleColor( texcoord));
}

//-------------------------------------------------------------------------------------------------
//      生成処理です.
//-------------------------------------------------------------------------------------------------
IMaterial* TexturedMaterial::Create
(
    const Texture*        pTexture,
    IMaterial*              pMaterial
)
{ return new(std::nothrow) TexturedMaterial(pTexture, pMaterial); }

} // namespace s3d
