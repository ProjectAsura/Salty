//-----------------------------------------------------------------------------------------
// File : OBJLoader.h
// Desc : Wavefront OBJ File Loader Module.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------------------

#ifndef _OBJ_LOADER_H_INCLUDED_
#define _OBJ_LOADER_H_INCLUDED_

//-----------------------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------------------
#include <cstdio>


//-----------------------------------------------------------------------------------------
// Constant Values
//-----------------------------------------------------------------------------------------
const static unsigned int OBJ_BUFFER_LENGTH = 1024;
const static unsigned int OBJ_NAME_LENGTH   = 256;


///////////////////////////////////////////////////////////////////////////////////////////
// OBJVEC2 structure
///////////////////////////////////////////////////////////////////////////////////////////
struct OBJVEC2
{
    float x;        //!< X座標です.
    float y;        //!< Y座標です.

    //------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //!
    //! @param [in]     nx      X座標です.
    //! @param [in]     ny      Y座標です.
    //------------------------------------------------------------------------------------
    OBJVEC2( float nx=0.0f, float ny=0.0f );

    //------------------------------------------------------------------------------------
    //! @brief      float*型へのキャストです.
    //------------------------------------------------------------------------------------
    operator float* ();

    //------------------------------------------------------------------------------------
    //! @brief      const float*型へのキャストです.
    //------------------------------------------------------------------------------------
    operator const float* () const;
};


//////////////////////////////////////////////////////////////////////////////////////////
// OBJVEC3 structure
//////////////////////////////////////////////////////////////////////////////////////////
struct OBJVEC3
{
    float x;    //!< X座標です.
    float y;    //!< Y座標です.
    float z;    //!< Z座標です.

    //------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //!
    //! @param [in]     nx      X座標です.
    //! @param [in]     ny      Y座標です.
    //! @param [in]     nz      Z座標です.
    //------------------------------------------------------------------------------------
    OBJVEC3( float nx=0.0f, float ny=0.0f, float nz=0.0f );

    //------------------------------------------------------------------------------------
    //! @brief      float*型へのキャストです.
    //------------------------------------------------------------------------------------
    operator float* ();

    //------------------------------------------------------------------------------------
    //! @brief      const float*型へのキャストです.
    //------------------------------------------------------------------------------------
    operator const float* () const;
};


//////////////////////////////////////////////////////////////////////////////////////////
// OBJVERTEX structure
//////////////////////////////////////////////////////////////////////////////////////////
struct OBJVERTEX
{
    OBJVEC3 position;       //!< 位置座標です.
    OBJVEC3 normal;         //!< 法線ベクトルです.
    OBJVEC3 tangent;        //!< 接ベクトルです.
    OBJVEC3 binormal;       //!< 従法線ベクトルです.
    OBJVEC2 texcoord;       //!< テクスチャ座標です.

    //------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //------------------------------------------------------------------------------------
    OBJVERTEX()
    : position()
    , normal()
    , tangent()
    , binormal()
    , texcoord()
    { /* DO_NOTHING */ }
};


/////////////////////////////////////////////////////////////////////////////////////////
// OBJSUBSET structure
/////////////////////////////////////////////////////////////////////////////////////////
struct OBJSUBSET
{
    unsigned int materialIndex;     //!< マテリアル番号です.
    unsigned int faceStart;         //!< 面開始番号です.
    unsigned int faceCount;         //!< 面数です.

    //-----------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-----------------------------------------------------------------------------------
    OBJSUBSET()
    : materialIndex( 0 )
    , faceStart( 0 )
    , faceCount( 0 )
    { /* DO_NOTHING */ }
};


/////////////////////////////////////////////////////////////////////////////////////////
// OBJMATERIAL structure
/////////////////////////////////////////////////////////////////////////////////////////
struct OBJMATERIAL
{
    char    name[OBJ_NAME_LENGTH];                  //!< マテリアル名です.
    OBJVEC3 ambient;                                //!< 環境色です.
    OBJVEC3 diffuse;                                //!< 拡散反射色です.
    OBJVEC3 specular;                               //!< 鏡面反射色です.
    OBJVEC3 emissive;                               //!< 自己照明色です.
    float   shininess;                              //!< 鏡面反射強度です.
    float   alpha;                                  //!< 透過度です.
    char    ambientMapName     [OBJ_NAME_LENGTH];   //!< アンビエントマップ名です.
    char    diffuseMapName     [OBJ_NAME_LENGTH];   //!< ディフューズマップ名です.
    char    specularMapName    [OBJ_NAME_LENGTH];   //!< スペキュラーマップ名です.
    char    bumpMapName        [OBJ_NAME_LENGTH];   //!< バンプマップ名です.
    char    displacementMapName[OBJ_NAME_LENGTH];   //!< 変位マップ名です.

    //-----------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-----------------------------------------------------------------------------------
    OBJMATERIAL()
    { /* DO_NOTHING */ }
};


/////////////////////////////////////////////////////////////////////////////////////////
// OBJBOUNDINGBOX structure
/////////////////////////////////////////////////////////////////////////////////////////
struct OBJBOUNDINGBOX
{
    OBJVEC3 maximum;    //!< 最大値です.
    OBJVEC3 minimum;    //!< 最小値です.
    OBJVEC3 size;       //!< サイズです.

    //-----------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-----------------------------------------------------------------------------------
    OBJBOUNDINGBOX() 
    { /* DO_NOTHING */ }

    //-----------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //!
    //! @param [in]     value       頂点座標.
    //-----------------------------------------------------------------------------------
    OBJBOUNDINGBOX( OBJVEC3 value );

    //-----------------------------------------------------------------------------------
    //! @brie       マージします.
    //!
    //! @param [in]     value       頂点座標.
    //-----------------------------------------------------------------------------------
    void Merge( OBJVEC3 value );
};


/////////////////////////////////////////////////////////////////////////////////////////
// OBJBOUNDINGSPHERE structure
/////////////////////////////////////////////////////////////////////////////////////////
struct OBJBOUNDINGSPHERE
{
    OBJVEC3 center;     //!< 中心座標.
    float   radius;     //!< 半径.

    //-----------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-----------------------------------------------------------------------------------
    OBJBOUNDINGSPHERE() 
    { /* DO_NOTHING */ }

    //-----------------------------------------------------------------------------------
    //! @brief      バウンディングボックスからバウンディングスフィアを作成します.
    //!
    //! @param [in]     box     バウンディングボックス.
    //-----------------------------------------------------------------------------------
    void Create( OBJBOUNDINGBOX box );
};


/////////////////////////////////////////////////////////////////////////////////////////
// OBJMESH class
/////////////////////////////////////////////////////////////////////////////////////////
class OBJMESH
{
    //===================================================================================
    // list of friend classes and methods.
    //===================================================================================
    /* NOTHING */

private:
    //===================================================================================
    // private variables.
    //===================================================================================
    OBJVERTEX*          m_Vertices;                             //!< 頂点です.
    OBJSUBSET*          m_Subsets;                              //!< サブセットです.
    OBJMATERIAL*        m_Materials;                            //!< マテリアルアです.
    unsigned int*       m_Indices;                              //!< 頂点インデックスです.
    unsigned int        m_NumVertices;                          //!< 頂点数です.
    unsigned int        m_NumSubsets;                           //!< サブセット数です.
    unsigned int        m_NumMaterials;                         //!< マテリアル数です
    unsigned int        m_NumIndices;                           //!< 頂点インデックス数です.
    OBJBOUNDINGBOX      m_Box;                                  //!< バウンディングボックスです.
    OBJBOUNDINGSPHERE   m_Sphere;                               //!< バウンディングスフィアです.
    char                m_directoryPath[OBJ_NAME_LENGTH];       //!< ディレクトリパスです.
    bool                m_IsExistTexCoord;                      //!< テクスチャ座標の存在フラグ.
    bool                m_IsExistNormal;                        //!< 法線ベクトルの存在フラグ.

    //====================================================================================
    // private methods.
    //====================================================================================

    //------------------------------------------------------------------------------------
    //! @brief      MTLファイルをロードします.
    //!
    //! @param [in]     filename        ファイル名.
    //! @retval true    ロードに成功.
    //! @retval false   ロードに失敗.
    //------------------------------------------------------------------------------------
    bool LoadMTLFile( const char* filename );

    //------------------------------------------------------------------------------------
    //! @brief      OBJファイルをロードします.
    //!
    //! @param [in]     filename        ファイル名.
    //! @retval true    ロードに成功.
    //! @retval false   ロードに失敗.
    //------------------------------------------------------------------------------------
    bool LoadOBJFile( const char* filename );

    //------------------------------------------------------------------------------------
    //! @brief      法線ベクトルを計算します.
    //!
    //! @retval true    法線ベクトル算出に成功.
    //! @retval false   法線ベクトル算出に失敗.
    //------------------------------------------------------------------------------------
    bool ComputeNormal();

    //------------------------------------------------------------------------------------
    //! @brief      接ベクトルと従法線ベクトルを計算します.
    //!
    //! @retval true    接ベクトル算出に成功.
    //! @retval false   接ベクトル算出に失敗.
    //------------------------------------------------------------------------------------
    bool ComputeTangent();

    //------------------------------------------------------------------------------------
    //! @brief      直接バイナリ書き込みします.
    //!
    //! @param [in]     pFile       ファイルポインタ.
    //------------------------------------------------------------------------------------
    void WriteDirect  ( FILE* pFile );

    //------------------------------------------------------------------------------------
    //! @brief      最適化しながらバイナリ書き込みします.
    //!
    //! @param [in]     pFile       ファイルポインタ.
    //------------------------------------------------------------------------------------
    void WriteOptimize( FILE* pFile );


protected:
    //====================================================================================
    // protected variables.
    //====================================================================================
    /* NOTHING */

    //====================================================================================
    // protected methdos.
    //====================================================================================
    /* NOTHING */

public:
    //====================================================================================
    // public variables.
    //====================================================================================
    /* NOTHING */

    //====================================================================================
    // public methods.
    //====================================================================================

    //------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //------------------------------------------------------------------------------------
    OBJMESH();

    //------------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //------------------------------------------------------------------------------------
    ~OBJMESH();

    //------------------------------------------------------------------------------------
    //! @brief      ファイルからデータをロードします.
    //!
    //! @param [in]     filename        ファイル名です.
    //! @retval true    ロードに成功.
    //! @retval false   ロードに失敗.
    //------------------------------------------------------------------------------------
    bool LoadFile    ( const char* filename );

    //------------------------------------------------------------------------------------
    //! @brief      バイナリ保存します.
    //!
    //! @param [in]     filename        バイナリファイル名.
    //! @retval true    バイナリ保存に成功.
    //! @retval false   バイナリ保存に失敗.
    //------------------------------------------------------------------------------------
    bool SaveToBinary( const char* filename );

    //------------------------------------------------------------------------------------
    //! @brief      メモリを解放します.
    //------------------------------------------------------------------------------------
    void Release();

    unsigned int        GetNumVertices();
    unsigned int        GetNumSubsets();
    unsigned int        GetNumMaterials();
    unsigned int        GetNumIndices();
    unsigned int        GetIndexData( unsigned int index );
    unsigned int*       GetIndices();
    OBJVERTEX           GetVertex( unsigned int index );
    OBJVERTEX*          GetVertices();
    OBJSUBSET           GetSubset( unsigned int index );
    OBJSUBSET*          GetSubsets();
    OBJMATERIAL         GetMaterial( unsigned int index );
    OBJMATERIAL*        GetMaterials();
    OBJBOUNDINGBOX      GetBox();
    OBJBOUNDINGSPHERE   GetSphere();
};

#endif    //　_OBJ_LOADER_H_INCLUDED_

